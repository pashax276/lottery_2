2025-04-19 07:22:50.220 UTC [1] LOG:  starting PostgreSQL 14.17 on aarch64-unknown-linux-musl, compiled by gcc (Alpine 14.2.0) 14.2.0, 64-bit
2025-04-19 07:22:50.220 UTC [1] LOG:  listening on IPv4 address "0.0.0.0", port 5432
2025-04-19 07:22:50.220 UTC [1] LOG:  listening on IPv6 address "::", port 5432
2025-04-19 07:22:50.226 UTC [1] LOG:  listening on Unix socket "/var/run/postgresql/.s.PGSQL.5432"
2025-04-19 07:22:50.230 UTC [58] LOG:  database system was shut down at 2025-04-19 07:22:50 UTC
2025-04-19 07:22:50.230 UTC [58] DEBUG:  checkpoint record is at 0/1705EA0
2025-04-19 07:22:50.230 UTC [58] DEBUG:  redo record is at 0/1705EA0; shutdown true
2025-04-19 07:22:50.230 UTC [58] DEBUG:  next transaction ID: 735; next OID: 16385
2025-04-19 07:22:50.230 UTC [58] DEBUG:  next MultiXactId: 1; next MultiXactOffset: 0
2025-04-19 07:22:50.230 UTC [58] DEBUG:  oldest unfrozen transaction ID: 727, in database 1
2025-04-19 07:22:50.230 UTC [58] DEBUG:  oldest MultiXactId: 1, in database 1
2025-04-19 07:22:50.230 UTC [58] DEBUG:  commit timestamp Xid oldest/newest: 0/0
2025-04-19 07:22:50.230 UTC [58] DEBUG:  transaction ID wrap limit is 2147484374, limited by database with OID 1
2025-04-19 07:22:50.230 UTC [58] DEBUG:  MultiXactId wrap limit is 2147483648, limited by database with OID 1
2025-04-19 07:22:50.230 UTC [58] DEBUG:  starting up replication slots
2025-04-19 07:22:50.230 UTC [58] DEBUG:  xmin required by slots: data 0, catalog 0
2025-04-19 07:22:50.230 UTC [58] DEBUG:  MultiXactId wrap limit is 2147483648, limited by database with OID 1
2025-04-19 07:22:50.230 UTC [58] DEBUG:  MultiXact member stop limit is now 4294914944 based on MultiXact 1
2025-04-19 07:22:50.236 UTC [1] DEBUG:  starting background worker process "logical replication launcher"
2025-04-19 07:22:50.236 UTC [62] DEBUG:  autovacuum launcher started
2025-04-19 07:22:50.236 UTC [1] LOG:  database system is ready to accept connections
2025-04-19 07:22:50.237 UTC [64] DEBUG:  logical replication launcher started
2025-04-19 07:23:03.498 UTC [73] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:23:03.500 UTC [73] DEBUG:  relation "user_checks" does not exist
2025-04-19 07:23:03.501 UTC [73] NOTICE:  table "user_checks" does not exist, skipping
2025-04-19 07:23:03.501 UTC [73] DEBUG:  relation "prediction_numbers" does not exist
2025-04-19 07:23:03.501 UTC [73] NOTICE:  table "prediction_numbers" does not exist, skipping
2025-04-19 07:23:03.501 UTC [73] DEBUG:  relation "predictions" does not exist
2025-04-19 07:23:03.501 UTC [73] NOTICE:  table "predictions" does not exist, skipping
2025-04-19 07:23:03.502 UTC [73] DEBUG:  relation "expected_combinations" does not exist
2025-04-19 07:23:03.502 UTC [73] NOTICE:  table "expected_combinations" does not exist, skipping
2025-04-19 07:23:03.502 UTC [73] DEBUG:  relation "numbers" does not exist
2025-04-19 07:23:03.502 UTC [73] NOTICE:  table "numbers" does not exist, skipping
2025-04-19 07:23:03.502 UTC [73] DEBUG:  relation "draws" does not exist
2025-04-19 07:23:03.502 UTC [73] NOTICE:  table "draws" does not exist, skipping
2025-04-19 07:23:03.502 UTC [73] DEBUG:  relation "users" does not exist
2025-04-19 07:23:03.502 UTC [73] NOTICE:  table "users" does not exist, skipping
2025-04-19 07:23:03.502 UTC [73] DEBUG:  relation "user_stats" does not exist
2025-04-19 07:23:03.502 UTC [73] NOTICE:  table "user_stats" does not exist, skipping
2025-04-19 07:23:03.502 UTC [73] DEBUG:  relation "analysis_results" does not exist
2025-04-19 07:23:03.502 UTC [73] NOTICE:  table "analysis_results" does not exist, skipping
2025-04-19 07:23:03.506 UTC [73] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:23:03.535 UTC [73] DEBUG:  building index "pg_toast_16386_index" on table "pg_toast_16386" serially
2025-04-19 07:23:03.539 UTC [73] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:23:03.540 UTC [73] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:23:03.540 UTC [73] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:23:03.551 UTC [73] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:23:03.552 UTC [73] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:23:03.552 UTC [73] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:23:03.556 UTC [73] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:23:03.557 UTC [73] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:23:03.557 UTC [73] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:23:03.563 UTC [73] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:23:03.573 UTC [73] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:23:03.575 UTC [73] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:23:03.575 UTC [73] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:23:03.586 UTC [73] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:23:03.587 UTC [73] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:23:03.588 UTC [73] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:23:03.590 UTC [73] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:23:03.594 UTC [73] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:23:03.595 UTC [73] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:23:03.595 UTC [73] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:23:03.599 UTC [73] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:23:03.600 UTC [73] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:23:03.600 UTC [73] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:23:03.620 UTC [73] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:23:03.623 UTC [73] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:23:03.623 UTC [73] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:23:03.623 UTC [73] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:23:03.632 UTC [73] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:23:03.638 UTC [73] DEBUG:  building index "pg_toast_16447_index" on table "pg_toast_16447" serially
2025-04-19 07:23:03.643 UTC [73] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:23:03.647 UTC [73] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:23:03.647 UTC [73] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:23:03.651 UTC [73] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:23:03.670 UTC [73] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:23:03.672 UTC [73] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:23:03.672 UTC [73] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:23:03.676 UTC [73] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:23:03.676 UTC [73] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:23:03.676 UTC [73] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:23:03.685 UTC [73] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:23:03.713 UTC [73] DEBUG:  building index "pg_toast_16480_index" on table "pg_toast_16480" serially
2025-04-19 07:23:03.804 UTC [73] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:23:03.804 UTC [73] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:23:03.805 UTC [73] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:23:03.814 UTC [73] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:23:03.816 UTC [73] DEBUG:  building index "pg_toast_16491_index" on table "pg_toast_16491" serially
2025-04-19 07:23:03.821 UTC [73] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:23:03.821 UTC [73] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:23:03.821 UTC [73] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:23:03.829 UTC [73] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:23:03.830 UTC [73] DEBUG:  building index "pg_toast_16514_index" on table "pg_toast_16514" serially
2025-04-19 07:23:03.835 UTC [73] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:23:03.836 UTC [73] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:23:03.836 UTC [73] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:23:03.847 UTC [73] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:23:03.847 UTC [73] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:23:03.856 UTC [73] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:23:03.856 UTC [73] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:23:03.863 UTC [73] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:23:03.863 UTC [73] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:23:03.865 UTC [73] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:23:03.865 UTC [73] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:23:03.868 UTC [73] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:23:03.868 UTC [73] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:23:03.871 UTC [73] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:23:03.871 UTC [73] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:23:03.877 UTC [73] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:23:03.877 UTC [73] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:23:03.884 UTC [73] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:23:03.884 UTC [73] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:23:03.892 UTC [73] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:23:03.892 UTC [73] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:23:03.897 UTC [73] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:23:03.897 UTC [73] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:23:03.898 UTC [73] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:23:03.898 UTC [73] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:23:03.919 UTC [73] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:23:04.572 UTC [73] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$WFGicujXxwKeR4nSqrPIaOPjsXeIqIE2lbcmIqvvds3a.TfHijTbu')
	                RETURNING id, username, email
	                
2025-04-19 07:23:04.578 UTC [73] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:23:04.580 UTC [73] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:23:04.583 UTC [73] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 07:23:04.622 UTC [73] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:23:04.637 UTC [73] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:23:04.647 UTC [73] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:23:04.657 UTC [73] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:23:04.657 UTC [73] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:23:04.666 UTC [73] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:23:04.674 UTC [73] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:23:04.676 UTC [73] DEBUG:  building index "pg_toast_16550_index" on table "pg_toast_16550" serially
2025-04-19 07:23:04.680 UTC [73] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:23:04.681 UTC [73] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:23:04.681 UTC [73] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:23:04.684 UTC [73] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:23:04.684 UTC [73] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:23:04.684 UTC [73] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:23:04.686 UTC [73] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:23:04.687 UTC [73] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:23:04.687 UTC [73] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:23:04.689 UTC [73] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:23:04.691 UTC [73] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:23:04.691 UTC [73] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:23:04.691 UTC [73] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:23:04.693 UTC [73] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:23:04.693 UTC [73] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:23:04.693 UTC [73] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:23:04.695 UTC [73] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:23:04.697 UTC [73] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:23:04.697 UTC [73] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:23:04.697 UTC [73] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:23:04.699 UTC [73] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:23:04.700 UTC [73] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:23:04.700 UTC [73] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:23:04.705 UTC [73] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:23:04.706 UTC [73] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:23:04.706 UTC [73] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:23:04.706 UTC [73] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:23:04.709 UTC [73] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:23:04.711 UTC [73] DEBUG:  building index "pg_toast_16611_index" on table "pg_toast_16611" serially
2025-04-19 07:23:04.715 UTC [73] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:23:04.716 UTC [73] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:23:04.716 UTC [73] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:23:04.719 UTC [73] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:23:04.720 UTC [73] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:23:04.721 UTC [73] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:23:04.721 UTC [73] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:23:04.722 UTC [73] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:23:04.723 UTC [73] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:23:04.723 UTC [73] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:23:04.728 UTC [73] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:23:04.730 UTC [73] DEBUG:  building index "pg_toast_16644_index" on table "pg_toast_16644" serially
2025-04-19 07:23:04.734 UTC [73] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:23:04.735 UTC [73] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:23:04.735 UTC [73] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:23:04.736 UTC [73] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:23:04.738 UTC [73] DEBUG:  building index "pg_toast_16655_index" on table "pg_toast_16655" serially
2025-04-19 07:23:04.739 UTC [73] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:23:04.739 UTC [73] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:23:04.739 UTC [73] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:23:04.744 UTC [73] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:23:04.746 UTC [73] DEBUG:  building index "pg_toast_16678_index" on table "pg_toast_16678" serially
2025-04-19 07:23:04.748 UTC [73] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:23:04.748 UTC [73] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:23:04.748 UTC [73] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:23:04.751 UTC [73] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:23:04.751 UTC [73] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:23:04.754 UTC [73] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:23:04.754 UTC [73] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:23:04.756 UTC [73] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:23:04.756 UTC [73] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:23:04.758 UTC [73] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:23:04.758 UTC [73] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:23:04.762 UTC [73] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:23:04.762 UTC [73] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:23:04.765 UTC [73] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:23:04.765 UTC [73] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:23:04.768 UTC [73] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:23:04.768 UTC [73] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:23:04.769 UTC [73] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:23:04.769 UTC [73] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:23:04.771 UTC [73] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:23:04.771 UTC [73] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:23:04.773 UTC [73] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:23:04.773 UTC [73] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:23:04.777 UTC [73] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:23:04.777 UTC [73] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:23:04.791 UTC [73] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:23:05.104 UTC [73] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$molLIPnfC0LlY0j8a4iBK.ZgUWZmU7DFUgIz7DSr5fQxHlMMbgP.a')
	                RETURNING id, username, email
	                
2025-04-19 07:23:05.106 UTC [73] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:23:05.106 UTC [73] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:23:14.362 UTC [73] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 07:23:14.692 UTC [73] DEBUG:  unexpected EOF on client connection
2025-04-19 07:23:19.542 UTC [88] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:23:19.589 UTC [88] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:23:19.612 UTC [88] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:23:19.612 UTC [88] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:23:19.625 UTC [88] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:23:19.644 UTC [88] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:23:19.666 UTC [88] DEBUG:  building index "pg_toast_16714_index" on table "pg_toast_16714" serially
2025-04-19 07:23:19.701 UTC [88] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:23:19.702 UTC [88] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:23:19.702 UTC [88] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:23:19.716 UTC [88] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:23:19.717 UTC [88] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:23:19.717 UTC [88] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:23:19.726 UTC [88] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:23:19.726 UTC [88] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:23:19.726 UTC [88] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:23:19.739 UTC [88] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:23:19.741 UTC [88] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:23:19.742 UTC [88] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:23:19.742 UTC [88] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:23:19.744 UTC [88] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:23:19.745 UTC [88] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:23:19.745 UTC [88] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:23:19.747 UTC [88] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:23:19.751 UTC [88] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:23:19.752 UTC [88] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:23:19.752 UTC [88] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:23:19.763 UTC [88] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:23:19.763 UTC [88] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:23:19.763 UTC [88] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:23:19.767 UTC [88] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:23:19.769 UTC [88] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:23:19.770 UTC [88] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:23:19.770 UTC [88] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:23:19.778 UTC [88] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:23:19.785 UTC [88] DEBUG:  building index "pg_toast_16775_index" on table "pg_toast_16775" serially
2025-04-19 07:23:19.787 UTC [88] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:23:19.788 UTC [88] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:23:19.788 UTC [88] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:23:19.791 UTC [88] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:23:19.792 UTC [88] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:23:19.792 UTC [88] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:23:19.792 UTC [88] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:23:19.795 UTC [88] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:23:19.796 UTC [88] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:23:19.796 UTC [88] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:23:19.802 UTC [88] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:23:19.804 UTC [88] DEBUG:  building index "pg_toast_16808_index" on table "pg_toast_16808" serially
2025-04-19 07:23:19.809 UTC [88] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:23:19.810 UTC [88] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:23:19.810 UTC [88] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:23:19.812 UTC [88] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:23:19.815 UTC [88] DEBUG:  building index "pg_toast_16819_index" on table "pg_toast_16819" serially
2025-04-19 07:23:19.817 UTC [88] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:23:19.819 UTC [88] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:23:19.819 UTC [88] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:23:19.824 UTC [88] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:23:19.827 UTC [88] DEBUG:  building index "pg_toast_16842_index" on table "pg_toast_16842" serially
2025-04-19 07:23:19.831 UTC [88] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:23:19.832 UTC [88] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:23:19.832 UTC [88] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:23:19.836 UTC [88] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:23:19.836 UTC [88] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:23:19.840 UTC [88] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:23:19.841 UTC [88] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:23:19.843 UTC [88] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:23:19.843 UTC [88] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:23:19.846 UTC [88] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:23:19.846 UTC [88] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:23:19.851 UTC [88] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:23:19.851 UTC [88] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:23:19.859 UTC [88] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:23:19.859 UTC [88] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:23:19.863 UTC [88] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:23:19.863 UTC [88] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:23:19.867 UTC [88] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:23:19.867 UTC [88] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:23:19.872 UTC [88] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:23:19.872 UTC [88] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:23:19.874 UTC [88] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:23:19.874 UTC [88] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:23:19.879 UTC [88] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:23:19.879 UTC [88] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:23:19.914 UTC [88] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:23:20.368 UTC [88] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$yo0bTuSzhDXOdCVVFrjnYetvafAXaF10Dqhlw5O1Jhh5V0tSZZDke')
	                RETURNING id, username, email
	                
2025-04-19 07:23:20.373 UTC [88] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:23:20.374 UTC [88] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:23:20.377 UTC [88] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 07:23:20.412 UTC [88] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:23:20.417 UTC [88] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:23:20.423 UTC [88] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:23:20.431 UTC [88] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:23:20.431 UTC [88] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:23:20.436 UTC [88] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:23:20.440 UTC [88] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:23:20.442 UTC [88] DEBUG:  building index "pg_toast_16878_index" on table "pg_toast_16878" serially
2025-04-19 07:23:20.444 UTC [88] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:23:20.445 UTC [88] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:23:20.445 UTC [88] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:23:20.448 UTC [88] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:23:20.449 UTC [88] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:23:20.449 UTC [88] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:23:20.451 UTC [88] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:23:20.453 UTC [88] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:23:20.453 UTC [88] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:23:20.459 UTC [88] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:23:20.461 UTC [88] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:23:20.462 UTC [88] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:23:20.462 UTC [88] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:23:20.468 UTC [88] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:23:20.469 UTC [88] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:23:20.469 UTC [88] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:23:20.472 UTC [88] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:23:20.474 UTC [88] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:23:20.475 UTC [88] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:23:20.475 UTC [88] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:23:20.484 UTC [88] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:23:20.486 UTC [88] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:23:20.486 UTC [88] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:23:20.498 UTC [88] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:23:20.503 UTC [88] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:23:20.504 UTC [88] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:23:20.504 UTC [88] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:23:20.509 UTC [88] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:23:20.515 UTC [88] DEBUG:  building index "pg_toast_16939_index" on table "pg_toast_16939" serially
2025-04-19 07:23:20.518 UTC [88] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:23:20.518 UTC [88] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:23:20.518 UTC [88] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:23:20.521 UTC [88] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:23:20.523 UTC [88] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:23:20.524 UTC [88] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:23:20.524 UTC [88] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:23:20.529 UTC [88] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:23:20.530 UTC [88] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:23:20.530 UTC [88] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:23:20.536 UTC [88] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:23:20.539 UTC [88] DEBUG:  building index "pg_toast_16972_index" on table "pg_toast_16972" serially
2025-04-19 07:23:20.551 UTC [88] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:23:20.552 UTC [88] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:23:20.552 UTC [88] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:23:20.578 UTC [88] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:23:20.585 UTC [88] DEBUG:  building index "pg_toast_16983_index" on table "pg_toast_16983" serially
2025-04-19 07:23:20.589 UTC [88] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:23:20.590 UTC [88] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:23:20.590 UTC [88] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:23:20.596 UTC [88] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:23:20.602 UTC [88] DEBUG:  building index "pg_toast_17006_index" on table "pg_toast_17006" serially
2025-04-19 07:23:20.609 UTC [88] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:23:20.611 UTC [88] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:23:20.611 UTC [88] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:23:20.617 UTC [88] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:23:20.617 UTC [88] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:23:20.620 UTC [88] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:23:20.620 UTC [88] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:23:20.622 UTC [88] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:23:20.622 UTC [88] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:23:20.624 UTC [88] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:23:20.624 UTC [88] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:23:20.627 UTC [88] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:23:20.627 UTC [88] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:23:20.630 UTC [88] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:23:20.630 UTC [88] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:23:20.633 UTC [88] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:23:20.633 UTC [88] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:23:20.635 UTC [88] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:23:20.636 UTC [88] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:23:20.638 UTC [88] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:23:20.638 UTC [88] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:23:20.643 UTC [88] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:23:20.643 UTC [88] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:23:20.652 UTC [88] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:23:20.652 UTC [88] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:23:20.697 UTC [88] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:23:21.201 UTC [88] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$bEFCQiIj7Uz.zah1xodTAeoiO4gAAvWqiVmxAlvMgIF90kc/O3aaK')
	                RETURNING id, username, email
	                
2025-04-19 07:23:21.210 UTC [88] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:23:21.214 UTC [88] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:23:30.765 UTC [88] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 07:23:31.400 UTC [88] DEBUG:  unexpected EOF on client connection
2025-04-19 07:23:36.993 UTC [96] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:23:37.005 UTC [96] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:23:37.012 UTC [96] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:23:37.012 UTC [96] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:23:37.017 UTC [96] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:23:37.023 UTC [96] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:23:37.028 UTC [96] DEBUG:  building index "pg_toast_17042_index" on table "pg_toast_17042" serially
2025-04-19 07:23:37.030 UTC [96] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:23:37.031 UTC [96] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:23:37.031 UTC [96] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:23:37.032 UTC [96] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:23:37.033 UTC [96] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:23:37.033 UTC [96] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:23:37.034 UTC [96] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:23:37.034 UTC [96] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:23:37.034 UTC [96] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:23:37.035 UTC [96] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:23:37.036 UTC [96] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:23:37.036 UTC [96] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:23:37.036 UTC [96] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:23:37.037 UTC [96] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:23:37.037 UTC [96] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:23:37.037 UTC [96] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:23:37.039 UTC [96] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:23:37.041 UTC [96] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:23:37.041 UTC [96] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:23:37.042 UTC [96] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:23:37.043 UTC [96] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:23:37.043 UTC [96] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:23:37.043 UTC [96] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:23:37.045 UTC [96] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:23:37.047 UTC [96] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:23:37.047 UTC [96] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:23:37.047 UTC [96] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:23:37.049 UTC [96] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:23:37.051 UTC [96] DEBUG:  building index "pg_toast_17103_index" on table "pg_toast_17103" serially
2025-04-19 07:23:37.053 UTC [96] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:23:37.054 UTC [96] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:23:37.054 UTC [96] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:23:37.057 UTC [96] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:23:37.059 UTC [96] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:23:37.060 UTC [96] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:23:37.060 UTC [96] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:23:37.063 UTC [96] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:23:37.063 UTC [96] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:23:37.063 UTC [96] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:23:37.066 UTC [96] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:23:37.069 UTC [96] DEBUG:  building index "pg_toast_17136_index" on table "pg_toast_17136" serially
2025-04-19 07:23:37.070 UTC [96] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:23:37.070 UTC [96] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:23:37.070 UTC [96] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:23:37.071 UTC [96] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:23:37.073 UTC [96] DEBUG:  building index "pg_toast_17147_index" on table "pg_toast_17147" serially
2025-04-19 07:23:37.075 UTC [96] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:23:37.075 UTC [96] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:23:37.075 UTC [96] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:23:37.077 UTC [96] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:23:37.078 UTC [96] DEBUG:  building index "pg_toast_17170_index" on table "pg_toast_17170" serially
2025-04-19 07:23:37.081 UTC [96] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:23:37.081 UTC [96] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:23:37.081 UTC [96] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:23:37.082 UTC [96] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:23:37.082 UTC [96] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:23:37.084 UTC [96] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:23:37.085 UTC [96] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:23:37.087 UTC [96] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:23:37.087 UTC [96] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:23:37.089 UTC [96] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:23:37.089 UTC [96] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:23:37.094 UTC [96] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:23:37.094 UTC [96] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:23:37.097 UTC [96] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:23:37.097 UTC [96] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:23:37.101 UTC [96] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:23:37.101 UTC [96] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:23:37.103 UTC [96] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:23:37.103 UTC [96] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:23:37.105 UTC [96] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:23:37.105 UTC [96] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:23:37.108 UTC [96] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:23:37.108 UTC [96] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:23:37.111 UTC [96] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:23:37.111 UTC [96] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:23:37.140 UTC [96] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:23:37.475 UTC [96] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$l4oFYK2YBTmRCpJo9auwyuAW4UacSLYWzFuBm.vXEJ040KN4wUg.i')
	                RETURNING id, username, email
	                
2025-04-19 07:23:37.478 UTC [96] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:23:37.479 UTC [96] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:23:37.481 UTC [96] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 07:23:37.505 UTC [96] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:23:37.512 UTC [96] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:23:37.518 UTC [96] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:23:37.527 UTC [96] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:23:37.527 UTC [96] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:23:37.534 UTC [96] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:23:37.539 UTC [96] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:23:37.541 UTC [96] DEBUG:  building index "pg_toast_17206_index" on table "pg_toast_17206" serially
2025-04-19 07:23:37.542 UTC [96] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:23:37.543 UTC [96] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:23:37.543 UTC [96] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:23:37.544 UTC [96] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:23:37.544 UTC [96] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:23:37.544 UTC [96] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:23:37.546 UTC [96] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:23:37.546 UTC [96] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:23:37.546 UTC [96] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:23:37.547 UTC [96] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:23:37.548 UTC [96] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:23:37.549 UTC [96] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:23:37.549 UTC [96] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:23:37.550 UTC [96] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:23:37.550 UTC [96] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:23:37.550 UTC [96] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:23:37.551 UTC [96] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:23:37.552 UTC [96] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:23:37.552 UTC [96] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:23:37.552 UTC [96] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:23:37.553 UTC [96] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:23:37.553 UTC [96] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:23:37.553 UTC [96] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:23:37.555 UTC [96] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:23:37.558 UTC [96] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:23:37.558 UTC [96] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:23:37.558 UTC [96] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:23:37.560 UTC [96] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:23:37.561 UTC [96] DEBUG:  building index "pg_toast_17267_index" on table "pg_toast_17267" serially
2025-04-19 07:23:37.562 UTC [96] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:23:37.563 UTC [96] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:23:37.563 UTC [96] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:23:37.565 UTC [96] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:23:37.567 UTC [96] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:23:37.567 UTC [96] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:23:37.567 UTC [96] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:23:37.568 UTC [96] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:23:37.568 UTC [96] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:23:37.568 UTC [96] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:23:37.569 UTC [96] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:23:37.571 UTC [96] DEBUG:  building index "pg_toast_17300_index" on table "pg_toast_17300" serially
2025-04-19 07:23:37.572 UTC [96] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:23:37.572 UTC [96] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:23:37.572 UTC [96] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:23:37.573 UTC [96] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:23:37.574 UTC [96] DEBUG:  building index "pg_toast_17311_index" on table "pg_toast_17311" serially
2025-04-19 07:23:37.575 UTC [96] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:23:37.576 UTC [96] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:23:37.576 UTC [96] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:23:37.579 UTC [96] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:23:37.581 UTC [96] DEBUG:  building index "pg_toast_17334_index" on table "pg_toast_17334" serially
2025-04-19 07:23:37.582 UTC [96] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:23:37.582 UTC [96] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:23:37.582 UTC [96] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:23:37.583 UTC [96] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:23:37.583 UTC [96] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:23:37.584 UTC [96] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:23:37.584 UTC [96] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:23:37.586 UTC [96] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:23:37.586 UTC [96] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:23:37.587 UTC [96] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:23:37.587 UTC [96] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:23:37.588 UTC [96] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:23:37.588 UTC [96] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:23:37.589 UTC [96] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:23:37.589 UTC [96] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:23:37.590 UTC [96] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:23:37.590 UTC [96] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:23:37.591 UTC [96] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:23:37.592 UTC [96] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:23:37.592 UTC [96] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:23:37.592 UTC [96] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:23:37.594 UTC [96] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:23:37.594 UTC [96] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:23:37.595 UTC [96] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:23:37.595 UTC [96] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:23:37.606 UTC [96] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:23:37.865 UTC [96] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$UJSFkhjaavcwF3GGk5/wNete2VijqcIc5ZuccBPUjD/ug854H.HKS')
	                RETURNING id, username, email
	                
2025-04-19 07:23:37.865 UTC [96] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:23:37.866 UTC [96] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:23:48.721 UTC [96] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 07:23:49.072 UTC [96] DEBUG:  unexpected EOF on client connection
2025-04-19 07:23:50.298 UTC [111] DEBUG:  autovacuum: processing database "postgres"
2025-04-19 07:23:52.192 UTC [112] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:23:52.204 UTC [112] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:23:52.211 UTC [112] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:23:52.211 UTC [112] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:23:52.215 UTC [112] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:23:52.222 UTC [112] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:23:52.226 UTC [112] DEBUG:  building index "pg_toast_17370_index" on table "pg_toast_17370" serially
2025-04-19 07:23:52.230 UTC [112] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:23:52.231 UTC [112] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:23:52.231 UTC [112] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:23:52.233 UTC [112] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:23:52.233 UTC [112] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:23:52.233 UTC [112] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:23:52.234 UTC [112] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:23:52.234 UTC [112] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:23:52.234 UTC [112] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:23:52.235 UTC [112] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:23:52.236 UTC [112] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:23:52.236 UTC [112] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:23:52.236 UTC [112] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:23:52.237 UTC [112] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:23:52.237 UTC [112] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:23:52.237 UTC [112] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:23:52.238 UTC [112] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:23:52.239 UTC [112] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:23:52.239 UTC [112] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:23:52.239 UTC [112] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:23:52.240 UTC [112] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:23:52.240 UTC [112] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:23:52.240 UTC [112] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:23:52.242 UTC [112] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:23:52.243 UTC [112] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:23:52.243 UTC [112] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:23:52.243 UTC [112] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:23:52.245 UTC [112] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:23:52.248 UTC [112] DEBUG:  building index "pg_toast_17431_index" on table "pg_toast_17431" serially
2025-04-19 07:23:52.250 UTC [112] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:23:52.251 UTC [112] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:23:52.251 UTC [112] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:23:52.253 UTC [112] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:23:52.255 UTC [112] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:23:52.255 UTC [112] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:23:52.255 UTC [112] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:23:52.256 UTC [112] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:23:52.256 UTC [112] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:23:52.256 UTC [112] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:23:52.258 UTC [112] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:23:52.259 UTC [112] DEBUG:  building index "pg_toast_17464_index" on table "pg_toast_17464" serially
2025-04-19 07:23:52.260 UTC [112] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:23:52.260 UTC [112] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:23:52.260 UTC [112] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:23:52.261 UTC [112] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:23:52.262 UTC [112] DEBUG:  building index "pg_toast_17475_index" on table "pg_toast_17475" serially
2025-04-19 07:23:52.263 UTC [112] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:23:52.264 UTC [112] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:23:52.264 UTC [112] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:23:52.265 UTC [112] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:23:52.266 UTC [112] DEBUG:  building index "pg_toast_17498_index" on table "pg_toast_17498" serially
2025-04-19 07:23:52.267 UTC [112] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:23:52.268 UTC [112] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:23:52.268 UTC [112] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:23:52.269 UTC [112] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:23:52.269 UTC [112] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:23:52.270 UTC [112] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:23:52.270 UTC [112] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:23:52.271 UTC [112] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:23:52.271 UTC [112] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:23:52.272 UTC [112] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:23:52.272 UTC [112] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:23:52.273 UTC [112] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:23:52.273 UTC [112] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:23:52.274 UTC [112] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:23:52.274 UTC [112] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:23:52.276 UTC [112] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:23:52.276 UTC [112] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:23:52.277 UTC [112] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:23:52.277 UTC [112] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:23:52.280 UTC [112] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:23:52.280 UTC [112] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:23:52.283 UTC [112] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:23:52.283 UTC [112] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:23:52.284 UTC [112] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:23:52.284 UTC [112] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:23:52.299 UTC [112] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:23:52.631 UTC [112] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$lkkvqtMi59TUu9WA4/lq5u2YNPBnbiyHq5wIFsSOSgcbou3k7/nam')
	                RETURNING id, username, email
	                
2025-04-19 07:23:52.632 UTC [112] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:23:52.632 UTC [112] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:23:52.633 UTC [112] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 07:23:52.657 UTC [112] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:23:52.662 UTC [112] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:23:52.675 UTC [112] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:23:52.689 UTC [112] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:23:52.689 UTC [112] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:23:52.702 UTC [112] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:23:52.710 UTC [112] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:23:52.713 UTC [112] DEBUG:  building index "pg_toast_17534_index" on table "pg_toast_17534" serially
2025-04-19 07:23:52.716 UTC [112] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:23:52.718 UTC [112] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:23:52.718 UTC [112] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:23:52.721 UTC [112] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:23:52.721 UTC [112] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:23:52.721 UTC [112] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:23:52.723 UTC [112] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:23:52.723 UTC [112] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:23:52.724 UTC [112] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:23:52.729 UTC [112] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:23:52.735 UTC [112] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:23:52.735 UTC [112] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:23:52.735 UTC [112] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:23:52.739 UTC [112] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:23:52.739 UTC [112] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:23:52.739 UTC [112] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:23:52.742 UTC [112] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:23:52.743 UTC [112] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:23:52.744 UTC [112] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:23:52.744 UTC [112] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:23:52.746 UTC [112] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:23:52.747 UTC [112] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:23:52.747 UTC [112] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:23:52.750 UTC [112] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:23:52.752 UTC [112] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:23:52.752 UTC [112] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:23:52.752 UTC [112] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:23:52.760 UTC [112] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:23:52.763 UTC [112] DEBUG:  building index "pg_toast_17595_index" on table "pg_toast_17595" serially
2025-04-19 07:23:52.767 UTC [112] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:23:52.767 UTC [112] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:23:52.767 UTC [112] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:23:52.771 UTC [112] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:23:52.774 UTC [112] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:23:52.774 UTC [112] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:23:52.774 UTC [112] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:23:52.777 UTC [112] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:23:52.778 UTC [112] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:23:52.779 UTC [112] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:23:52.781 UTC [112] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:23:52.783 UTC [112] DEBUG:  building index "pg_toast_17628_index" on table "pg_toast_17628" serially
2025-04-19 07:23:52.784 UTC [112] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:23:52.784 UTC [112] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:23:52.784 UTC [112] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:23:52.785 UTC [112] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:23:52.787 UTC [112] DEBUG:  building index "pg_toast_17639_index" on table "pg_toast_17639" serially
2025-04-19 07:23:52.788 UTC [112] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:23:52.788 UTC [112] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:23:52.788 UTC [112] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:23:52.791 UTC [112] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:23:52.795 UTC [112] DEBUG:  building index "pg_toast_17662_index" on table "pg_toast_17662" serially
2025-04-19 07:23:52.799 UTC [112] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:23:52.800 UTC [112] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:23:52.800 UTC [112] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:23:52.803 UTC [112] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:23:52.803 UTC [112] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:23:52.806 UTC [112] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:23:52.806 UTC [112] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:23:52.808 UTC [112] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:23:52.808 UTC [112] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:23:52.811 UTC [112] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:23:52.811 UTC [112] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:23:52.814 UTC [112] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:23:52.814 UTC [112] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:23:52.815 UTC [112] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:23:52.815 UTC [112] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:23:52.816 UTC [112] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:23:52.816 UTC [112] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:23:52.817 UTC [112] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:23:52.817 UTC [112] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:23:52.820 UTC [112] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:23:52.820 UTC [112] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:23:52.821 UTC [112] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:23:52.821 UTC [112] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:23:52.825 UTC [112] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:23:52.825 UTC [112] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:23:52.838 UTC [112] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:23:53.128 UTC [112] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$aPVdNWXyyeKvS4ZJI2mAUua8YtMhPoSGZGIB8En2iaWP7MOKyvKsO')
	                RETURNING id, username, email
	                
2025-04-19 07:23:53.134 UTC [112] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:23:53.138 UTC [112] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:24:05.115 UTC [112] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 07:24:05.415 UTC [112] DEBUG:  unexpected EOF on client connection
2025-04-19 07:24:07.032 UTC [120] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:24:07.037 UTC [120] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:24:07.043 UTC [120] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:24:07.043 UTC [120] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:24:07.047 UTC [120] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:24:07.050 UTC [120] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:24:07.052 UTC [120] DEBUG:  building index "pg_toast_17698_index" on table "pg_toast_17698" serially
2025-04-19 07:24:07.053 UTC [120] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:24:07.054 UTC [120] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:24:07.054 UTC [120] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:24:07.055 UTC [120] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:24:07.055 UTC [120] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:24:07.055 UTC [120] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:24:07.056 UTC [120] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:24:07.056 UTC [120] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:24:07.056 UTC [120] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:24:07.057 UTC [120] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:24:07.058 UTC [120] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:24:07.058 UTC [120] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:24:07.058 UTC [120] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:24:07.059 UTC [120] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:24:07.059 UTC [120] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:24:07.059 UTC [120] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:24:07.060 UTC [120] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:24:07.061 UTC [120] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:24:07.061 UTC [120] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:24:07.061 UTC [120] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:24:07.062 UTC [120] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:24:07.062 UTC [120] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:24:07.062 UTC [120] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:24:07.064 UTC [120] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:24:07.065 UTC [120] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:24:07.065 UTC [120] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:24:07.065 UTC [120] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:24:07.066 UTC [120] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:24:07.068 UTC [120] DEBUG:  building index "pg_toast_17759_index" on table "pg_toast_17759" serially
2025-04-19 07:24:07.069 UTC [120] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:24:07.069 UTC [120] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:24:07.069 UTC [120] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:24:07.070 UTC [120] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:24:07.072 UTC [120] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:24:07.072 UTC [120] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:24:07.072 UTC [120] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:24:07.073 UTC [120] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:24:07.073 UTC [120] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:24:07.073 UTC [120] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:24:07.074 UTC [120] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:24:07.075 UTC [120] DEBUG:  building index "pg_toast_17792_index" on table "pg_toast_17792" serially
2025-04-19 07:24:07.076 UTC [120] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:24:07.076 UTC [120] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:24:07.076 UTC [120] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:24:07.077 UTC [120] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:24:07.078 UTC [120] DEBUG:  building index "pg_toast_17803_index" on table "pg_toast_17803" serially
2025-04-19 07:24:07.079 UTC [120] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:24:07.079 UTC [120] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:24:07.079 UTC [120] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:24:07.081 UTC [120] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:24:07.081 UTC [120] DEBUG:  building index "pg_toast_17826_index" on table "pg_toast_17826" serially
2025-04-19 07:24:07.082 UTC [120] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:24:07.082 UTC [120] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:24:07.082 UTC [120] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:24:07.085 UTC [120] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:24:07.085 UTC [120] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:24:07.086 UTC [120] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:24:07.086 UTC [120] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:24:07.087 UTC [120] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:24:07.087 UTC [120] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:24:07.088 UTC [120] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:24:07.088 UTC [120] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:24:07.089 UTC [120] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:24:07.089 UTC [120] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:24:07.090 UTC [120] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:24:07.090 UTC [120] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:24:07.090 UTC [120] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:24:07.090 UTC [120] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:24:07.091 UTC [120] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:24:07.091 UTC [120] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:24:07.092 UTC [120] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:24:07.092 UTC [120] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:24:07.094 UTC [120] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:24:07.094 UTC [120] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:24:07.095 UTC [120] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:24:07.095 UTC [120] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:24:07.104 UTC [120] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:24:07.373 UTC [120] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$xXNjO/KREV7Fcbb2LAJFdOYVyN2VqfyNG14o.H3nwG5Jzli52JaQm')
	                RETURNING id, username, email
	                
2025-04-19 07:24:07.374 UTC [120] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:24:07.374 UTC [120] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:24:07.375 UTC [120] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 07:24:07.381 UTC [120] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:24:07.382 UTC [120] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:24:07.384 UTC [120] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:24:07.389 UTC [120] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:24:07.389 UTC [120] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:24:07.391 UTC [120] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:24:07.394 UTC [120] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:24:07.395 UTC [120] DEBUG:  building index "pg_toast_17862_index" on table "pg_toast_17862" serially
2025-04-19 07:24:07.396 UTC [120] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:24:07.396 UTC [120] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:24:07.396 UTC [120] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:24:07.397 UTC [120] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:24:07.397 UTC [120] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:24:07.397 UTC [120] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:24:07.398 UTC [120] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:24:07.398 UTC [120] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:24:07.398 UTC [120] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:24:07.398 UTC [120] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:24:07.399 UTC [120] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:24:07.399 UTC [120] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:24:07.399 UTC [120] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:24:07.400 UTC [120] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:24:07.400 UTC [120] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:24:07.400 UTC [120] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:24:07.400 UTC [120] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:24:07.401 UTC [120] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:24:07.401 UTC [120] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:24:07.401 UTC [120] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:24:07.402 UTC [120] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:24:07.402 UTC [120] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:24:07.402 UTC [120] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:24:07.403 UTC [120] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:24:07.404 UTC [120] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:24:07.404 UTC [120] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:24:07.405 UTC [120] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:24:07.405 UTC [120] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:24:07.406 UTC [120] DEBUG:  building index "pg_toast_17923_index" on table "pg_toast_17923" serially
2025-04-19 07:24:07.407 UTC [120] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:24:07.407 UTC [120] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:24:07.407 UTC [120] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:24:07.408 UTC [120] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:24:07.409 UTC [120] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:24:07.409 UTC [120] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:24:07.409 UTC [120] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:24:07.410 UTC [120] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:24:07.410 UTC [120] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:24:07.410 UTC [120] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:24:07.411 UTC [120] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:24:07.412 UTC [120] DEBUG:  building index "pg_toast_17956_index" on table "pg_toast_17956" serially
2025-04-19 07:24:07.413 UTC [120] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:24:07.413 UTC [120] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:24:07.413 UTC [120] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:24:07.414 UTC [120] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:24:07.415 UTC [120] DEBUG:  building index "pg_toast_17967_index" on table "pg_toast_17967" serially
2025-04-19 07:24:07.415 UTC [120] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:24:07.416 UTC [120] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:24:07.416 UTC [120] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:24:07.417 UTC [120] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:24:07.418 UTC [120] DEBUG:  building index "pg_toast_17990_index" on table "pg_toast_17990" serially
2025-04-19 07:24:07.419 UTC [120] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:24:07.419 UTC [120] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:24:07.419 UTC [120] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:24:07.420 UTC [120] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:24:07.420 UTC [120] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:24:07.420 UTC [120] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:24:07.420 UTC [120] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:24:07.421 UTC [120] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:24:07.421 UTC [120] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:24:07.422 UTC [120] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:24:07.422 UTC [120] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:24:07.422 UTC [120] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:24:07.422 UTC [120] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:24:07.423 UTC [120] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:24:07.423 UTC [120] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:24:07.424 UTC [120] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:24:07.424 UTC [120] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:24:07.425 UTC [120] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:24:07.425 UTC [120] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:24:07.425 UTC [120] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:24:07.425 UTC [120] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:24:07.426 UTC [120] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:24:07.426 UTC [120] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:24:07.427 UTC [120] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:24:07.427 UTC [120] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:24:07.432 UTC [120] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:24:07.689 UTC [120] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$9td6vpkrwLVunmUfH8nUDeKVYltgAwxswxOfS.W6WK9Dv/mxcokYG')
	                RETURNING id, username, email
	                
2025-04-19 07:24:07.690 UTC [120] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:24:07.690 UTC [120] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:24:21.096 UTC [120] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 07:24:21.441 UTC [120] DEBUG:  unexpected EOF on client connection
2025-04-19 07:24:27.596 UTC [134] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:24:27.720 UTC [134] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:24:27.791 UTC [134] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:24:27.791 UTC [134] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:24:27.824 UTC [134] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:24:27.848 UTC [134] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:24:27.893 UTC [134] DEBUG:  building index "pg_toast_18026_index" on table "pg_toast_18026" serially
2025-04-19 07:24:27.909 UTC [134] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:24:27.911 UTC [134] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:24:27.912 UTC [134] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:24:27.917 UTC [134] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:24:27.918 UTC [134] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:24:27.918 UTC [134] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:24:27.921 UTC [134] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:24:27.922 UTC [134] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:24:27.922 UTC [134] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:24:27.925 UTC [134] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:24:27.928 UTC [134] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:24:27.929 UTC [134] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:24:27.929 UTC [134] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:24:27.931 UTC [134] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:24:27.933 UTC [134] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:24:27.933 UTC [134] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:24:27.936 UTC [134] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:24:27.938 UTC [134] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:24:27.939 UTC [134] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:24:27.940 UTC [134] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:24:27.941 UTC [134] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:24:27.942 UTC [134] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:24:27.942 UTC [134] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:24:27.945 UTC [134] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:24:27.947 UTC [134] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:24:27.948 UTC [134] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:24:27.956 UTC [134] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:24:27.960 UTC [134] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:24:27.971 UTC [134] DEBUG:  building index "pg_toast_18087_index" on table "pg_toast_18087" serially
2025-04-19 07:24:27.972 UTC [134] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:24:27.972 UTC [134] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:24:27.972 UTC [134] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:24:27.978 UTC [134] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:24:27.980 UTC [134] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:24:27.980 UTC [134] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:24:27.980 UTC [134] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:24:27.986 UTC [134] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:24:27.987 UTC [134] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:24:27.987 UTC [134] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:24:27.989 UTC [134] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:24:27.993 UTC [134] DEBUG:  building index "pg_toast_18120_index" on table "pg_toast_18120" serially
2025-04-19 07:24:27.994 UTC [134] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:24:27.994 UTC [134] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:24:27.994 UTC [134] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:24:27.996 UTC [134] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:24:28.000 UTC [134] DEBUG:  building index "pg_toast_18131_index" on table "pg_toast_18131" serially
2025-04-19 07:24:28.002 UTC [134] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:24:28.003 UTC [134] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:24:28.003 UTC [134] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:24:28.005 UTC [134] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:24:28.016 UTC [134] DEBUG:  building index "pg_toast_18154_index" on table "pg_toast_18154" serially
2025-04-19 07:24:28.017 UTC [134] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:24:28.018 UTC [134] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:24:28.020 UTC [134] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:24:28.037 UTC [134] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:24:28.037 UTC [134] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:24:28.056 UTC [134] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:24:28.056 UTC [134] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:24:28.059 UTC [134] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:24:28.059 UTC [134] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:24:28.066 UTC [134] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:24:28.066 UTC [134] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:24:28.069 UTC [134] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:24:28.069 UTC [134] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:24:28.074 UTC [134] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:24:28.074 UTC [134] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:24:28.078 UTC [134] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:24:28.078 UTC [134] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:24:28.083 UTC [134] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:24:28.083 UTC [134] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:24:28.087 UTC [134] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:24:28.087 UTC [134] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:24:28.092 UTC [134] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:24:28.092 UTC [134] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:24:28.095 UTC [134] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:24:28.095 UTC [134] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:24:28.163 UTC [134] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:24:28.669 UTC [134] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$ZY577adG4XDyzhIB09g/O.rABhH2JvWyiZd2DxghxZEo5uWurRyE.')
	                RETURNING id, username, email
	                
2025-04-19 07:24:28.689 UTC [134] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:24:28.692 UTC [134] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:24:28.704 UTC [134] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 07:24:28.741 UTC [134] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:24:28.749 UTC [134] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:24:28.754 UTC [134] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:24:28.762 UTC [134] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:24:28.762 UTC [134] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:24:28.767 UTC [134] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:24:28.772 UTC [134] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:24:28.775 UTC [134] DEBUG:  building index "pg_toast_18190_index" on table "pg_toast_18190" serially
2025-04-19 07:24:28.782 UTC [134] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:24:28.782 UTC [134] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:24:28.782 UTC [134] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:24:28.784 UTC [134] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:24:28.785 UTC [134] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:24:28.785 UTC [134] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:24:28.786 UTC [134] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:24:28.787 UTC [134] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:24:28.787 UTC [134] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:24:28.787 UTC [134] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:24:28.789 UTC [134] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:24:28.789 UTC [134] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:24:28.789 UTC [134] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:24:28.790 UTC [134] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:24:28.790 UTC [134] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:24:28.790 UTC [134] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:24:28.791 UTC [134] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:24:28.792 UTC [134] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:24:28.792 UTC [134] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:24:28.792 UTC [134] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:24:28.794 UTC [134] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:24:28.794 UTC [134] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:24:28.794 UTC [134] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:24:28.797 UTC [134] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:24:28.798 UTC [134] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:24:28.799 UTC [134] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:24:28.799 UTC [134] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:24:28.801 UTC [134] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:24:28.806 UTC [134] DEBUG:  building index "pg_toast_18251_index" on table "pg_toast_18251" serially
2025-04-19 07:24:28.808 UTC [134] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:24:28.808 UTC [134] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:24:28.808 UTC [134] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:24:28.810 UTC [134] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:24:28.812 UTC [134] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:24:28.813 UTC [134] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:24:28.813 UTC [134] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:24:28.818 UTC [134] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:24:28.822 UTC [134] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:24:28.823 UTC [134] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:24:28.832 UTC [134] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:24:28.837 UTC [134] DEBUG:  building index "pg_toast_18284_index" on table "pg_toast_18284" serially
2025-04-19 07:24:28.838 UTC [134] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:24:28.839 UTC [134] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:24:28.839 UTC [134] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:24:28.841 UTC [134] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:24:28.843 UTC [134] DEBUG:  building index "pg_toast_18295_index" on table "pg_toast_18295" serially
2025-04-19 07:24:28.845 UTC [134] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:24:28.846 UTC [134] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:24:28.846 UTC [134] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:24:28.849 UTC [134] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:24:28.851 UTC [134] DEBUG:  building index "pg_toast_18318_index" on table "pg_toast_18318" serially
2025-04-19 07:24:28.854 UTC [134] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:24:28.855 UTC [134] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:24:28.855 UTC [134] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:24:28.857 UTC [134] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:24:28.857 UTC [134] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:24:28.859 UTC [134] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:24:28.859 UTC [134] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:24:28.860 UTC [134] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:24:28.860 UTC [134] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:24:28.863 UTC [134] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:24:28.863 UTC [134] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:24:28.866 UTC [134] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:24:28.866 UTC [134] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:24:28.868 UTC [134] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:24:28.868 UTC [134] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:24:28.869 UTC [134] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:24:28.869 UTC [134] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:24:28.872 UTC [134] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:24:28.872 UTC [134] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:24:28.875 UTC [134] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:24:28.875 UTC [134] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:24:28.878 UTC [134] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:24:28.878 UTC [134] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:24:28.879 UTC [134] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:24:28.879 UTC [134] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:24:28.893 UTC [134] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:24:29.352 UTC [134] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$kKsuuQtU0CPFtD11b9X6q.VLowW9hnmu9nR4ejm33sPgeNXLSQmpG')
	                RETURNING id, username, email
	                
2025-04-19 07:24:29.369 UTC [134] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:24:29.372 UTC [134] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:24:33.694 UTC [134] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 07:24:34.002 UTC [134] LOG:  statement: 
	        SELECT * FROM draws 
	        ORDER BY draw_number DESC 
	        LIMIT 20 OFFSET 0
	        
2025-04-19 07:24:37.507 UTC [134] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 07:24:37.804 UTC [134] DEBUG:  unexpected EOF on client connection
2025-04-19 07:24:40.099 UTC [142] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:24:40.106 UTC [142] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:24:40.115 UTC [142] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:24:40.115 UTC [142] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:24:40.120 UTC [142] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:24:40.124 UTC [142] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:24:40.126 UTC [142] DEBUG:  building index "pg_toast_18354_index" on table "pg_toast_18354" serially
2025-04-19 07:24:40.128 UTC [142] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:24:40.129 UTC [142] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:24:40.129 UTC [142] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:24:40.129 UTC [142] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:24:40.130 UTC [142] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:24:40.130 UTC [142] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:24:40.131 UTC [142] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:24:40.131 UTC [142] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:24:40.131 UTC [142] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:24:40.131 UTC [142] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:24:40.132 UTC [142] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:24:40.132 UTC [142] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:24:40.132 UTC [142] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:24:40.133 UTC [142] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:24:40.133 UTC [142] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:24:40.133 UTC [142] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:24:40.134 UTC [142] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:24:40.135 UTC [142] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:24:40.135 UTC [142] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:24:40.135 UTC [142] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:24:40.136 UTC [142] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:24:40.136 UTC [142] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:24:40.136 UTC [142] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:24:40.137 UTC [142] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:24:40.138 UTC [142] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:24:40.139 UTC [142] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:24:40.139 UTC [142] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:24:40.140 UTC [142] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:24:40.142 UTC [142] DEBUG:  building index "pg_toast_18415_index" on table "pg_toast_18415" serially
2025-04-19 07:24:40.142 UTC [142] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:24:40.143 UTC [142] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:24:40.143 UTC [142] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:24:40.144 UTC [142] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:24:40.145 UTC [142] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:24:40.145 UTC [142] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:24:40.145 UTC [142] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:24:40.145 UTC [142] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:24:40.146 UTC [142] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:24:40.146 UTC [142] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:24:40.147 UTC [142] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:24:40.148 UTC [142] DEBUG:  building index "pg_toast_18448_index" on table "pg_toast_18448" serially
2025-04-19 07:24:40.149 UTC [142] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:24:40.149 UTC [142] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:24:40.149 UTC [142] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:24:40.150 UTC [142] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:24:40.151 UTC [142] DEBUG:  building index "pg_toast_18459_index" on table "pg_toast_18459" serially
2025-04-19 07:24:40.152 UTC [142] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:24:40.152 UTC [142] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:24:40.152 UTC [142] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:24:40.155 UTC [142] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:24:40.156 UTC [142] DEBUG:  building index "pg_toast_18482_index" on table "pg_toast_18482" serially
2025-04-19 07:24:40.157 UTC [142] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:24:40.157 UTC [142] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:24:40.157 UTC [142] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:24:40.158 UTC [142] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:24:40.158 UTC [142] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:24:40.160 UTC [142] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:24:40.160 UTC [142] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:24:40.161 UTC [142] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:24:40.161 UTC [142] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:24:40.161 UTC [142] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:24:40.161 UTC [142] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:24:40.162 UTC [142] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:24:40.162 UTC [142] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:24:40.163 UTC [142] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:24:40.163 UTC [142] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:24:40.164 UTC [142] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:24:40.164 UTC [142] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:24:40.165 UTC [142] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:24:40.165 UTC [142] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:24:40.165 UTC [142] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:24:40.165 UTC [142] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:24:40.166 UTC [142] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:24:40.166 UTC [142] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:24:40.167 UTC [142] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:24:40.167 UTC [142] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:24:40.178 UTC [142] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:24:40.475 UTC [142] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$CW93da3pwdHEb3a7TmtozOQ1LwyXWT0XZPu8s1aSUWnkqAlzyW8z.')
	                RETURNING id, username, email
	                
2025-04-19 07:24:40.476 UTC [142] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:24:40.477 UTC [142] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:24:40.478 UTC [142] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 07:24:40.484 UTC [142] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:24:40.485 UTC [142] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:24:40.488 UTC [142] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:24:40.492 UTC [142] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:24:40.492 UTC [142] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:24:40.495 UTC [142] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:24:40.498 UTC [142] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:24:40.499 UTC [142] DEBUG:  building index "pg_toast_18518_index" on table "pg_toast_18518" serially
2025-04-19 07:24:40.500 UTC [142] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:24:40.500 UTC [142] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:24:40.500 UTC [142] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:24:40.501 UTC [142] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:24:40.501 UTC [142] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:24:40.501 UTC [142] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:24:40.502 UTC [142] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:24:40.502 UTC [142] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:24:40.502 UTC [142] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:24:40.503 UTC [142] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:24:40.504 UTC [142] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:24:40.504 UTC [142] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:24:40.504 UTC [142] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:24:40.505 UTC [142] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:24:40.505 UTC [142] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:24:40.505 UTC [142] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:24:40.506 UTC [142] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:24:40.506 UTC [142] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:24:40.507 UTC [142] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:24:40.507 UTC [142] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:24:40.507 UTC [142] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:24:40.507 UTC [142] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:24:40.507 UTC [142] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:24:40.509 UTC [142] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:24:40.510 UTC [142] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:24:40.510 UTC [142] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:24:40.510 UTC [142] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:24:40.513 UTC [142] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:24:40.514 UTC [142] DEBUG:  building index "pg_toast_18579_index" on table "pg_toast_18579" serially
2025-04-19 07:24:40.515 UTC [142] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:24:40.515 UTC [142] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:24:40.515 UTC [142] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:24:40.516 UTC [142] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:24:40.517 UTC [142] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:24:40.517 UTC [142] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:24:40.517 UTC [142] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:24:40.518 UTC [142] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:24:40.518 UTC [142] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:24:40.518 UTC [142] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:24:40.519 UTC [142] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:24:40.521 UTC [142] DEBUG:  building index "pg_toast_18612_index" on table "pg_toast_18612" serially
2025-04-19 07:24:40.521 UTC [142] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:24:40.521 UTC [142] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:24:40.522 UTC [142] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:24:40.522 UTC [142] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:24:40.523 UTC [142] DEBUG:  building index "pg_toast_18623_index" on table "pg_toast_18623" serially
2025-04-19 07:24:40.524 UTC [142] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:24:40.524 UTC [142] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:24:40.524 UTC [142] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:24:40.528 UTC [142] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:24:40.530 UTC [142] DEBUG:  building index "pg_toast_18646_index" on table "pg_toast_18646" serially
2025-04-19 07:24:40.533 UTC [142] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:24:40.533 UTC [142] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:24:40.533 UTC [142] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:24:40.536 UTC [142] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:24:40.536 UTC [142] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:24:40.538 UTC [142] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:24:40.538 UTC [142] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:24:40.541 UTC [142] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:24:40.541 UTC [142] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:24:40.542 UTC [142] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:24:40.542 UTC [142] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:24:40.544 UTC [142] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:24:40.544 UTC [142] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:24:40.547 UTC [142] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:24:40.547 UTC [142] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:24:40.549 UTC [142] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:24:40.549 UTC [142] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:24:40.550 UTC [142] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:24:40.550 UTC [142] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:24:40.552 UTC [142] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:24:40.552 UTC [142] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:24:40.553 UTC [142] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:24:40.553 UTC [142] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:24:40.553 UTC [142] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:24:40.553 UTC [142] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:24:40.561 UTC [142] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:24:40.817 UTC [142] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$vPPEfLEunjhsa9JKIbP6hexvQjhNtGZmhpoP.f3llG02ppD977ScW')
	                RETURNING id, username, email
	                
2025-04-19 07:24:40.818 UTC [142] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:24:40.818 UTC [142] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:24:50.296 UTC [150] DEBUG:  autovacuum: processing database "powerball"
2025-04-19 07:24:50.560 UTC [150] DEBUG:  rehashing catalog cache id 14 for pg_opclass; 17 tups, 8 buckets
2025-04-19 07:24:53.538 UTC [142] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 07:24:53.830 UTC [142] DEBUG:  unexpected EOF on client connection
2025-04-19 07:24:55.976 UTC [158] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:24:55.988 UTC [158] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:24:55.995 UTC [158] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:24:55.995 UTC [158] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:24:55.998 UTC [158] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:24:56.002 UTC [158] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:24:56.004 UTC [158] DEBUG:  building index "pg_toast_18683_index" on table "pg_toast_18683" serially
2025-04-19 07:24:56.006 UTC [158] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:24:56.006 UTC [158] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:24:56.006 UTC [158] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:24:56.008 UTC [158] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:24:56.008 UTC [158] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:24:56.008 UTC [158] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:24:56.009 UTC [158] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:24:56.009 UTC [158] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:24:56.009 UTC [158] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:24:56.010 UTC [158] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:24:56.011 UTC [158] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:24:56.011 UTC [158] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:24:56.011 UTC [158] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:24:56.012 UTC [158] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:24:56.012 UTC [158] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:24:56.012 UTC [158] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:24:56.013 UTC [158] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:24:56.015 UTC [158] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:24:56.015 UTC [158] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:24:56.015 UTC [158] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:24:56.016 UTC [158] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:24:56.016 UTC [158] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:24:56.016 UTC [158] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:24:56.018 UTC [158] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:24:56.019 UTC [158] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:24:56.019 UTC [158] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:24:56.019 UTC [158] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:24:56.021 UTC [158] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:24:56.023 UTC [158] DEBUG:  building index "pg_toast_18744_index" on table "pg_toast_18744" serially
2025-04-19 07:24:56.023 UTC [158] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:24:56.024 UTC [158] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:24:56.024 UTC [158] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:24:56.025 UTC [158] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:24:56.026 UTC [158] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:24:56.026 UTC [158] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:24:56.026 UTC [158] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:24:56.027 UTC [158] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:24:56.027 UTC [158] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:24:56.027 UTC [158] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:24:56.028 UTC [158] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:24:56.030 UTC [158] DEBUG:  building index "pg_toast_18777_index" on table "pg_toast_18777" serially
2025-04-19 07:24:56.030 UTC [158] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:24:56.031 UTC [158] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:24:56.031 UTC [158] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:24:56.031 UTC [158] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:24:56.032 UTC [158] DEBUG:  building index "pg_toast_18788_index" on table "pg_toast_18788" serially
2025-04-19 07:24:56.033 UTC [158] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:24:56.033 UTC [158] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:24:56.033 UTC [158] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:24:56.034 UTC [158] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:24:56.035 UTC [158] DEBUG:  building index "pg_toast_18811_index" on table "pg_toast_18811" serially
2025-04-19 07:24:56.036 UTC [158] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:24:56.036 UTC [158] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:24:56.036 UTC [158] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:24:56.037 UTC [158] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:24:56.037 UTC [158] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:24:56.038 UTC [158] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:24:56.038 UTC [158] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:24:56.039 UTC [158] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:24:56.039 UTC [158] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:24:56.040 UTC [158] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:24:56.040 UTC [158] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:24:56.041 UTC [158] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:24:56.041 UTC [158] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:24:56.042 UTC [158] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:24:56.042 UTC [158] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:24:56.043 UTC [158] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:24:56.043 UTC [158] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:24:56.044 UTC [158] DEBUG:  rehashing catalog cache id 32 for pg_index; 129 tups, 64 buckets
2025-04-19 07:24:56.044 UTC [158] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:24:56.044 UTC [158] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:24:56.045 UTC [158] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:24:56.045 UTC [158] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:24:56.046 UTC [158] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:24:56.046 UTC [158] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:24:56.046 UTC [158] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:24:56.046 UTC [158] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:24:56.060 UTC [158] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:24:56.327 UTC [158] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$akW2DnJaksLZ7qrWWBZo5udIz8IGoWJ2OI7Gt7olIT.vcV.S5eXRe')
	                RETURNING id, username, email
	                
2025-04-19 07:24:56.327 UTC [158] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:24:56.328 UTC [158] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:24:56.328 UTC [158] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 07:24:56.331 UTC [158] DEBUG:  rehashing catalog cache id 7 for pg_attribute; 257 tups, 128 buckets
2025-04-19 07:24:56.331 UTC [158] CONTEXT:  SQL expression "NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        )"
	PL/pgSQL function inline_code_block line 3 at IF
2025-04-19 07:24:56.341 UTC [158] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:24:56.343 UTC [158] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:24:56.345 UTC [158] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:24:56.349 UTC [158] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:24:56.349 UTC [158] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:24:56.352 UTC [158] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:24:56.355 UTC [158] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:24:56.357 UTC [158] DEBUG:  building index "pg_toast_18847_index" on table "pg_toast_18847" serially
2025-04-19 07:24:56.358 UTC [158] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:24:56.358 UTC [158] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:24:56.358 UTC [158] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:24:56.359 UTC [158] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:24:56.359 UTC [158] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:24:56.359 UTC [158] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:24:56.360 UTC [158] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:24:56.360 UTC [158] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:24:56.360 UTC [158] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:24:56.361 UTC [158] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:24:56.362 UTC [158] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:24:56.362 UTC [158] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:24:56.362 UTC [158] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:24:56.363 UTC [158] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:24:56.363 UTC [158] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:24:56.363 UTC [158] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:24:56.364 UTC [158] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:24:56.365 UTC [158] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:24:56.365 UTC [158] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:24:56.365 UTC [158] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:24:56.366 UTC [158] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:24:56.367 UTC [158] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:24:56.367 UTC [158] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:24:56.368 UTC [158] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:24:56.369 UTC [158] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:24:56.369 UTC [158] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:24:56.369 UTC [158] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:24:56.370 UTC [158] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:24:56.371 UTC [158] DEBUG:  building index "pg_toast_18908_index" on table "pg_toast_18908" serially
2025-04-19 07:24:56.372 UTC [158] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:24:56.372 UTC [158] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:24:56.372 UTC [158] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:24:56.373 UTC [158] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:24:56.374 UTC [158] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:24:56.374 UTC [158] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:24:56.374 UTC [158] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:24:56.375 UTC [158] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:24:56.375 UTC [158] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:24:56.375 UTC [158] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:24:56.376 UTC [158] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:24:56.377 UTC [158] DEBUG:  building index "pg_toast_18941_index" on table "pg_toast_18941" serially
2025-04-19 07:24:56.378 UTC [158] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:24:56.378 UTC [158] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:24:56.378 UTC [158] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:24:56.379 UTC [158] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:24:56.380 UTC [158] DEBUG:  building index "pg_toast_18952_index" on table "pg_toast_18952" serially
2025-04-19 07:24:56.381 UTC [158] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:24:56.381 UTC [158] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:24:56.381 UTC [158] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:24:56.383 UTC [158] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:24:56.383 UTC [158] DEBUG:  building index "pg_toast_18975_index" on table "pg_toast_18975" serially
2025-04-19 07:24:56.384 UTC [158] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:24:56.384 UTC [158] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:24:56.384 UTC [158] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:24:56.385 UTC [158] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:24:56.385 UTC [158] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:24:56.386 UTC [158] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:24:56.386 UTC [158] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:24:56.387 UTC [158] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:24:56.387 UTC [158] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:24:56.388 UTC [158] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:24:56.388 UTC [158] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:24:56.389 UTC [158] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:24:56.389 UTC [158] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:24:56.389 UTC [158] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:24:56.389 UTC [158] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:24:56.390 UTC [158] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:24:56.390 UTC [158] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:24:56.391 UTC [158] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:24:56.392 UTC [158] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:24:56.392 UTC [158] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:24:56.392 UTC [158] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:24:56.393 UTC [158] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:24:56.393 UTC [158] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:24:56.394 UTC [158] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:24:56.394 UTC [158] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:24:56.409 UTC [158] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:24:56.664 UTC [158] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$7daZQ9zpUheHYdG.WKSRKel4FNo1jkfcPUgyhw0sofYSQ.5Y/akbO')
	                RETURNING id, username, email
	                
2025-04-19 07:24:56.665 UTC [158] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:24:56.665 UTC [158] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:24:57.468 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:57.470 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 853
2025-04-19 07:24:57.471 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 853
2025-04-19 07:24:57.471 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (853, '2018-09-01', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:57.474 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (1,1,11,false),(1,2,54,false),(1,3,55,false),(1,4,61,false),(1,5,66,false),(1,6,9,true)
	        
2025-04-19 07:24:57.476 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 853
2025-04-19 07:24:57.482 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 853
2025-04-19 07:24:57.484 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:57.485 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 854
2025-04-19 07:24:57.486 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 854
2025-04-19 07:24:57.486 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (854, '2018-09-15', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:57.487 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (2,1,2,false),(2,2,18,false),(2,3,19,false),(2,4,24,false),(2,5,34,false),(2,6,3,true)
	        
2025-04-19 07:24:57.487 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 854
2025-04-19 07:24:57.491 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 854
2025-04-19 07:24:57.496 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:57.496 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 855
2025-04-19 07:24:57.497 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 855
2025-04-19 07:24:57.498 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (855, '2018-09-19', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:57.498 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (3,1,4,false),(3,2,39,false),(3,3,48,false),(3,4,50,false),(3,5,51,false),(3,6,11,true)
	        
2025-04-19 07:24:57.499 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 855
2025-04-19 07:24:57.505 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 855
2025-04-19 07:24:57.508 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:57.509 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 856
2025-04-19 07:24:57.509 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 856
2025-04-19 07:24:57.510 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (856, '2018-09-26', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:57.510 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (4,1,1,false),(4,2,2,false),(4,3,7,false),(4,4,30,false),(4,5,50,false),(4,6,8,true)
	        
2025-04-19 07:24:57.511 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 856
2025-04-19 07:24:57.515 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 856
2025-04-19 07:24:57.520 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:57.521 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 857
2025-04-19 07:24:57.521 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 857
2025-04-19 07:24:57.522 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (857, '2018-10-03', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:57.522 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (5,1,41,false),(5,2,53,false),(5,3,59,false),(5,4,63,false),(5,5,66,false),(5,6,3,true)
	        
2025-04-19 07:24:57.522 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 857
2025-04-19 07:24:57.526 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 857
2025-04-19 07:24:57.528 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:57.529 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 858
2025-04-19 07:24:57.529 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 858
2025-04-19 07:24:57.529 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (858, '2018-10-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:57.530 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (6,1,8,false),(6,2,23,false),(6,3,27,false),(6,4,42,false),(6,5,60,false),(6,6,7,true)
	        
2025-04-19 07:24:57.530 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 858
2025-04-19 07:24:57.533 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 858
2025-04-19 07:24:57.536 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:57.537 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 859
2025-04-19 07:24:57.537 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 859
2025-04-19 07:24:57.538 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (859, '2018-10-27', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:57.539 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (7,1,8,false),(7,2,12,false),(7,3,13,false),(7,4,19,false),(7,5,27,false),(7,6,4,true)
	        
2025-04-19 07:24:57.539 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 859
2025-04-19 07:24:57.544 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 859
2025-04-19 07:24:57.546 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:57.547 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 860
2025-04-19 07:24:57.547 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 860
2025-04-19 07:24:57.547 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (860, '2018-11-03', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:57.548 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (8,1,15,false),(8,2,21,false),(8,3,24,false),(8,4,32,false),(8,5,65,false),(8,6,11,true)
	        
2025-04-19 07:24:57.548 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 860
2025-04-19 07:24:57.551 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 860
2025-04-19 07:24:57.554 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:57.554 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 861
2025-04-19 07:24:57.554 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 861
2025-04-19 07:24:57.555 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (861, '2018-11-17', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:57.555 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (9,1,6,false),(9,2,8,false),(9,3,20,false),(9,4,52,false),(9,5,68,false),(9,6,5,true)
	        
2025-04-19 07:24:57.556 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 861
2025-04-19 07:24:57.558 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 861
2025-04-19 07:24:57.560 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:57.561 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 862
2025-04-19 07:24:57.561 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 862
2025-04-19 07:24:57.561 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (862, '2018-12-05', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:57.562 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (10,1,9,false),(10,2,11,false),(10,3,36,false),(10,4,37,false),(10,5,38,false),(10,6,11,true)
	        
2025-04-19 07:24:57.562 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 862
2025-04-19 07:24:57.565 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 862
2025-04-19 07:24:57.567 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:57.567 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 863
2025-04-19 07:24:57.568 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 863
2025-04-19 07:24:57.568 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (863, '2018-12-08', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:57.569 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (11,1,14,false),(11,2,32,false),(11,3,34,false),(11,4,46,false),(11,5,61,false),(11,6,10,true)
	        
2025-04-19 07:24:57.569 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 863
2025-04-19 07:24:57.572 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 863
2025-04-19 07:24:57.574 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:57.575 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 864
2025-04-19 07:24:57.575 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 864
2025-04-19 07:24:57.575 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (864, '2019-01-16', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:57.576 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (12,1,14,false),(12,2,29,false),(12,3,31,false),(12,4,56,false),(12,5,61,false),(12,6,1,true)
	        
2025-04-19 07:24:57.576 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 864
2025-04-19 07:24:57.579 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 864
2025-04-19 07:24:57.581 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:57.581 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 865
2025-04-19 07:24:57.582 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 865
2025-04-19 07:24:57.582 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (865, '2019-01-26', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:57.582 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (13,1,8,false),(13,2,12,false),(13,3,20,false),(13,4,21,false),(13,5,32,false),(13,6,10,true)
	        
2025-04-19 07:24:57.583 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 865
2025-04-19 07:24:57.587 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 865
2025-04-19 07:24:57.589 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:57.589 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 866
2025-04-19 07:24:57.589 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 866
2025-04-19 07:24:57.590 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (866, '2019-01-30', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:57.590 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (14,1,2,false),(14,2,12,false),(14,3,16,false),(14,4,29,false),(14,5,54,false),(14,6,6,true)
	        
2025-04-19 07:24:57.591 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 866
2025-04-19 07:24:57.595 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 866
2025-04-19 07:24:57.597 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:57.597 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 867
2025-04-19 07:24:57.597 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 867
2025-04-19 07:24:57.598 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (867, '2019-02-16', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:57.598 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (15,1,29,false),(15,2,30,false),(15,3,41,false),(15,4,48,false),(15,5,64,false),(15,6,1,true)
	        
2025-04-19 07:24:57.599 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 867
2025-04-19 07:24:57.602 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 867
2025-04-19 07:24:57.605 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:57.606 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 868
2025-04-19 07:24:57.607 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 868
2025-04-19 07:24:57.607 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (868, '2019-02-20', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:57.608 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (16,1,27,false),(16,2,49,false),(16,3,50,false),(16,4,51,false),(16,5,52,false),(16,6,2,true)
	        
2025-04-19 07:24:57.608 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 868
2025-04-19 07:24:57.612 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 868
2025-04-19 07:24:57.616 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:57.616 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 869
2025-04-19 07:24:57.617 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 869
2025-04-19 07:24:57.618 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (869, '2019-03-16', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:57.619 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (17,1,30,false),(17,2,34,false),(17,3,39,false),(17,4,53,false),(17,5,67,false),(17,6,11,true)
	        
2025-04-19 07:24:57.620 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 869
2025-04-19 07:24:57.631 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 869
2025-04-19 07:24:57.641 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:57.641 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 870
2025-04-19 07:24:57.642 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 870
2025-04-19 07:24:57.642 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (870, '2019-03-23', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:57.643 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (18,1,24,false),(18,2,25,false),(18,3,52,false),(18,4,60,false),(18,5,66,false),(18,6,5,true)
	        
2025-04-19 07:24:57.643 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 870
2025-04-19 07:24:57.647 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 870
2025-04-19 07:24:57.653 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:57.655 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 871
2025-04-19 07:24:57.655 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 871
2025-04-19 07:24:57.656 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (871, '2019-03-30', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:57.657 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (19,1,21,false),(19,2,52,false),(19,3,54,false),(19,4,64,false),(19,5,68,false),(19,6,4,true)
	        
2025-04-19 07:24:57.658 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 871
2025-04-19 07:24:57.664 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 871
2025-04-19 07:24:57.668 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:57.669 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 872
2025-04-19 07:24:57.669 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 872
2025-04-19 07:24:57.670 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (872, '2019-04-06', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:57.670 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (20,1,15,false),(20,2,33,false),(20,3,43,false),(20,4,59,false),(20,5,60,false),(20,6,8,true)
	        
2025-04-19 07:24:57.671 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 872
2025-04-19 07:24:57.674 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 872
2025-04-19 07:24:57.676 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:57.677 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 873
2025-04-19 07:24:57.677 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 873
2025-04-19 07:24:57.677 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (873, '2019-04-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:57.678 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (21,1,12,false),(21,2,21,false),(21,3,23,false),(21,4,39,false),(21,5,67,false),(21,6,6,true)
	        
2025-04-19 07:24:57.678 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 873
2025-04-19 07:24:57.681 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 873
2025-04-19 07:24:57.685 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:57.686 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 874
2025-04-19 07:24:57.687 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 874
2025-04-19 07:24:57.687 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (874, '2019-04-13', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:57.689 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (22,1,4,false),(22,2,17,false),(22,3,26,false),(22,4,32,false),(22,5,49,false),(22,6,10,true)
	        
2025-04-19 07:24:57.690 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 874
2025-04-19 07:24:57.694 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 874
2025-04-19 07:24:57.696 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:57.697 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 875
2025-04-19 07:24:57.697 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 875
2025-04-19 07:24:57.697 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (875, '2019-04-20', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:57.698 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (23,1,3,false),(23,2,27,false),(23,3,30,false),(23,4,63,false),(23,5,65,false),(23,6,1,true)
	        
2025-04-19 07:24:57.698 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 875
2025-04-19 07:24:57.701 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 875
2025-04-19 07:24:57.704 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:57.704 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 876
2025-04-19 07:24:57.704 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 876
2025-04-19 07:24:57.705 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (876, '2019-04-24', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:57.705 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (24,1,6,false),(24,2,32,false),(24,3,35,false),(24,4,36,false),(24,5,65,false),(24,6,4,true)
	        
2025-04-19 07:24:57.706 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 876
2025-04-19 07:24:57.709 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 876
2025-04-19 07:24:57.711 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:57.711 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 877
2025-04-19 07:24:57.711 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 877
2025-04-19 07:24:57.712 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (877, '2019-04-27', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:57.712 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (25,1,2,false),(25,2,29,false),(25,3,41,false),(25,4,45,false),(25,5,62,false),(25,6,6,true)
	        
2025-04-19 07:24:57.712 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 877
2025-04-19 07:24:57.716 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 877
2025-04-19 07:24:57.719 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:57.720 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 878
2025-04-19 07:24:57.721 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 878
2025-04-19 07:24:57.721 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (878, '2019-05-04', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:57.722 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (26,1,6,false),(26,2,16,false),(26,3,23,false),(26,4,30,false),(26,5,61,false),(26,6,2,true)
	        
2025-04-19 07:24:57.722 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 878
2025-04-19 07:24:57.725 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 878
2025-04-19 07:24:57.727 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:57.727 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 879
2025-04-19 07:24:57.728 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 879
2025-04-19 07:24:57.728 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (879, '2019-05-08', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:57.728 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (27,1,1,false),(27,2,45,false),(27,3,53,false),(27,4,64,false),(27,5,66,false),(27,6,3,true)
	        
2025-04-19 07:24:57.729 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 879
2025-04-19 07:24:57.732 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 879
2025-04-19 07:24:57.734 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:57.734 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 880
2025-04-19 07:24:57.735 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 880
2025-04-19 07:24:57.735 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (880, '2019-05-15', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:57.736 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (28,1,7,false),(28,2,17,false),(28,3,33,false),(28,4,61,false),(28,5,68,false),(28,6,4,true)
	        
2025-04-19 07:24:57.736 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 880
2025-04-19 07:24:57.739 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 880
2025-04-19 07:24:57.741 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:57.742 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 881
2025-04-19 07:24:57.742 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 881
2025-04-19 07:24:57.742 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (881, '2019-05-22', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:57.742 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (29,1,7,false),(29,2,10,false),(29,3,20,false),(29,4,44,false),(29,5,57,false),(29,6,3,true)
	        
2025-04-19 07:24:57.743 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 881
2025-04-19 07:24:57.746 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 881
2025-04-19 07:24:57.748 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:57.748 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 882
2025-04-19 07:24:57.748 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 882
2025-04-19 07:24:57.748 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (882, '2019-05-25', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:57.749 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (30,1,1,false),(30,2,2,false),(30,3,39,false),(30,4,43,false),(30,5,66,false),(30,6,2,true)
	        
2025-04-19 07:24:57.749 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 882
2025-04-19 07:24:57.753 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 882
2025-04-19 07:24:57.755 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:57.756 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 883
2025-04-19 07:24:57.756 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 883
2025-04-19 07:24:57.756 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (883, '2019-05-29', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:57.757 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (31,1,3,false),(31,2,32,false),(31,3,34,false),(31,4,42,false),(31,5,61,false),(31,6,7,true)
	        
2025-04-19 07:24:57.757 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 883
2025-04-19 07:24:57.759 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 883
2025-04-19 07:24:57.762 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:57.762 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 884
2025-04-19 07:24:57.762 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 884
2025-04-19 07:24:57.762 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (884, '2019-06-01', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:57.763 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (32,1,6,false),(32,2,15,false),(32,3,34,false),(32,4,45,false),(32,5,52,false),(32,6,8,true)
	        
2025-04-19 07:24:57.764 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 884
2025-04-19 07:24:57.767 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 884
2025-04-19 07:24:57.770 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:57.770 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 885
2025-04-19 07:24:57.770 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 885
2025-04-19 07:24:57.771 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (885, '2019-06-05', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:57.771 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (33,1,17,false),(33,2,23,false),(33,3,28,false),(33,4,34,false),(33,5,38,false),(33,6,8,true)
	        
2025-04-19 07:24:57.772 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 885
2025-04-19 07:24:57.774 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 885
2025-04-19 07:24:57.776 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:57.777 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 886
2025-04-19 07:24:57.777 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 886
2025-04-19 07:24:57.777 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (886, '2019-06-19', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:57.778 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (34,1,4,false),(34,2,18,false),(34,3,21,false),(34,4,26,false),(34,5,38,false),(34,6,1,true)
	        
2025-04-19 07:24:57.778 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 886
2025-04-19 07:24:57.781 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 886
2025-04-19 07:24:57.783 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:57.783 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 887
2025-04-19 07:24:57.784 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 887
2025-04-19 07:24:57.784 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (887, '2019-06-29', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:57.784 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (35,1,13,false),(35,2,17,false),(35,3,24,false),(35,4,59,false),(35,5,62,false),(35,6,8,true)
	        
2025-04-19 07:24:57.785 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 887
2025-04-19 07:24:57.789 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 887
2025-04-19 07:24:57.791 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:57.791 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 888
2025-04-19 07:24:57.791 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 888
2025-04-19 07:24:57.791 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (888, '2019-07-06', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:57.792 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (36,1,4,false),(36,2,8,false),(36,3,23,false),(36,4,46,false),(36,5,65,false),(36,6,1,true)
	        
2025-04-19 07:24:57.792 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 888
2025-04-19 07:24:57.795 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 888
2025-04-19 07:24:57.799 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:57.799 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 889
2025-04-19 07:24:57.800 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 889
2025-04-19 07:24:57.800 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (889, '2019-07-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:57.801 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (37,1,7,false),(37,2,9,false),(37,3,26,false),(37,4,44,false),(37,5,68,false),(37,6,3,true)
	        
2025-04-19 07:24:57.803 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 889
2025-04-19 07:24:57.806 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 889
2025-04-19 07:24:57.809 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:57.809 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 890
2025-04-19 07:24:57.810 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 890
2025-04-19 07:24:57.810 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (890, '2019-07-17', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:57.810 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (38,1,19,false),(38,2,43,false),(38,3,47,false),(38,4,60,false),(38,5,68,false),(38,6,10,true)
	        
2025-04-19 07:24:57.811 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 890
2025-04-19 07:24:57.815 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 890
2025-04-19 07:24:57.819 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:57.820 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 891
2025-04-19 07:24:57.820 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 891
2025-04-19 07:24:57.820 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (891, '2019-07-27', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:57.821 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (39,1,1,false),(39,2,19,false),(39,3,31,false),(39,4,48,false),(39,5,61,false),(39,6,6,true)
	        
2025-04-19 07:24:57.821 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 891
2025-04-19 07:24:57.825 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 891
2025-04-19 07:24:57.828 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:57.829 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 892
2025-04-19 07:24:57.829 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 892
2025-04-19 07:24:57.829 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (892, '2019-07-31', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:57.830 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (40,1,14,false),(40,2,37,false),(40,3,47,false),(40,4,55,false),(40,5,67,false),(40,6,6,true)
	        
2025-04-19 07:24:57.830 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 892
2025-04-19 07:24:57.835 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 892
2025-04-19 07:24:57.837 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:57.838 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 893
2025-04-19 07:24:57.838 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 893
2025-04-19 07:24:57.838 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (893, '2019-08-07', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:57.839 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (41,1,8,false),(41,2,32,false),(41,3,47,false),(41,4,53,false),(41,5,59,false),(41,6,3,true)
	        
2025-04-19 07:24:57.839 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 893
2025-04-19 07:24:57.842 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 893
2025-04-19 07:24:57.844 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:57.845 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 894
2025-04-19 07:24:57.845 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 894
2025-04-19 07:24:57.845 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (894, '2019-08-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:57.846 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (42,1,35,false),(42,2,41,false),(42,3,44,false),(42,4,58,false),(42,5,59,false),(42,6,3,true)
	        
2025-04-19 07:24:57.846 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 894
2025-04-19 07:24:57.848 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 894
2025-04-19 07:24:57.852 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:57.852 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 895
2025-04-19 07:24:57.853 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 895
2025-04-19 07:24:57.853 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (895, '2019-08-14', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:57.853 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (43,1,10,false),(43,2,13,false),(43,3,30,false),(43,4,51,false),(43,5,69,false),(43,6,10,true)
	        
2025-04-19 07:24:57.854 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 895
2025-04-19 07:24:57.856 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 895
2025-04-19 07:24:57.858 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:57.859 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 896
2025-04-19 07:24:57.859 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 896
2025-04-19 07:24:57.859 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (896, '2019-08-24', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:57.860 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (44,1,5,false),(44,2,12,false),(44,3,20,false),(44,4,21,false),(44,5,47,false),(44,6,1,true)
	        
2025-04-19 07:24:57.860 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 896
2025-04-19 07:24:57.863 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 896
2025-04-19 07:24:57.865 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:57.865 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 897
2025-04-19 07:24:57.865 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 897
2025-04-19 07:24:57.866 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (897, '2019-09-04', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:57.866 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (45,1,4,false),(45,2,8,false),(45,3,30,false),(45,4,52,false),(45,5,59,false),(45,6,2,true)
	        
2025-04-19 07:24:57.867 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 897
2025-04-19 07:24:57.870 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 897
2025-04-19 07:24:57.872 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:57.872 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 898
2025-04-19 07:24:57.872 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 898
2025-04-19 07:24:57.873 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (898, '2019-09-07', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:57.873 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (46,1,11,false),(46,2,20,false),(46,3,41,false),(46,4,42,false),(46,5,56,false),(46,6,6,true)
	        
2025-04-19 07:24:57.874 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 898
2025-04-19 07:24:57.876 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 898
2025-04-19 07:24:57.878 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:57.879 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 899
2025-04-19 07:24:57.879 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 899
2025-04-19 07:24:57.879 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (899, '2019-09-11', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:57.879 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (47,1,6,false),(47,2,17,false),(47,3,24,false),(47,4,53,false),(47,5,57,false),(47,6,3,true)
	        
2025-04-19 07:24:57.880 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 899
2025-04-19 07:24:57.885 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 899
2025-04-19 07:24:57.889 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:57.889 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 900
2025-04-19 07:24:57.889 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 900
2025-04-19 07:24:57.890 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (900, '2019-09-14', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:57.890 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (48,1,11,false),(48,2,27,false),(48,3,31,false),(48,4,36,false),(48,5,67,false),(48,6,11,true)
	        
2025-04-19 07:24:57.890 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 900
2025-04-19 07:24:57.893 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 900
2025-04-19 07:24:57.896 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:57.896 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 901
2025-04-19 07:24:57.896 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 901
2025-04-19 07:24:57.896 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (901, '2019-09-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:57.897 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (49,1,15,false),(49,2,23,false),(49,3,34,false),(49,4,51,false),(49,5,55,false),(49,6,4,true)
	        
2025-04-19 07:24:57.897 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 901
2025-04-19 07:24:57.900 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 901
2025-04-19 07:24:57.903 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:57.903 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 902
2025-04-19 07:24:57.904 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 902
2025-04-19 07:24:57.904 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (902, '2019-10-02', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:57.904 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (50,1,4,false),(50,2,8,false),(50,3,10,false),(50,4,43,false),(50,5,53,false),(50,6,7,true)
	        
2025-04-19 07:24:57.905 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 902
2025-04-19 07:24:57.907 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 902
2025-04-19 07:24:57.909 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:57.910 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 903
2025-04-19 07:24:57.910 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 903
2025-04-19 07:24:57.910 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (903, '2019-10-05', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:57.911 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (51,1,6,false),(51,2,14,false),(51,3,36,false),(51,4,51,false),(51,5,54,false),(51,6,4,true)
	        
2025-04-19 07:24:57.911 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 903
2025-04-19 07:24:57.913 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 903
2025-04-19 07:24:57.916 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:57.916 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 904
2025-04-19 07:24:57.916 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 904
2025-04-19 07:24:57.917 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (904, '2019-10-09', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:57.917 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (52,1,5,false),(52,2,18,false),(52,3,33,false),(52,4,43,false),(52,5,65,false),(52,6,2,true)
	        
2025-04-19 07:24:57.918 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 904
2025-04-19 07:24:57.922 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 904
2025-04-19 07:24:57.924 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:57.924 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 905
2025-04-19 07:24:57.925 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 905
2025-04-19 07:24:57.925 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (905, '2019-10-16', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:57.925 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (53,1,1,false),(53,2,5,false),(53,3,25,false),(53,4,63,false),(53,5,67,false),(53,6,3,true)
	        
2025-04-19 07:24:57.926 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 905
2025-04-19 07:24:57.928 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 905
2025-04-19 07:24:57.930 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:57.931 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 906
2025-04-19 07:24:57.931 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 906
2025-04-19 07:24:57.931 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (906, '2019-10-26', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:57.931 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (54,1,3,false),(54,2,20,false),(54,3,48,false),(54,4,54,false),(54,5,59,false),(54,6,4,true)
	        
2025-04-19 07:24:57.932 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 906
2025-04-19 07:24:57.935 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 906
2025-04-19 07:24:57.937 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:57.938 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 907
2025-04-19 07:24:57.938 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 907
2025-04-19 07:24:57.938 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (907, '2019-11-13', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:57.939 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (55,1,23,false),(55,2,26,false),(55,3,27,false),(55,4,28,false),(55,5,66,false),(55,6,11,true)
	        
2025-04-19 07:24:57.939 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 907
2025-04-19 07:24:57.942 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 907
2025-04-19 07:24:57.944 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:57.944 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 908
2025-04-19 07:24:57.944 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 908
2025-04-19 07:24:57.945 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (908, '2019-12-11', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:57.945 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (56,1,24,false),(56,2,29,false),(56,3,42,false),(56,4,44,false),(56,5,63,false),(56,6,10,true)
	        
2025-04-19 07:24:57.945 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 908
2025-04-19 07:24:57.948 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 908
2025-04-19 07:24:57.950 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:57.950 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 909
2025-04-19 07:24:57.950 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 909
2025-04-19 07:24:57.950 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (909, '2019-12-18', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:57.951 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (57,1,14,false),(57,2,18,false),(57,3,26,false),(57,4,39,false),(57,5,68,false),(57,6,9,true)
	        
2025-04-19 07:24:57.951 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 909
2025-04-19 07:24:57.954 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 909
2025-04-19 07:24:57.956 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:57.957 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 910
2025-04-19 07:24:57.957 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 910
2025-04-19 07:24:57.957 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (910, '2020-01-04', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:57.958 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (58,1,1,false),(58,2,11,false),(58,3,21,false),(58,4,25,false),(58,5,54,false),(58,6,7,true)
	        
2025-04-19 07:24:57.958 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 910
2025-04-19 07:24:57.961 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 910
2025-04-19 07:24:57.963 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:57.963 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 911
2025-04-19 07:24:57.964 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 911
2025-04-19 07:24:57.964 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (911, '2020-01-11', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:57.964 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (59,1,3,false),(59,2,21,false),(59,3,23,false),(59,4,31,false),(59,5,59,false),(59,6,3,true)
	        
2025-04-19 07:24:57.965 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 911
2025-04-19 07:24:57.968 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 911
2025-04-19 07:24:57.970 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:57.971 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 912
2025-04-19 07:24:57.971 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 912
2025-04-19 07:24:57.971 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (912, '2020-01-22', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:57.971 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (60,1,11,false),(60,2,33,false),(60,3,44,false),(60,4,59,false),(60,5,67,false),(60,6,8,true)
	        
2025-04-19 07:24:57.972 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 912
2025-04-19 07:24:57.976 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 912
2025-04-19 07:24:57.979 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:57.980 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 913
2025-04-19 07:24:57.980 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 913
2025-04-19 07:24:57.980 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (913, '2020-01-29', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:57.981 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (61,1,9,false),(61,2,12,false),(61,3,15,false),(61,4,31,false),(61,5,60,false),(61,6,2,true)
	        
2025-04-19 07:24:57.982 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 913
2025-04-19 07:24:57.986 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 913
2025-04-19 07:24:57.988 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:57.989 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 914
2025-04-19 07:24:57.989 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 914
2025-04-19 07:24:57.989 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (914, '2020-02-05', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:57.990 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (62,1,23,false),(62,2,30,false),(62,3,35,false),(62,4,41,false),(62,5,57,false),(62,6,2,true)
	        
2025-04-19 07:24:57.990 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 914
2025-04-19 07:24:57.993 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 914
2025-04-19 07:24:57.996 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:57.996 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 915
2025-04-19 07:24:57.996 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 915
2025-04-19 07:24:57.996 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (915, '2020-02-08', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:57.997 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (63,1,35,false),(63,2,49,false),(63,3,50,false),(63,4,59,false),(63,5,66,false),(63,6,6,true)
	        
2025-04-19 07:24:57.997 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 915
2025-04-19 07:24:58.000 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 915
2025-04-19 07:24:58.002 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:58.003 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 916
2025-04-19 07:24:58.003 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 916
2025-04-19 07:24:58.003 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (916, '2020-02-15', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:58.004 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (64,1,16,false),(64,2,32,false),(64,3,35,false),(64,4,36,false),(64,5,46,false),(64,6,3,true)
	        
2025-04-19 07:24:58.004 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 916
2025-04-19 07:24:58.007 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 916
2025-04-19 07:24:58.009 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:58.009 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 917
2025-04-19 07:24:58.009 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 917
2025-04-19 07:24:58.010 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (917, '2020-02-22', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:58.010 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (65,1,25,false),(65,2,37,false),(65,3,39,false),(65,4,61,false),(65,5,62,false),(65,6,11,true)
	        
2025-04-19 07:24:58.011 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 917
2025-04-19 07:24:58.013 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 917
2025-04-19 07:24:58.015 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:58.015 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 918
2025-04-19 07:24:58.016 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 918
2025-04-19 07:24:58.016 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (918, '2020-03-11', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:58.017 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (66,1,4,false),(66,2,29,false),(66,3,49,false),(66,4,50,false),(66,5,67,false),(66,6,2,true)
	        
2025-04-19 07:24:58.017 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 918
2025-04-19 07:24:58.020 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 918
2025-04-19 07:24:58.022 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:58.022 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 919
2025-04-19 07:24:58.023 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 919
2025-04-19 07:24:58.023 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (919, '2020-03-14', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:58.023 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (67,1,9,false),(67,2,23,false),(67,3,26,false),(67,4,30,false),(67,5,32,false),(67,6,8,true)
	        
2025-04-19 07:24:58.024 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 919
2025-04-19 07:24:58.026 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 919
2025-04-19 07:24:58.028 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:58.029 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 920
2025-04-19 07:24:58.029 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 920
2025-04-19 07:24:58.029 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (920, '2020-03-18', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:58.029 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (68,1,15,false),(68,2,27,false),(68,3,44,false),(68,4,59,false),(68,5,63,false),(68,6,8,true)
	        
2025-04-19 07:24:58.030 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 920
2025-04-19 07:24:58.034 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 920
2025-04-19 07:24:58.037 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:58.038 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 921
2025-04-19 07:24:58.038 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 921
2025-04-19 07:24:58.038 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (921, '2020-03-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:58.039 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (69,1,7,false),(69,2,40,false),(69,3,48,false),(69,4,55,false),(69,5,66,false),(69,6,11,true)
	        
2025-04-19 07:24:58.039 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 921
2025-04-19 07:24:58.042 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 921
2025-04-19 07:24:58.044 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:58.045 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 922
2025-04-19 07:24:58.045 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 922
2025-04-19 07:24:58.045 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (922, '2020-04-04', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:58.046 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (70,1,8,false),(70,2,31,false),(70,3,39,false),(70,4,40,false),(70,5,43,false),(70,6,4,true)
	        
2025-04-19 07:24:58.046 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 922
2025-04-19 07:24:58.049 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 922
2025-04-19 07:24:58.052 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:58.052 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 923
2025-04-19 07:24:58.052 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 923
2025-04-19 07:24:58.053 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (923, '2020-04-08', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:58.053 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (71,1,2,false),(71,2,37,false),(71,3,39,false),(71,4,48,false),(71,5,54,false),(71,6,5,true)
	        
2025-04-19 07:24:58.054 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 923
2025-04-19 07:24:58.058 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 923
2025-04-19 07:24:58.065 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:58.065 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 924
2025-04-19 07:24:58.066 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 924
2025-04-19 07:24:58.066 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (924, '2020-04-15', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:58.067 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (72,1,10,false),(72,2,12,false),(72,3,33,false),(72,4,36,false),(72,5,41,false),(72,6,2,true)
	        
2025-04-19 07:24:58.067 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 924
2025-04-19 07:24:58.071 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 924
2025-04-19 07:24:58.073 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:58.074 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 925
2025-04-19 07:24:58.074 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 925
2025-04-19 07:24:58.074 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (925, '2020-05-16', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:58.075 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (73,1,8,false),(73,2,12,false),(73,3,26,false),(73,4,39,false),(73,5,42,false),(73,6,11,true)
	        
2025-04-19 07:24:58.075 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 925
2025-04-19 07:24:58.079 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 925
2025-04-19 07:24:58.081 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:58.082 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 926
2025-04-19 07:24:58.082 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 926
2025-04-19 07:24:58.082 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (926, '2020-05-20', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:58.083 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (74,1,18,false),(74,2,34,false),(74,3,40,false),(74,4,42,false),(74,5,50,false),(74,6,9,true)
	        
2025-04-19 07:24:58.083 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 926
2025-04-19 07:24:58.088 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 926
2025-04-19 07:24:58.090 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:58.091 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 927
2025-04-19 07:24:58.091 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 927
2025-04-19 07:24:58.091 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (927, '2020-06-13', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:58.092 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (75,1,2,false),(75,2,12,false),(75,3,32,false),(75,4,50,false),(75,5,65,false),(75,6,5,true)
	        
2025-04-19 07:24:58.092 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 927
2025-04-19 07:24:58.097 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 927
2025-04-19 07:24:58.099 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:58.100 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 928
2025-04-19 07:24:58.100 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 928
2025-04-19 07:24:58.101 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (928, '2020-06-17', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:58.101 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (76,1,7,false),(76,2,10,false),(76,3,63,false),(76,4,64,false),(76,5,68,false),(76,6,10,true)
	        
2025-04-19 07:24:58.102 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 928
2025-04-19 07:24:58.105 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 928
2025-04-19 07:24:58.107 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:58.108 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 929
2025-04-19 07:24:58.108 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 929
2025-04-19 07:24:58.108 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (929, '2020-06-20', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:58.109 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (77,1,10,false),(77,2,31,false),(77,3,41,false),(77,4,63,false),(77,5,67,false),(77,6,5,true)
	        
2025-04-19 07:24:58.109 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 929
2025-04-19 07:24:58.112 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 929
2025-04-19 07:24:58.115 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:58.115 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 930
2025-04-19 07:24:58.115 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 930
2025-04-19 07:24:58.115 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (930, '2020-06-27', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:58.116 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (78,1,9,false),(78,2,36,false),(78,3,49,false),(78,4,56,false),(78,5,62,false),(78,6,8,true)
	        
2025-04-19 07:24:58.116 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 930
2025-04-19 07:24:58.120 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 930
2025-04-19 07:24:58.122 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:58.122 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 931
2025-04-19 07:24:58.123 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 931
2025-04-19 07:24:58.123 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (931, '2020-07-04', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:58.123 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (79,1,16,false),(79,2,21,false),(79,3,27,false),(79,4,60,false),(79,5,61,false),(79,6,6,true)
	        
2025-04-19 07:24:58.124 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 931
2025-04-19 07:24:58.126 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 931
2025-04-19 07:24:58.129 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:58.129 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 932
2025-04-19 07:24:58.129 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 932
2025-04-19 07:24:58.130 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (932, '2020-07-08', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:58.130 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (80,1,3,false),(80,2,10,false),(80,3,34,false),(80,4,36,false),(80,5,62,false),(80,6,5,true)
	        
2025-04-19 07:24:58.131 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 932
2025-04-19 07:24:58.134 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 932
2025-04-19 07:24:58.136 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:58.137 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 933
2025-04-19 07:24:58.137 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 933
2025-04-19 07:24:58.137 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (933, '2020-07-11', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:58.137 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (81,1,14,false),(81,2,19,false),(81,3,61,false),(81,4,62,false),(81,5,64,false),(81,6,4,true)
	        
2025-04-19 07:24:58.138 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 933
2025-04-19 07:24:58.140 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 933
2025-04-19 07:24:58.142 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:58.143 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 934
2025-04-19 07:24:58.143 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 934
2025-04-19 07:24:58.143 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (934, '2020-07-15', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:58.143 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (82,1,27,false),(82,2,47,false),(82,3,61,false),(82,4,62,false),(82,5,69,false),(82,6,4,true)
	        
2025-04-19 07:24:58.144 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 934
2025-04-19 07:24:58.146 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 934
2025-04-19 07:24:58.148 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:58.148 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 935
2025-04-19 07:24:58.148 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 935
2025-04-19 07:24:58.149 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (935, '2020-07-18', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:58.149 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (83,1,13,false),(83,2,16,false),(83,3,32,false),(83,4,58,false),(83,5,59,false),(83,6,9,true)
	        
2025-04-19 07:24:58.150 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 935
2025-04-19 07:24:58.153 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 935
2025-04-19 07:24:58.155 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:58.155 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 936
2025-04-19 07:24:58.155 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 936
2025-04-19 07:24:58.155 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (936, '2020-08-15', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:58.156 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (84,1,5,false),(84,2,12,false),(84,3,34,false),(84,4,45,false),(84,5,56,false),(84,6,3,true)
	        
2025-04-19 07:24:58.156 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 936
2025-04-19 07:24:58.159 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 936
2025-04-19 07:24:58.161 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:58.161 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 937
2025-04-19 07:24:58.161 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 937
2025-04-19 07:24:58.161 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (937, '2020-08-26', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:58.162 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (85,1,8,false),(85,2,12,false),(85,3,19,false),(85,4,47,false),(85,5,58,false),(85,6,2,true)
	        
2025-04-19 07:24:58.163 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 937
2025-04-19 07:24:58.167 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 937
2025-04-19 07:24:58.170 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:58.171 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 938
2025-04-19 07:24:58.171 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 938
2025-04-19 07:24:58.171 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (938, '2020-08-29', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:58.172 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (86,1,5,false),(86,2,21,false),(86,3,22,false),(86,4,29,false),(86,5,43,false),(86,6,10,true)
	        
2025-04-19 07:24:58.173 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 938
2025-04-19 07:24:58.176 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 938
2025-04-19 07:24:58.179 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:58.179 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 939
2025-04-19 07:24:58.180 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 939
2025-04-19 07:24:58.180 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (939, '2020-09-05', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:58.180 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (87,1,15,false),(87,2,21,false),(87,3,22,false),(87,4,27,false),(87,5,47,false),(87,6,7,true)
	        
2025-04-19 07:24:58.181 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 939
2025-04-19 07:24:58.184 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 939
2025-04-19 07:24:58.186 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:58.187 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 940
2025-04-19 07:24:58.187 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 940
2025-04-19 07:24:58.187 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (940, '2020-09-12', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:58.188 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (88,1,16,false),(88,2,17,false),(88,3,20,false),(88,4,53,false),(88,5,67,false),(88,6,4,true)
	        
2025-04-19 07:24:58.188 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 940
2025-04-19 07:24:58.190 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 940
2025-04-19 07:24:58.192 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:58.193 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 941
2025-04-19 07:24:58.193 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 941
2025-04-19 07:24:58.193 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (941, '2020-09-16', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:58.194 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (89,1,10,false),(89,2,17,false),(89,3,31,false),(89,4,51,false),(89,5,53,false),(89,6,1,true)
	        
2025-04-19 07:24:58.195 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 941
2025-04-19 07:24:58.198 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 941
2025-04-19 07:24:58.200 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:58.200 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 942
2025-04-19 07:24:58.200 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 942
2025-04-19 07:24:58.201 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (942, '2020-09-23', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:58.201 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (90,1,8,false),(90,2,17,false),(90,3,49,false),(90,4,52,false),(90,5,59,false),(90,6,1,true)
	        
2025-04-19 07:24:58.202 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 942
2025-04-19 07:24:58.205 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 942
2025-04-19 07:24:58.207 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:58.207 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 943
2025-04-19 07:24:58.207 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 943
2025-04-19 07:24:58.208 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (943, '2020-10-14', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:58.208 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (91,1,21,false),(91,2,37,false),(91,3,52,false),(91,4,53,false),(91,5,58,false),(91,6,5,true)
	        
2025-04-19 07:24:58.208 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 943
2025-04-19 07:24:58.211 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 943
2025-04-19 07:24:58.213 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:58.213 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 944
2025-04-19 07:24:58.213 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 944
2025-04-19 07:24:58.214 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (944, '2020-10-24', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:58.214 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (92,1,18,false),(92,2,20,false),(92,3,27,false),(92,4,45,false),(92,5,65,false),(92,6,6,true)
	        
2025-04-19 07:24:58.215 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 944
2025-04-19 07:24:58.217 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 944
2025-04-19 07:24:58.220 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:58.220 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 945
2025-04-19 07:24:58.220 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 945
2025-04-19 07:24:58.221 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (945, '2020-11-18', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:58.221 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (93,1,4,false),(93,2,5,false),(93,3,17,false),(93,4,43,false),(93,5,52,false),(93,6,5,true)
	        
2025-04-19 07:24:58.222 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 945
2025-04-19 07:24:58.224 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 945
2025-04-19 07:24:58.227 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:58.227 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 946
2025-04-19 07:24:58.227 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 946
2025-04-19 07:24:58.227 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (946, '2020-11-21', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:58.228 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (94,1,51,false),(94,2,54,false),(94,3,57,false),(94,4,60,false),(94,5,69,false),(94,6,11,true)
	        
2025-04-19 07:24:58.229 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 946
2025-04-19 07:24:58.231 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 946
2025-04-19 07:24:58.233 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:58.233 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 947
2025-04-19 07:24:58.233 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 947
2025-04-19 07:24:58.234 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (947, '2020-12-02', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:58.234 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (95,1,28,false),(95,2,31,false),(95,3,40,false),(95,4,41,false),(95,5,46,false),(95,6,4,true)
	        
2025-04-19 07:24:58.235 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 947
2025-04-19 07:24:58.238 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 947
2025-04-19 07:24:58.240 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:58.240 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 948
2025-04-19 07:24:58.241 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 948
2025-04-19 07:24:58.241 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (948, '2020-12-05', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:58.242 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (96,1,3,false),(96,2,4,false),(96,3,6,false),(96,4,48,false),(96,5,53,false),(96,6,10,true)
	        
2025-04-19 07:24:58.242 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 948
2025-04-19 07:24:58.246 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 948
2025-04-19 07:24:58.248 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:58.249 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 949
2025-04-19 07:24:58.249 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 949
2025-04-19 07:24:58.249 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (949, '2020-12-09', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:58.250 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (97,1,11,false),(97,2,14,false),(97,3,31,false),(97,4,47,false),(97,5,48,false),(97,6,4,true)
	        
2025-04-19 07:24:58.251 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 949
2025-04-19 07:24:58.254 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 949
2025-04-19 07:24:58.257 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:58.258 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 950
2025-04-19 07:24:58.258 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 950
2025-04-19 07:24:58.259 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (950, '2020-12-16', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:58.259 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (98,1,4,false),(98,2,23,false),(98,3,37,false),(98,4,61,false),(98,5,67,false),(98,6,7,true)
	        
2025-04-19 07:24:58.260 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 950
2025-04-19 07:24:58.263 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 950
2025-04-19 07:24:58.266 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:58.267 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 951
2025-04-19 07:24:58.268 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 951
2025-04-19 07:24:58.268 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (951, '2020-12-23', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:58.272 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (99,1,6,false),(99,2,13,false),(99,3,38,false),(99,4,39,false),(99,5,53,false),(99,6,6,true)
	        
2025-04-19 07:24:58.275 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 951
2025-04-19 07:24:58.283 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 951
2025-04-19 07:24:58.294 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:58.296 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 952
2025-04-19 07:24:58.297 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 952
2025-04-19 07:24:58.298 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (952, '2021-01-02', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:58.309 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (100,1,3,false),(100,2,4,false),(100,3,11,false),(100,4,41,false),(100,5,67,false),(100,6,5,true)
	        
2025-04-19 07:24:58.312 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 952
2025-04-19 07:24:58.324 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 952
2025-04-19 07:24:58.331 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:58.333 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 953
2025-04-19 07:24:58.334 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 953
2025-04-19 07:24:58.335 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (953, '2021-01-06', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:58.337 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (101,1,1,false),(101,2,20,false),(101,3,22,false),(101,4,60,false),(101,5,66,false),(101,6,3,true)
	        
2025-04-19 07:24:58.340 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 953
2025-04-19 07:24:58.350 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 953
2025-04-19 07:24:58.355 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:58.355 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 954
2025-04-19 07:24:58.356 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 954
2025-04-19 07:24:58.356 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (954, '2021-01-16', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:58.358 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (102,1,14,false),(102,2,20,false),(102,3,39,false),(102,4,65,false),(102,5,67,false),(102,6,2,true)
	        
2025-04-19 07:24:58.360 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 954
2025-04-19 07:24:58.373 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 954
2025-04-19 07:24:58.377 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:58.378 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 955
2025-04-19 07:24:58.378 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 955
2025-04-19 07:24:58.378 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (955, '2021-01-27', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:58.379 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (103,1,17,false),(103,2,33,false),(103,3,35,false),(103,4,42,false),(103,5,52,false),(103,6,9,true)
	        
2025-04-19 07:24:58.380 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 955
2025-04-19 07:24:58.383 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 955
2025-04-19 07:24:58.387 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:58.388 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 956
2025-04-19 07:24:58.388 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 956
2025-04-19 07:24:58.388 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (956, '2021-01-30', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:58.389 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (104,1,1,false),(104,2,2,false),(104,3,7,false),(104,4,52,false),(104,5,61,false),(104,6,4,true)
	        
2025-04-19 07:24:58.389 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 956
2025-04-19 07:24:58.392 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 956
2025-04-19 07:24:58.394 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:58.394 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 957
2025-04-19 07:24:58.395 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 957
2025-04-19 07:24:58.395 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (957, '2021-02-03', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:58.395 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (105,1,5,false),(105,2,37,false),(105,3,40,false),(105,4,64,false),(105,5,66,false),(105,6,5,true)
	        
2025-04-19 07:24:58.396 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 957
2025-04-19 07:24:58.398 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 957
2025-04-19 07:24:58.400 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:58.401 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 958
2025-04-19 07:24:58.402 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 958
2025-04-19 07:24:58.402 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (958, '2021-02-06', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:58.402 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (106,1,1,false),(106,2,16,false),(106,3,48,false),(106,4,49,false),(106,5,65,false),(106,6,8,true)
	        
2025-04-19 07:24:58.403 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 958
2025-04-19 07:24:58.405 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 958
2025-04-19 07:24:58.407 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:58.408 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 959
2025-04-19 07:24:58.408 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 959
2025-04-19 07:24:58.408 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (959, '2021-02-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:58.408 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (107,1,15,false),(107,2,39,false),(107,3,58,false),(107,4,63,false),(107,5,67,false),(107,6,7,true)
	        
2025-04-19 07:24:58.409 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 959
2025-04-19 07:24:58.411 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 959
2025-04-19 07:24:58.413 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:58.414 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 960
2025-04-19 07:24:58.414 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 960
2025-04-19 07:24:58.414 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (960, '2021-02-17', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:58.415 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (108,1,1,false),(108,2,15,false),(108,3,21,false),(108,4,32,false),(108,5,46,false),(108,6,1,true)
	        
2025-04-19 07:24:58.415 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 960
2025-04-19 07:24:58.422 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 960
2025-04-19 07:24:58.426 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:58.427 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 961
2025-04-19 07:24:58.427 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 961
2025-04-19 07:24:58.427 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (961, '2021-02-20', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:58.428 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (109,1,4,false),(109,2,8,false),(109,3,22,false),(109,4,32,false),(109,5,58,false),(109,6,4,true)
	        
2025-04-19 07:24:58.429 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 961
2025-04-19 07:24:58.433 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 961
2025-04-19 07:24:58.438 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:58.438 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 962
2025-04-19 07:24:58.438 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 962
2025-04-19 07:24:58.439 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (962, '2021-03-13', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:58.439 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (110,1,5,false),(110,2,11,false),(110,3,51,false),(110,4,56,false),(110,5,61,false),(110,6,2,true)
	        
2025-04-19 07:24:58.439 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 962
2025-04-19 07:24:58.442 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 962
2025-04-19 07:24:58.444 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:58.445 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 963
2025-04-19 07:24:58.445 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 963
2025-04-19 07:24:58.445 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (963, '2021-03-20', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:58.446 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (111,1,1,false),(111,2,6,false),(111,3,22,false),(111,4,42,false),(111,5,61,false),(111,6,4,true)
	        
2025-04-19 07:24:58.446 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 963
2025-04-19 07:24:58.449 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 963
2025-04-19 07:24:58.451 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:58.451 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 964
2025-04-19 07:24:58.452 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 964
2025-04-19 07:24:58.452 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (964, '2021-03-27', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:58.452 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (112,1,6,false),(112,2,14,false),(112,3,38,false),(112,4,39,false),(112,5,65,false),(112,6,6,true)
	        
2025-04-19 07:24:58.453 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 964
2025-04-19 07:24:58.455 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 964
2025-04-19 07:24:58.458 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:58.459 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 965
2025-04-19 07:24:58.459 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 965
2025-04-19 07:24:58.459 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (965, '2021-04-03', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:58.460 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (113,1,1,false),(113,2,12,false),(113,3,17,false),(113,4,39,false),(113,5,53,false),(113,6,5,true)
	        
2025-04-19 07:24:58.460 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 965
2025-04-19 07:24:58.464 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 965
2025-04-19 07:24:58.469 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:58.469 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 966
2025-04-19 07:24:58.470 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 966
2025-04-19 07:24:58.470 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (966, '2021-04-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:58.470 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (114,1,14,false),(114,2,16,false),(114,3,23,false),(114,4,50,false),(114,5,53,false),(114,6,3,true)
	        
2025-04-19 07:24:58.471 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 966
2025-04-19 07:24:58.474 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 966
2025-04-19 07:24:58.477 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:58.477 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 967
2025-04-19 07:24:58.477 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 967
2025-04-19 07:24:58.477 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (967, '2021-04-21', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:58.478 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (115,1,21,false),(115,2,25,false),(115,3,32,false),(115,4,63,false),(115,5,67,false),(115,6,6,true)
	        
2025-04-19 07:24:58.478 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 967
2025-04-19 07:24:58.482 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 967
2025-04-19 07:24:58.484 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:58.485 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 968
2025-04-19 07:24:58.485 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 968
2025-04-19 07:24:58.486 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (968, '2021-05-01', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:58.486 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (116,1,35,false),(116,2,36,false),(116,3,47,false),(116,4,61,false),(116,5,63,false),(116,6,3,true)
	        
2025-04-19 07:24:58.486 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 968
2025-04-19 07:24:58.489 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 968
2025-04-19 07:24:58.491 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:58.491 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 969
2025-04-19 07:24:58.492 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 969
2025-04-19 07:24:58.492 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (969, '2021-05-05', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:58.492 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (117,1,16,false),(117,2,23,false),(117,3,28,false),(117,4,40,false),(117,5,63,false),(117,6,1,true)
	        
2025-04-19 07:24:58.493 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 969
2025-04-19 07:24:58.496 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 969
2025-04-19 07:24:58.498 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:58.498 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 970
2025-04-19 07:24:58.498 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 970
2025-04-19 07:24:58.499 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (970, '2021-05-08', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:58.499 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (118,1,12,false),(118,2,17,false),(118,3,20,false),(118,4,21,false),(118,5,26,false),(118,6,8,true)
	        
2025-04-19 07:24:58.500 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 970
2025-04-19 07:24:58.504 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 970
2025-04-19 07:24:58.506 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:58.506 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 971
2025-04-19 07:24:58.506 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 971
2025-04-19 07:24:58.506 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (971, '2021-05-19', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:58.507 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (119,1,11,false),(119,2,13,false),(119,3,55,false),(119,4,56,false),(119,5,69,false),(119,6,4,true)
	        
2025-04-19 07:24:58.508 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 971
2025-04-19 07:24:58.512 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 971
2025-04-19 07:24:58.518 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:58.519 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 972
2025-04-19 07:24:58.519 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 972
2025-04-19 07:24:58.519 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (972, '2021-05-22', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:58.520 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (120,1,3,false),(120,2,19,false),(120,3,27,false),(120,4,37,false),(120,5,40,false),(120,6,8,true)
	        
2025-04-19 07:24:58.521 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 972
2025-04-19 07:24:58.525 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 972
2025-04-19 07:24:58.528 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:58.529 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 973
2025-04-19 07:24:58.529 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 973
2025-04-19 07:24:58.529 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (973, '2021-06-09', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:58.530 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (121,1,19,false),(121,2,28,false),(121,3,46,false),(121,4,50,false),(121,5,54,false),(121,6,9,true)
	        
2025-04-19 07:24:58.531 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 973
2025-04-19 07:24:58.534 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 973
2025-04-19 07:24:58.537 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:58.537 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 974
2025-04-19 07:24:58.537 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 974
2025-04-19 07:24:58.538 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (974, '2021-06-12', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:58.538 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (122,1,8,false),(122,2,25,false),(122,3,34,false),(122,4,38,false),(122,5,41,false),(122,6,10,true)
	        
2025-04-19 07:24:58.539 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 974
2025-04-19 07:24:58.541 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 974
2025-04-19 07:24:58.543 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:58.543 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 975
2025-04-19 07:24:58.544 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 975
2025-04-19 07:24:58.544 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (975, '2021-06-23', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:58.545 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (123,1,13,false),(123,2,20,false),(123,3,40,false),(123,4,51,false),(123,5,63,false),(123,6,1,true)
	        
2025-04-19 07:24:58.545 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 975
2025-04-19 07:24:58.548 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 975
2025-04-19 07:24:58.550 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:58.550 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 976
2025-04-19 07:24:58.551 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 976
2025-04-19 07:24:58.551 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (976, '2021-07-07', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:58.552 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (124,1,8,false),(124,2,21,false),(124,3,30,false),(124,4,49,false),(124,5,57,false),(124,6,8,true)
	        
2025-04-19 07:24:58.552 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 976
2025-04-19 07:24:58.555 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 976
2025-04-19 07:24:58.557 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:58.557 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 977
2025-04-19 07:24:58.558 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 977
2025-04-19 07:24:58.558 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (977, '2021-07-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:58.558 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (125,1,1,false),(125,2,5,false),(125,3,29,false),(125,4,54,false),(125,5,62,false),(125,6,3,true)
	        
2025-04-19 07:24:58.559 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 977
2025-04-19 07:24:58.561 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 977
2025-04-19 07:24:58.563 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:58.564 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 978
2025-04-19 07:24:58.564 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 978
2025-04-19 07:24:58.564 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (978, '2021-07-14', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:58.564 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (126,1,33,false),(126,2,46,false),(126,3,52,false),(126,4,59,false),(126,5,62,false),(126,6,10,true)
	        
2025-04-19 07:24:58.565 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 978
2025-04-19 07:24:58.568 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 978
2025-04-19 07:24:58.570 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:58.571 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 979
2025-04-19 07:24:58.571 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 979
2025-04-19 07:24:58.571 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (979, '2021-07-17', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:58.571 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (127,1,15,false),(127,2,22,false),(127,3,38,false),(127,4,54,false),(127,5,66,false),(127,6,3,true)
	        
2025-04-19 07:24:58.572 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 979
2025-04-19 07:24:58.574 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 979
2025-04-19 07:24:58.576 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:58.577 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 980
2025-04-19 07:24:58.577 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 980
2025-04-19 07:24:58.577 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (980, '2021-07-21', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:58.578 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (128,1,27,false),(128,2,28,false),(128,3,44,false),(128,4,67,false),(128,5,68,false),(128,6,11,true)
	        
2025-04-19 07:24:58.579 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 980
2025-04-19 07:24:58.581 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 980
2025-04-19 07:24:58.584 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:58.584 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 981
2025-04-19 07:24:58.585 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 981
2025-04-19 07:24:58.585 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (981, '2021-07-24', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:58.585 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (129,1,1,false),(129,2,4,false),(129,3,11,false),(129,4,59,false),(129,5,67,false),(129,6,10,true)
	        
2025-04-19 07:24:58.586 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 981
2025-04-19 07:24:58.603 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 981
2025-04-19 07:24:58.614 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:58.615 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 982
2025-04-19 07:24:58.615 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 982
2025-04-19 07:24:58.615 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (982, '2021-07-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:58.616 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (130,1,25,false),(130,2,30,false),(130,3,53,false),(130,4,59,false),(130,5,60,false),(130,6,5,true)
	        
2025-04-19 07:24:58.617 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 982
2025-04-19 07:24:58.621 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 982
2025-04-19 07:24:58.624 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:58.624 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 983
2025-04-19 07:24:58.625 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 983
2025-04-19 07:24:58.625 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (983, '2021-07-31', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:58.625 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (131,1,1,false),(131,2,21,false),(131,3,22,false),(131,4,34,false),(131,5,47,false),(131,6,4,true)
	        
2025-04-19 07:24:58.626 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 983
2025-04-19 07:24:58.630 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 983
2025-04-19 07:24:58.632 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:58.633 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 984
2025-04-19 07:24:58.633 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 984
2025-04-19 07:24:58.633 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (984, '2021-08-21', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:58.634 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (132,1,16,false),(132,2,28,false),(132,3,36,false),(132,4,39,false),(132,5,59,false),(132,6,4,true)
	        
2025-04-19 07:24:58.635 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 984
2025-04-19 07:24:58.639 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 984
2025-04-19 07:24:58.642 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:58.642 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 985
2025-04-19 07:24:58.642 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 985
2025-04-19 07:24:58.642 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (985, '2021-08-30', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:58.643 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (133,1,3,false),(133,2,15,false),(133,3,45,false),(133,4,51,false),(133,5,61,false),(133,6,8,true)
	        
2025-04-19 07:24:58.644 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 985
2025-04-19 07:24:58.646 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 985
2025-04-19 07:24:58.649 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:58.649 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 986
2025-04-19 07:24:58.649 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 986
2025-04-19 07:24:58.649 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (986, '2021-09-04', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:58.650 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (134,1,32,false),(134,2,35,false),(134,3,40,false),(134,4,52,false),(134,5,54,false),(134,6,1,true)
	        
2025-04-19 07:24:58.650 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 986
2025-04-19 07:24:58.653 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 986
2025-04-19 07:24:58.655 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:58.656 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 987
2025-04-19 07:24:58.656 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 987
2025-04-19 07:24:58.656 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (987, '2021-09-18', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:58.657 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (135,1,5,false),(135,2,36,false),(135,3,39,false),(135,4,45,false),(135,5,57,false),(135,6,11,true)
	        
2025-04-19 07:24:58.657 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 987
2025-04-19 07:24:58.660 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 987
2025-04-19 07:24:58.662 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:58.662 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 988
2025-04-19 07:24:58.662 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 988
2025-04-19 07:24:58.663 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (988, '2021-09-22', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:58.663 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (136,1,20,false),(136,2,40,false),(136,3,47,false),(136,4,55,false),(136,5,63,false),(136,6,5,true)
	        
2025-04-19 07:24:58.664 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 988
2025-04-19 07:24:58.667 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 988
2025-04-19 07:24:58.670 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:58.670 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 989
2025-04-19 07:24:58.671 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 989
2025-04-19 07:24:58.671 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (989, '2021-09-29', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:58.672 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (137,1,2,false),(137,2,7,false),(137,3,11,false),(137,4,17,false),(137,5,32,false),(137,6,11,true)
	        
2025-04-19 07:24:58.673 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 989
2025-04-19 07:24:58.676 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 989
2025-04-19 07:24:58.678 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:58.679 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 990
2025-04-19 07:24:58.679 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 990
2025-04-19 07:24:58.679 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (990, '2021-10-02', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:58.679 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (138,1,28,false),(138,2,38,false),(138,3,42,false),(138,4,47,false),(138,5,52,false),(138,6,1,true)
	        
2025-04-19 07:24:58.680 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 990
2025-04-19 07:24:58.682 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 990
2025-04-19 07:24:58.685 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:58.686 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 991
2025-04-19 07:24:58.686 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 991
2025-04-19 07:24:58.686 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (991, '2021-10-06', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:58.687 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (139,1,1,false),(139,2,17,false),(139,3,52,false),(139,4,58,false),(139,5,64,false),(139,6,1,true)
	        
2025-04-19 07:24:58.687 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 991
2025-04-19 07:24:58.690 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 991
2025-04-19 07:24:58.693 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:58.693 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 992
2025-04-19 07:24:58.694 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 992
2025-04-19 07:24:58.694 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (992, '2021-10-09', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:58.694 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (140,1,12,false),(140,2,17,false),(140,3,30,false),(140,4,45,false),(140,5,62,false),(140,6,5,true)
	        
2025-04-19 07:24:58.695 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 992
2025-04-19 07:24:58.699 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 992
2025-04-19 07:24:58.703 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:58.703 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 993
2025-04-19 07:24:58.703 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 993
2025-04-19 07:24:58.703 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (993, '2021-10-16', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:58.704 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (141,1,30,false),(141,2,31,false),(141,3,41,false),(141,4,42,false),(141,5,48,false),(141,6,3,true)
	        
2025-04-19 07:24:58.704 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 993
2025-04-19 07:24:58.707 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 993
2025-04-19 07:24:58.709 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:58.710 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 994
2025-04-19 07:24:58.710 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 994
2025-04-19 07:24:58.710 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (994, '2021-10-20', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:58.711 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (142,1,7,false),(142,2,29,false),(142,3,36,false),(142,4,41,false),(142,5,43,false),(142,6,5,true)
	        
2025-04-19 07:24:58.711 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 994
2025-04-19 07:24:58.714 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 994
2025-04-19 07:24:58.716 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:58.716 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 995
2025-04-19 07:24:58.717 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 995
2025-04-19 07:24:58.717 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (995, '2021-11-01', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:58.717 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (143,1,9,false),(143,2,25,false),(143,3,34,false),(143,4,44,false),(143,5,45,false),(143,6,8,true)
	        
2025-04-19 07:24:58.718 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 995
2025-04-19 07:24:58.721 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 995
2025-04-19 07:24:58.722 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:58.723 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 996
2025-04-19 07:24:58.723 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 996
2025-04-19 07:24:58.723 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (996, '2021-11-06', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:58.724 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (144,1,8,false),(144,2,30,false),(144,3,48,false),(144,4,57,false),(144,5,64,false),(144,6,9,true)
	        
2025-04-19 07:24:58.724 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 996
2025-04-19 07:24:58.727 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 996
2025-04-19 07:24:58.729 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:58.729 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 997
2025-04-19 07:24:58.730 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 997
2025-04-19 07:24:58.730 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (997, '2021-11-08', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:58.730 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (145,1,21,false),(145,2,46,false),(145,3,47,false),(145,4,57,false),(145,5,62,false),(145,6,8,true)
	        
2025-04-19 07:24:58.731 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 997
2025-04-19 07:24:58.734 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 997
2025-04-19 07:24:58.738 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:58.738 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 998
2025-04-19 07:24:58.738 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 998
2025-04-19 07:24:58.739 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (998, '2021-11-13', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:58.741 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (146,1,8,false),(146,2,15,false),(146,3,26,false),(146,4,35,false),(146,5,45,false),(146,6,9,true)
	        
2025-04-19 07:24:58.742 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 998
2025-04-19 07:24:58.748 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 998
2025-04-19 07:24:58.754 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:58.755 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 999
2025-04-19 07:24:58.756 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 999
2025-04-19 07:24:58.756 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (999, '2021-11-17', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:58.757 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (147,1,3,false),(147,2,16,false),(147,3,48,false),(147,4,52,false),(147,5,60,false),(147,6,1,true)
	        
2025-04-19 07:24:58.758 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 999
2025-04-19 07:24:58.762 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 999
2025-04-19 07:24:58.766 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:58.767 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1000
2025-04-19 07:24:58.769 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1000
2025-04-19 07:24:58.770 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1000, '2021-11-27', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:58.771 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (148,1,8,false),(148,2,32,false),(148,3,55,false),(148,4,64,false),(148,5,66,false),(148,6,10,true)
	        
2025-04-19 07:24:58.772 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1000
2025-04-19 07:24:58.777 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1000
2025-04-19 07:24:58.781 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:58.782 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1001
2025-04-19 07:24:58.782 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1001
2025-04-19 07:24:58.783 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1001, '2021-12-04', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:58.784 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (149,1,10,false),(149,2,40,false),(149,3,45,false),(149,4,56,false),(149,5,67,false),(149,6,2,true)
	        
2025-04-19 07:24:58.785 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1001
2025-04-19 07:24:58.789 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1001
2025-04-19 07:24:58.792 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:58.793 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1002
2025-04-19 07:24:58.793 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1002
2025-04-19 07:24:58.793 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1002, '2021-12-06', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:58.794 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (150,1,3,false),(150,2,21,false),(150,3,38,false),(150,4,50,false),(150,5,59,false),(150,6,6,true)
	        
2025-04-19 07:24:58.795 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1002
2025-04-19 07:24:58.798 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1002
2025-04-19 07:24:58.804 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:58.805 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1003
2025-04-19 07:24:58.805 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1003
2025-04-19 07:24:58.806 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1003, '2021-12-11', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:58.806 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (151,1,3,false),(151,2,25,false),(151,3,44,false),(151,4,53,false),(151,5,64,false),(151,6,10,true)
	        
2025-04-19 07:24:58.807 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1003
2025-04-19 07:24:58.810 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1003
2025-04-19 07:24:58.813 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:58.813 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1004
2025-04-19 07:24:58.813 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1004
2025-04-19 07:24:58.814 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1004, '2021-12-13', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:58.814 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (152,1,10,false),(152,2,30,false),(152,3,37,false),(152,4,53,false),(152,5,59,false),(152,6,4,true)
	        
2025-04-19 07:24:58.814 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1004
2025-04-19 07:24:58.819 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1004
2025-04-19 07:24:58.824 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:58.825 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1005
2025-04-19 07:24:58.825 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1005
2025-04-19 07:24:58.825 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1005, '2021-12-18', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:58.826 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (153,1,2,false),(153,2,6,false),(153,3,24,false),(153,4,51,false),(153,5,61,false),(153,6,1,true)
	        
2025-04-19 07:24:58.828 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1005
2025-04-19 07:24:58.833 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1005
2025-04-19 07:24:58.838 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:58.839 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1006
2025-04-19 07:24:58.840 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1006
2025-04-19 07:24:58.840 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1006, '2021-12-20', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:58.841 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (154,1,2,false),(154,2,13,false),(154,3,23,false),(154,4,34,false),(154,5,66,false),(154,6,2,true)
	        
2025-04-19 07:24:58.842 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1006
2025-04-19 07:24:58.848 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1006
2025-04-19 07:24:58.854 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:58.855 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1007
2025-04-19 07:24:58.855 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1007
2025-04-19 07:24:58.856 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1007, '2021-12-25', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:58.857 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (155,1,27,false),(155,2,29,false),(155,3,45,false),(155,4,55,false),(155,5,58,false),(155,6,2,true)
	        
2025-04-19 07:24:58.858 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1007
2025-04-19 07:24:58.864 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1007
2025-04-19 07:24:58.870 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:58.870 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1008
2025-04-19 07:24:58.871 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1008
2025-04-19 07:24:58.871 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1008, '2021-12-29', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:58.872 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (156,1,2,false),(156,2,6,false),(156,3,9,false),(156,4,33,false),(156,5,39,false),(156,6,11,true)
	        
2025-04-19 07:24:58.873 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1008
2025-04-19 07:24:58.878 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1008
2025-04-19 07:24:58.881 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:58.882 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1009
2025-04-19 07:24:58.882 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1009
2025-04-19 07:24:58.883 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1009, '2022-01-01', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:58.884 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (157,1,6,false),(157,2,12,false),(157,3,39,false),(157,4,48,false),(157,5,50,false),(157,6,7,true)
	        
2025-04-19 07:24:58.886 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1009
2025-04-19 07:24:58.891 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1009
2025-04-19 07:24:58.894 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:58.895 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1010
2025-04-19 07:24:58.895 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1010
2025-04-19 07:24:58.895 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1010, '2022-01-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:58.897 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (158,1,14,false),(158,2,17,false),(158,3,18,false),(158,4,21,false),(158,5,27,false),(158,6,9,true)
	        
2025-04-19 07:24:58.898 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1010
2025-04-19 07:24:58.904 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1010
2025-04-19 07:24:58.907 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:58.908 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1011
2025-04-19 07:24:58.909 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1011
2025-04-19 07:24:58.909 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1011, '2022-01-19', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:58.909 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (159,1,11,false),(159,2,15,false),(159,3,43,false),(159,4,55,false),(159,5,61,false),(159,6,10,true)
	        
2025-04-19 07:24:58.910 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1011
2025-04-19 07:24:58.915 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1011
2025-04-19 07:24:58.920 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:58.921 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1012
2025-04-19 07:24:58.921 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1012
2025-04-19 07:24:58.921 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1012, '2022-01-29', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:58.923 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (160,1,2,false),(160,2,15,false),(160,3,38,false),(160,4,54,false),(160,5,65,false),(160,6,11,true)
	        
2025-04-19 07:24:58.924 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1012
2025-04-19 07:24:58.931 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1012
2025-04-19 07:24:58.934 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:58.935 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1013
2025-04-19 07:24:58.935 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1013
2025-04-19 07:24:58.935 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1013, '2022-02-07', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:58.936 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (161,1,5,false),(161,2,15,false),(161,3,38,false),(161,4,47,false),(161,5,65,false),(161,6,10,true)
	        
2025-04-19 07:24:58.936 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1013
2025-04-19 07:24:58.939 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1013
2025-04-19 07:24:58.942 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:58.942 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1014
2025-04-19 07:24:58.942 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1014
2025-04-19 07:24:58.942 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1014, '2022-02-12', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:58.943 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (162,1,8,false),(162,2,10,false),(162,3,21,false),(162,4,41,false),(162,5,62,false),(162,6,7,true)
	        
2025-04-19 07:24:58.944 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1014
2025-04-19 07:24:58.950 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1014
2025-04-19 07:24:58.955 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:58.955 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1015
2025-04-19 07:24:58.956 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1015
2025-04-19 07:24:58.956 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1015, '2022-02-19', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:58.957 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (163,1,3,false),(163,2,10,false),(163,3,15,false),(163,4,33,false),(163,5,42,false),(163,6,11,true)
	        
2025-04-19 07:24:58.958 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1015
2025-04-19 07:24:58.961 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1015
2025-04-19 07:24:58.964 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:58.965 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1016
2025-04-19 07:24:58.965 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1016
2025-04-19 07:24:58.966 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1016, '2022-02-21', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:58.966 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (164,1,2,false),(164,2,36,false),(164,3,37,false),(164,4,45,false),(164,5,69,false),(164,6,3,true)
	        
2025-04-19 07:24:58.967 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1016
2025-04-19 07:24:58.971 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1016
2025-04-19 07:24:58.975 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:58.975 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1017
2025-04-19 07:24:58.975 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1017
2025-04-19 07:24:58.976 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1017, '2022-03-07', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:58.976 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (165,1,10,false),(165,2,43,false),(165,3,55,false),(165,4,59,false),(165,5,67,false),(165,6,2,true)
	        
2025-04-19 07:24:58.977 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1017
2025-04-19 07:24:58.981 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1017
2025-04-19 07:24:58.983 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:58.984 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1018
2025-04-19 07:24:58.985 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1018
2025-04-19 07:24:58.985 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1018, '2022-03-09', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:58.985 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (166,1,13,false),(166,2,22,false),(166,3,34,false),(166,4,51,false),(166,5,67,false),(166,6,10,true)
	        
2025-04-19 07:24:58.986 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1018
2025-04-19 07:24:58.989 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1018
2025-04-19 07:24:58.991 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:58.992 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1019
2025-04-19 07:24:58.993 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1019
2025-04-19 07:24:58.993 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1019, '2022-03-12', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:58.994 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (167,1,19,false),(167,2,20,false),(167,3,37,false),(167,4,39,false),(167,5,61,false),(167,6,8,true)
	        
2025-04-19 07:24:58.996 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1019
2025-04-19 07:24:59.005 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1019
2025-04-19 07:24:59.009 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:59.010 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1020
2025-04-19 07:24:59.010 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1020
2025-04-19 07:24:59.011 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1020, '2022-03-14', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:59.011 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (168,1,21,false),(168,2,28,false),(168,3,32,false),(168,4,44,false),(168,5,49,false),(168,6,6,true)
	        
2025-04-19 07:24:59.012 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1020
2025-04-19 07:24:59.015 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1020
2025-04-19 07:24:59.019 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:59.020 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1021
2025-04-19 07:24:59.020 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1021
2025-04-19 07:24:59.021 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1021, '2022-03-19', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:59.021 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (169,1,8,false),(169,2,9,false),(169,3,18,false),(169,4,48,false),(169,5,52,false),(169,6,6,true)
	        
2025-04-19 07:24:59.022 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1021
2025-04-19 07:24:59.026 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1021
2025-04-19 07:24:59.029 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:59.030 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1022
2025-04-19 07:24:59.030 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1022
2025-04-19 07:24:59.031 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1022, '2022-03-26', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:59.031 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (170,1,2,false),(170,2,10,false),(170,3,50,false),(170,4,59,false),(170,5,61,false),(170,6,6,true)
	        
2025-04-19 07:24:59.032 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1022
2025-04-19 07:24:59.038 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1022
2025-04-19 07:24:59.054 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:59.059 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1023
2025-04-19 07:24:59.061 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1023
2025-04-19 07:24:59.062 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1023, '2022-03-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:59.063 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (171,1,11,false),(171,2,18,false),(171,3,39,false),(171,4,58,false),(171,5,62,false),(171,6,3,true)
	        
2025-04-19 07:24:59.065 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1023
2025-04-19 07:24:59.070 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1023
2025-04-19 07:24:59.072 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:59.073 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1024
2025-04-19 07:24:59.073 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1024
2025-04-19 07:24:59.073 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1024, '2022-03-30', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:59.074 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (172,1,3,false),(172,2,7,false),(172,3,21,false),(172,4,31,false),(172,5,37,false),(172,6,11,true)
	        
2025-04-19 07:24:59.074 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1024
2025-04-19 07:24:59.081 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1024
2025-04-19 07:24:59.087 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:59.088 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1025
2025-04-19 07:24:59.089 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1025
2025-04-19 07:24:59.089 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1025, '2022-04-04', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:59.090 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (173,1,2,false),(173,2,32,false),(173,3,39,false),(173,4,46,false),(173,5,69,false),(173,6,6,true)
	        
2025-04-19 07:24:59.090 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1025
2025-04-19 07:24:59.094 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1025
2025-04-19 07:24:59.097 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:59.098 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1026
2025-04-19 07:24:59.098 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1026
2025-04-19 07:24:59.099 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1026, '2022-04-11', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:59.099 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (174,1,5,false),(174,2,7,false),(174,3,24,false),(174,4,31,false),(174,5,34,false),(174,6,4,true)
	        
2025-04-19 07:24:59.100 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1026
2025-04-19 07:24:59.105 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1026
2025-04-19 07:24:59.108 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:59.109 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1027
2025-04-19 07:24:59.109 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1027
2025-04-19 07:24:59.110 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1027, '2022-04-23', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:59.110 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (175,1,10,false),(175,2,39,false),(175,3,47,false),(175,4,49,false),(175,5,56,false),(175,6,8,true)
	        
2025-04-19 07:24:59.111 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1027
2025-04-19 07:24:59.115 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1027
2025-04-19 07:24:59.121 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:59.122 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1028
2025-04-19 07:24:59.122 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1028
2025-04-19 07:24:59.123 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1028, '2022-04-25', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:59.126 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (176,1,12,false),(176,2,18,false),(176,3,20,false),(176,4,39,false),(176,5,61,false),(176,6,10,true)
	        
2025-04-19 07:24:59.127 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1028
2025-04-19 07:24:59.134 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1028
2025-04-19 07:24:59.141 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:59.142 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1029
2025-04-19 07:24:59.143 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1029
2025-04-19 07:24:59.143 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1029, '2022-04-27', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:59.144 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (177,1,11,false),(177,2,36,false),(177,3,61,false),(177,4,62,false),(177,5,68,false),(177,6,4,true)
	        
2025-04-19 07:24:59.144 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1029
2025-04-19 07:24:59.150 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1029
2025-04-19 07:24:59.154 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:59.154 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1030
2025-04-19 07:24:59.154 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1030
2025-04-19 07:24:59.155 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1030, '2022-04-30', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:59.155 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (178,1,14,false),(178,2,21,false),(178,3,37,false),(178,4,44,false),(178,5,63,false),(178,6,1,true)
	        
2025-04-19 07:24:59.157 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1030
2025-04-19 07:24:59.161 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1030
2025-04-19 07:24:59.164 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:59.164 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1031
2025-04-19 07:24:59.165 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1031
2025-04-19 07:24:59.165 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1031, '2022-05-02', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:59.166 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (179,1,18,false),(179,2,27,false),(179,3,33,false),(179,4,39,false),(179,5,44,false),(179,6,8,true)
	        
2025-04-19 07:24:59.167 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1031
2025-04-19 07:24:59.174 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1031
2025-04-19 07:24:59.178 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:59.178 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1032
2025-04-19 07:24:59.179 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1032
2025-04-19 07:24:59.179 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1032, '2022-05-07', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:59.179 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (180,1,4,false),(180,2,5,false),(180,3,6,false),(180,4,28,false),(180,5,67,false),(180,6,10,true)
	        
2025-04-19 07:24:59.180 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1032
2025-04-19 07:24:59.183 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1032
2025-04-19 07:24:59.193 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:59.194 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1033
2025-04-19 07:24:59.195 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1033
2025-04-19 07:24:59.195 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1033, '2022-05-09', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:59.196 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (181,1,18,false),(181,2,30,false),(181,3,35,false),(181,4,52,false),(181,5,56,false),(181,6,5,true)
	        
2025-04-19 07:24:59.197 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1033
2025-04-19 07:24:59.207 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1033
2025-04-19 07:24:59.211 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:59.212 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1034
2025-04-19 07:24:59.213 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1034
2025-04-19 07:24:59.213 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1034, '2022-05-14', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:59.213 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (182,1,6,false),(182,2,40,false),(182,3,41,false),(182,4,45,false),(182,5,52,false),(182,6,9,true)
	        
2025-04-19 07:24:59.214 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1034
2025-04-19 07:24:59.222 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1034
2025-04-19 07:24:59.230 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:59.232 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1035
2025-04-19 07:24:59.233 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1035
2025-04-19 07:24:59.234 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1035, '2022-05-21', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:59.236 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (183,1,14,false),(183,2,15,false),(183,3,25,false),(183,4,52,false),(183,5,58,false),(183,6,11,true)
	        
2025-04-19 07:24:59.237 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1035
2025-04-19 07:24:59.242 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1035
2025-04-19 07:24:59.245 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:59.246 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1036
2025-04-19 07:24:59.246 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1036
2025-04-19 07:24:59.246 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1036, '2022-06-01', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:59.248 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (184,1,11,false),(184,2,41,false),(184,3,56,false),(184,4,57,false),(184,5,63,false),(184,6,2,true)
	        
2025-04-19 07:24:59.251 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1036
2025-04-19 07:24:59.257 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1036
2025-04-19 07:24:59.261 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:59.262 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1037
2025-04-19 07:24:59.263 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1037
2025-04-19 07:24:59.263 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1037, '2022-06-06', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:59.264 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (185,1,2,false),(185,2,10,false),(185,3,35,false),(185,4,44,false),(185,5,46,false),(185,6,4,true)
	        
2025-04-19 07:24:59.265 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1037
2025-04-19 07:24:59.270 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1037
2025-04-19 07:24:59.272 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:59.273 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1038
2025-04-19 07:24:59.274 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1038
2025-04-19 07:24:59.274 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1038, '2022-06-08', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:59.275 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (186,1,22,false),(186,2,39,false),(186,3,43,false),(186,4,62,false),(186,5,64,false),(186,6,7,true)
	        
2025-04-19 07:24:59.275 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1038
2025-04-19 07:24:59.279 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1038
2025-04-19 07:24:59.281 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:59.282 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1039
2025-04-19 07:24:59.282 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1039
2025-04-19 07:24:59.282 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1039, '2022-06-11', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:59.283 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (187,1,18,false),(187,2,20,false),(187,3,26,false),(187,4,53,false),(187,5,69,false),(187,6,5,true)
	        
2025-04-19 07:24:59.284 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1039
2025-04-19 07:24:59.291 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1039
2025-04-19 07:24:59.294 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:59.294 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1040
2025-04-19 07:24:59.295 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1040
2025-04-19 07:24:59.295 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1040, '2022-06-15', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:59.295 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (188,1,19,false),(188,2,28,false),(188,3,41,false),(188,4,42,false),(188,5,51,false),(188,6,7,true)
	        
2025-04-19 07:24:59.296 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1040
2025-04-19 07:24:59.300 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1040
2025-04-19 07:24:59.303 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:59.304 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1041
2025-04-19 07:24:59.304 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1041
2025-04-19 07:24:59.304 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1041, '2022-06-25', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:59.305 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (189,1,6,false),(189,2,12,false),(189,3,20,false),(189,4,27,false),(189,5,32,false),(189,6,4,true)
	        
2025-04-19 07:24:59.306 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1041
2025-04-19 07:24:59.310 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1041
2025-04-19 07:24:59.314 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:59.315 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1042
2025-04-19 07:24:59.315 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1042
2025-04-19 07:24:59.315 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1042, '2022-07-04', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:59.317 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (190,1,15,false),(190,2,16,false),(190,3,24,false),(190,4,31,false),(190,5,56,false),(190,6,4,true)
	        
2025-04-19 07:24:59.318 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1042
2025-04-19 07:24:59.326 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1042
2025-04-19 07:24:59.329 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:59.329 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1043
2025-04-19 07:24:59.329 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1043
2025-04-19 07:24:59.329 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1043, '2022-07-11', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:59.330 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (191,1,4,false),(191,2,26,false),(191,3,34,false),(191,4,37,false),(191,5,52,false),(191,6,9,true)
	        
2025-04-19 07:24:59.330 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1043
2025-04-19 07:24:59.335 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1043
2025-04-19 07:24:59.340 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:59.340 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1044
2025-04-19 07:24:59.341 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1044
2025-04-19 07:24:59.341 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1044, '2022-07-13', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:59.342 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (192,1,22,false),(192,2,23,false),(192,3,36,false),(192,4,47,false),(192,5,63,false),(192,6,2,true)
	        
2025-04-19 07:24:59.342 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1044
2025-04-19 07:24:59.347 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1044
2025-04-19 07:24:59.351 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:59.352 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1045
2025-04-19 07:24:59.352 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1045
2025-04-19 07:24:59.353 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1045, '2022-07-18', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:59.353 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (193,1,14,false),(193,2,34,false),(193,3,36,false),(193,4,50,false),(193,5,58,false),(193,6,5,true)
	        
2025-04-19 07:24:59.354 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1045
2025-04-19 07:24:59.360 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1045
2025-04-19 07:24:59.364 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:59.366 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1046
2025-04-19 07:24:59.367 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1046
2025-04-19 07:24:59.368 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1046, '2022-07-25', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:59.371 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (194,1,25,false),(194,2,37,false),(194,3,38,false),(194,4,39,false),(194,5,65,false),(194,6,5,true)
	        
2025-04-19 07:24:59.375 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1046
2025-04-19 07:24:59.380 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1046
2025-04-19 07:24:59.386 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:59.387 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1047
2025-04-19 07:24:59.388 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1047
2025-04-19 07:24:59.388 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1047, '2022-08-03', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:59.389 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (195,1,9,false),(195,2,21,false),(195,3,56,false),(195,4,57,false),(195,5,66,false),(195,6,11,true)
	        
2025-04-19 07:24:59.390 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1047
2025-04-19 07:24:59.397 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1047
2025-04-19 07:24:59.406 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:59.407 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1048
2025-04-19 07:24:59.407 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1048
2025-04-19 07:24:59.407 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1048, '2022-08-06', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:59.408 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (196,1,8,false),(196,2,15,false),(196,3,46,false),(196,4,56,false),(196,5,68,false),(196,6,3,true)
	        
2025-04-19 07:24:59.409 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1048
2025-04-19 07:24:59.419 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1048
2025-04-19 07:24:59.423 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:59.424 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1049
2025-04-19 07:24:59.425 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1049
2025-04-19 07:24:59.425 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1049, '2022-08-13', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:59.426 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (197,1,19,false),(197,2,24,false),(197,3,35,false),(197,4,43,false),(197,5,62,false),(197,6,2,true)
	        
2025-04-19 07:24:59.427 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1049
2025-04-19 07:24:59.431 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1049
2025-04-19 07:24:59.438 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:59.439 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1050
2025-04-19 07:24:59.440 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1050
2025-04-19 07:24:59.440 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1050, '2022-08-15', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:59.441 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (198,1,20,false),(198,2,24,false),(198,3,47,false),(198,4,50,false),(198,5,63,false),(198,6,5,true)
	        
2025-04-19 07:24:59.441 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1050
2025-04-19 07:24:59.445 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1050
2025-04-19 07:24:59.448 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:59.448 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1051
2025-04-19 07:24:59.449 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1051
2025-04-19 07:24:59.449 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1051, '2022-08-20', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:59.449 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (199,1,5,false),(199,2,9,false),(199,3,11,false),(199,4,16,false),(199,5,66,false),(199,6,7,true)
	        
2025-04-19 07:24:59.450 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1051
2025-04-19 07:24:59.455 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1051
2025-04-19 07:24:59.458 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:59.459 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1052
2025-04-19 07:24:59.459 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1052
2025-04-19 07:24:59.460 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1052, '2022-08-22', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:59.460 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (200,1,12,false),(200,2,27,false),(200,3,34,false),(200,4,55,false),(200,5,67,false),(200,6,9,true)
	        
2025-04-19 07:24:59.461 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1052
2025-04-19 07:24:59.465 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1052
2025-04-19 07:24:59.470 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:59.471 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1053
2025-04-19 07:24:59.471 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1053
2025-04-19 07:24:59.472 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1053, '2022-08-31', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:59.473 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (201,1,7,false),(201,2,8,false),(201,3,19,false),(201,4,24,false),(201,5,28,false),(201,6,1,true)
	        
2025-04-19 07:24:59.474 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1053
2025-04-19 07:24:59.478 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1053
2025-04-19 07:24:59.481 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:59.482 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1054
2025-04-19 07:24:59.483 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1054
2025-04-19 07:24:59.483 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1054, '2022-09-03', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:59.485 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (202,1,18,false),(202,2,27,false),(202,3,49,false),(202,4,65,false),(202,5,69,false),(202,6,9,true)
	        
2025-04-19 07:24:59.486 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1054
2025-04-19 07:24:59.491 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1054
2025-04-19 07:24:59.494 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:59.495 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1055
2025-04-19 07:24:59.495 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1055
2025-04-19 07:24:59.495 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1055, '2022-09-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:59.496 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (203,1,38,false),(203,2,42,false),(203,3,56,false),(203,4,68,false),(203,5,69,false),(203,6,4,true)
	        
2025-04-19 07:24:59.496 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1055
2025-04-19 07:24:59.502 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1055
2025-04-19 07:24:59.505 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:59.505 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1056
2025-04-19 07:24:59.506 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1056
2025-04-19 07:24:59.506 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1056, '2022-09-17', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:59.507 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (204,1,5,false),(204,2,25,false),(204,3,36,false),(204,4,51,false),(204,5,61,false),(204,6,1,true)
	        
2025-04-19 07:24:59.507 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1056
2025-04-19 07:24:59.513 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1056
2025-04-19 07:24:59.518 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:59.519 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1057
2025-04-19 07:24:59.519 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1057
2025-04-19 07:24:59.520 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1057, '2022-09-19', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:59.521 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (205,1,7,false),(205,2,15,false),(205,3,36,false),(205,4,46,false),(205,5,67,false),(205,6,7,true)
	        
2025-04-19 07:24:59.522 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1057
2025-04-19 07:24:59.530 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1057
2025-04-19 07:24:59.536 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:59.536 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1058
2025-04-19 07:24:59.537 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1058
2025-04-19 07:24:59.538 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1058, '2022-09-21', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:59.539 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (206,1,6,false),(206,2,33,false),(206,3,34,false),(206,4,45,false),(206,5,54,false),(206,6,7,true)
	        
2025-04-19 07:24:59.540 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1058
2025-04-19 07:24:59.546 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1058
2025-04-19 07:24:59.549 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:59.550 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1059
2025-04-19 07:24:59.552 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1059
2025-04-19 07:24:59.552 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1059, '2022-09-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:59.553 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (207,1,6,false),(207,2,10,false),(207,3,24,false),(207,4,33,false),(207,5,67,false),(207,6,11,true)
	        
2025-04-19 07:24:59.553 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1059
2025-04-19 07:24:59.557 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1059
2025-04-19 07:24:59.562 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:59.563 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1060
2025-04-19 07:24:59.564 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1060
2025-04-19 07:24:59.565 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1060, '2022-10-05', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:59.566 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (208,1,26,false),(208,2,30,false),(208,3,33,false),(208,4,37,false),(208,5,62,false),(208,6,6,true)
	        
2025-04-19 07:24:59.567 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1060
2025-04-19 07:24:59.572 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1060
2025-04-19 07:24:59.576 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:59.576 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1061
2025-04-19 07:24:59.577 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1061
2025-04-19 07:24:59.577 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1061, '2022-10-08', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:59.578 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (209,1,13,false),(209,2,43,false),(209,3,53,false),(209,4,60,false),(209,5,68,false),(209,6,5,true)
	        
2025-04-19 07:24:59.579 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1061
2025-04-19 07:24:59.584 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1061
2025-04-19 07:24:59.588 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:59.589 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1062
2025-04-19 07:24:59.589 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1062
2025-04-19 07:24:59.590 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1062, '2022-10-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:59.591 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (210,1,3,false),(210,2,6,false),(210,3,11,false),(210,4,17,false),(210,5,22,false),(210,6,11,true)
	        
2025-04-19 07:24:59.592 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1062
2025-04-19 07:24:59.596 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1062
2025-04-19 07:24:59.599 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:59.599 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1063
2025-04-19 07:24:59.601 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1063
2025-04-19 07:24:59.601 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1063, '2022-10-12', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:59.602 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (211,1,14,false),(211,2,30,false),(211,3,41,false),(211,4,42,false),(211,5,59,false),(211,6,6,true)
	        
2025-04-19 07:24:59.602 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1063
2025-04-19 07:24:59.606 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1063
2025-04-19 07:24:59.609 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:59.610 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1064
2025-04-19 07:24:59.610 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1064
2025-04-19 07:24:59.610 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1064, '2022-10-19', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:59.611 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (212,1,6,false),(212,2,8,false),(212,3,15,false),(212,4,27,false),(212,5,42,false),(212,6,10,true)
	        
2025-04-19 07:24:59.612 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1064
2025-04-19 07:24:59.619 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1064
2025-04-19 07:24:59.624 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:59.625 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1065
2025-04-19 07:24:59.625 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1065
2025-04-19 07:24:59.626 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1065, '2022-11-07', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:59.627 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (213,1,10,false),(213,2,33,false),(213,3,41,false),(213,4,47,false),(213,5,56,false),(213,6,10,true)
	        
2025-04-19 07:24:59.629 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1065
2025-04-19 07:24:59.633 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1065
2025-04-19 07:24:59.638 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:59.639 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1066
2025-04-19 07:24:59.639 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1066
2025-04-19 07:24:59.639 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1066, '2022-11-09', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:59.640 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (214,1,7,false),(214,2,14,false),(214,3,24,false),(214,4,30,false),(214,5,56,false),(214,6,7,true)
	        
2025-04-19 07:24:59.641 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1066
2025-04-19 07:24:59.647 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1066
2025-04-19 07:24:59.650 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:59.652 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1067
2025-04-19 07:24:59.653 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1067
2025-04-19 07:24:59.654 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1067, '2022-11-12', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:59.654 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (215,1,16,false),(215,2,20,false),(215,3,44,false),(215,4,57,false),(215,5,58,false),(215,6,6,true)
	        
2025-04-19 07:24:59.655 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1067
2025-04-19 07:24:59.659 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1067
2025-04-19 07:24:59.662 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:59.662 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1068
2025-04-19 07:24:59.662 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1068
2025-04-19 07:24:59.663 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1068, '2022-11-16', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:59.663 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (216,1,28,false),(216,2,34,false),(216,3,51,false),(216,4,53,false),(216,5,56,false),(216,6,11,true)
	        
2025-04-19 07:24:59.664 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1068
2025-04-19 07:24:59.668 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1068
2025-04-19 07:24:59.670 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:59.670 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1069
2025-04-19 07:24:59.670 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1069
2025-04-19 07:24:59.671 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1069, '2022-11-19', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:59.671 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (217,1,7,false),(217,2,28,false),(217,3,62,false),(217,4,63,false),(217,5,64,false),(217,6,10,true)
	        
2025-04-19 07:24:59.671 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1069
2025-04-19 07:24:59.674 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1069
2025-04-19 07:24:59.676 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:59.677 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1070
2025-04-19 07:24:59.677 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1070
2025-04-19 07:24:59.677 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1070, '2022-11-21', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:59.678 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (218,1,1,false),(218,2,6,false),(218,3,40,false),(218,4,51,false),(218,5,67,false),(218,6,2,true)
	        
2025-04-19 07:24:59.678 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1070
2025-04-19 07:24:59.682 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1070
2025-04-19 07:24:59.686 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:59.687 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1071
2025-04-19 07:24:59.687 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1071
2025-04-19 07:24:59.687 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1071, '2023-11-24', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:59.688 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (219,1,1,false),(219,2,2,false),(219,3,31,false),(219,4,39,false),(219,5,66,false),(219,6,25,true)
	        
2025-04-19 07:24:59.689 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1071
2025-04-19 07:24:59.694 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1071
2025-04-19 07:24:59.697 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:59.697 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1072
2025-04-19 07:24:59.698 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1072
2025-04-19 07:24:59.698 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1072, '2022-11-26', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:59.699 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (220,1,15,false),(220,2,30,false),(220,3,47,false),(220,4,50,false),(220,5,51,false),(220,6,3,true)
	        
2025-04-19 07:24:59.700 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1072
2025-04-19 07:24:59.704 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1072
2025-04-19 07:24:59.706 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:59.706 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1073
2025-04-19 07:24:59.707 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1073
2025-04-19 07:24:59.707 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1073, '2022-11-22', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:59.707 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (221,1,29,false),(221,2,30,false),(221,3,32,false),(221,4,48,false),(221,5,50,false),(221,6,20,true)
	        
2025-04-19 07:24:59.708 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1073
2025-04-19 07:24:59.710 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1073
2025-04-19 07:24:59.713 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:59.713 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1074
2025-04-19 07:24:59.713 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1074
2025-04-19 07:24:59.714 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1074, '2022-11-30', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:59.714 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (222,1,4,false),(222,2,19,false),(222,3,24,false),(222,4,47,false),(222,5,66,false),(222,6,10,true)
	        
2025-04-19 07:24:59.714 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1074
2025-04-19 07:24:59.718 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1074
2025-04-19 07:24:59.720 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:59.721 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1075
2025-04-19 07:24:59.721 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1075
2025-04-19 07:24:59.721 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1075, '2022-12-03', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:59.721 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (223,1,6,false),(223,2,13,false),(223,3,33,false),(223,4,36,false),(223,5,37,false),(223,6,7,true)
	        
2025-04-19 07:24:59.722 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1075
2025-04-19 07:24:59.724 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1075
2025-04-19 07:24:59.726 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:59.727 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1076
2025-04-19 07:24:59.727 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1076
2025-04-19 07:24:59.727 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1076, '2022-12-05', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:59.727 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (224,1,35,false),(224,2,45,false),(224,3,47,false),(224,4,54,false),(224,5,55,false),(224,6,14,true)
	        
2025-04-19 07:24:59.728 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1076
2025-04-19 07:24:59.730 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1076
2025-04-19 07:24:59.732 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:59.732 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1077
2025-04-19 07:24:59.733 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1077
2025-04-19 07:24:59.733 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1077, '2022-12-07', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:59.734 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (225,1,6,false),(225,2,28,false),(225,3,44,false),(225,4,59,false),(225,5,61,false),(225,6,21,true)
	        
2025-04-19 07:24:59.734 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1077
2025-04-19 07:24:59.738 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1077
2025-04-19 07:24:59.741 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:59.742 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1078
2025-04-19 07:24:59.742 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1078
2025-04-19 07:24:59.742 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1078, '2022-12-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:59.743 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (226,1,9,false),(226,2,23,false),(226,3,47,false),(226,4,59,false),(226,5,61,false),(226,6,21,true)
	        
2025-04-19 07:24:59.743 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1078
2025-04-19 07:24:59.746 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1078
2025-04-19 07:24:59.749 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:59.750 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1079
2025-04-19 07:24:59.751 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1079
2025-04-19 07:24:59.751 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1079, '2022-12-12', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:59.752 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (227,1,16,false),(227,2,31,false),(227,3,50,false),(227,4,55,false),(227,5,61,false),(227,6,9,true)
	        
2025-04-19 07:24:59.752 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1079
2025-04-19 07:24:59.757 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1079
2025-04-19 07:24:59.759 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:59.759 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1080
2025-04-19 07:24:59.760 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1080
2025-04-19 07:24:59.760 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1080, '2022-12-14', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:59.760 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (228,1,36,false),(228,2,51,false),(228,3,59,false),(228,4,66,false),(228,5,68,false),(228,6,25,true)
	        
2025-04-19 07:24:59.761 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1080
2025-04-19 07:24:59.763 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1080
2025-04-19 07:24:59.765 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:59.766 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1081
2025-04-19 07:24:59.766 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1081
2025-04-19 07:24:59.766 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1081, '2022-12-17', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:59.767 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (229,1,33,false),(229,2,56,false),(229,3,64,false),(229,4,66,false),(229,5,68,false),(229,6,12,true)
	        
2025-04-19 07:24:59.768 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1081
2025-04-19 07:24:59.771 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1081
2025-04-19 07:24:59.775 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:59.776 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1082
2025-04-19 07:24:59.776 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1082
2025-04-19 07:24:59.777 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1082, '2022-12-19', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:59.778 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (230,1,7,false),(230,2,37,false),(230,3,55,false),(230,4,65,false),(230,5,67,false),(230,6,12,true)
	        
2025-04-19 07:24:59.778 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1082
2025-04-19 07:24:59.782 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1082
2025-04-19 07:24:59.785 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:59.786 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1083
2025-04-19 07:24:59.786 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1083
2025-04-19 07:24:59.786 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1083, '2022-12-21', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:59.787 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (231,1,12,false),(231,2,15,false),(231,3,24,false),(231,4,34,false),(231,5,59,false),(231,6,14,true)
	        
2025-04-19 07:24:59.787 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1083
2025-04-19 07:24:59.790 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1083
2025-04-19 07:24:59.792 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:59.793 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1084
2025-04-19 07:24:59.793 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1084
2025-04-19 07:24:59.793 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1084, '2022-12-24', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:59.794 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (232,1,17,false),(232,2,37,false),(232,3,46,false),(232,4,54,false),(232,5,67,false),(232,6,8,true)
	        
2025-04-19 07:24:59.794 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1084
2025-04-19 07:24:59.797 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1084
2025-04-19 07:24:59.799 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:59.800 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1085
2025-04-19 07:24:59.800 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1085
2025-04-19 07:24:59.801 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1085, '2022-12-26', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:59.802 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (233,1,17,false),(233,2,41,false),(233,3,47,false),(233,4,60,false),(233,5,61,false),(233,6,17,true)
	        
2025-04-19 07:24:59.802 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1085
2025-04-19 07:24:59.805 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1085
2025-04-19 07:24:59.807 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:59.807 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1086
2025-04-19 07:24:59.808 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1086
2025-04-19 07:24:59.808 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1086, '2022-12-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:59.808 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (234,1,26,false),(234,2,32,false),(234,3,38,false),(234,4,45,false),(234,5,56,false),(234,6,1,true)
	        
2025-04-19 07:24:59.809 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1086
2025-04-19 07:24:59.812 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1086
2025-04-19 07:24:59.814 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:59.814 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1087
2025-04-19 07:24:59.814 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1087
2025-04-19 07:24:59.814 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1087, '2022-12-31', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:59.815 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (235,1,18,false),(235,2,37,false),(235,3,44,false),(235,4,50,false),(235,5,64,false),(235,6,11,true)
	        
2025-04-19 07:24:59.815 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1087
2025-04-19 07:24:59.820 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1087
2025-04-19 07:24:59.823 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:59.824 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1088
2025-04-19 07:24:59.824 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1088
2025-04-19 07:24:59.824 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1088, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:59.825 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (236,1,7,false),(236,2,9,false),(236,3,12,false),(236,4,31,false),(236,5,62,false),(236,6,22,true)
	        
2025-04-19 07:24:59.825 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1088
2025-04-19 07:24:59.828 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1088
2025-04-19 07:24:59.830 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:59.830 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1089
2025-04-19 07:24:59.831 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1089
2025-04-19 07:24:59.831 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1089, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:59.831 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (237,1,12,false),(237,2,32,false),(237,3,56,false),(237,4,67,false),(237,5,68,false),(237,6,26,true)
	        
2025-04-19 07:24:59.832 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1089
2025-04-19 07:24:59.836 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1089
2025-04-19 07:24:59.838 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:59.839 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1090
2025-04-19 07:24:59.839 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1090
2025-04-19 07:24:59.839 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1090, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:59.839 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (238,1,35,false),(238,2,36,false),(238,3,44,false),(238,4,45,false),(238,5,67,false),(238,6,14,true)
	        
2025-04-19 07:24:59.840 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1090
2025-04-19 07:24:59.842 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1090
2025-04-19 07:24:59.845 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:59.845 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1091
2025-04-19 07:24:59.845 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1091
2025-04-19 07:24:59.845 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1091, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:59.846 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (239,1,18,false),(239,2,43,false),(239,3,48,false),(239,4,60,false),(239,5,69,false),(239,6,14,true)
	        
2025-04-19 07:24:59.846 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1091
2025-04-19 07:24:59.849 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1091
2025-04-19 07:24:59.852 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:59.852 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1092
2025-04-19 07:24:59.852 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1092
2025-04-19 07:24:59.852 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1092, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:59.853 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (240,1,4,false),(240,2,8,false),(240,3,46,false),(240,4,47,false),(240,5,48,false),(240,6,5,true)
	        
2025-04-19 07:24:59.854 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1092
2025-04-19 07:24:59.856 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1092
2025-04-19 07:24:59.858 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:59.859 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1093
2025-04-19 07:24:59.859 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1093
2025-04-19 07:24:59.859 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1093, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:59.859 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (241,1,24,false),(241,2,26,false),(241,3,39,false),(241,4,47,false),(241,5,57,false),(241,6,23,true)
	        
2025-04-19 07:24:59.860 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1093
2025-04-19 07:24:59.862 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1093
2025-04-19 07:24:59.864 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:59.865 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1094
2025-04-19 07:24:59.865 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1094
2025-04-19 07:24:59.865 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1094, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:59.866 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (242,1,4,false),(242,2,14,false),(242,3,33,false),(242,4,39,false),(242,5,61,false),(242,6,3,true)
	        
2025-04-19 07:24:59.866 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1094
2025-04-19 07:24:59.869 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1094
2025-04-19 07:24:59.872 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:59.872 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1095
2025-04-19 07:24:59.872 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1095
2025-04-19 07:24:59.872 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1095, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:59.873 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (243,1,6,false),(243,2,15,false),(243,3,22,false),(243,4,42,false),(243,5,47,false),(243,6,26,true)
	        
2025-04-19 07:24:59.874 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1095
2025-04-19 07:24:59.876 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1095
2025-04-19 07:24:59.878 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:59.879 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1096
2025-04-19 07:24:59.879 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1096
2025-04-19 07:24:59.879 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1096, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:59.880 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (244,1,5,false),(244,2,14,false),(244,3,19,false),(244,4,46,false),(244,5,64,false),(244,6,22,true)
	        
2025-04-19 07:24:59.880 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1096
2025-04-19 07:24:59.883 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1096
2025-04-19 07:24:59.886 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:59.886 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1097
2025-04-19 07:24:59.887 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1097
2025-04-19 07:24:59.887 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1097, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:59.887 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (245,1,12,false),(245,2,31,false),(245,3,47,false),(245,4,58,false),(245,5,60,false),(245,6,23,true)
	        
2025-04-19 07:24:59.888 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1097
2025-04-19 07:24:59.890 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1097
2025-04-19 07:24:59.892 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:59.892 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1098
2025-04-19 07:24:59.893 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1098
2025-04-19 07:24:59.893 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1098, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:59.893 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (246,1,9,false),(246,2,17,false),(246,3,20,false),(246,4,38,false),(246,5,40,false),(246,6,18,true)
	        
2025-04-19 07:24:59.894 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1098
2025-04-19 07:24:59.896 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1098
2025-04-19 07:24:59.899 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:59.900 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1099
2025-04-19 07:24:59.900 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1099
2025-04-19 07:24:59.901 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1099, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:59.901 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (247,1,2,false),(247,2,18,false),(247,3,23,false),(247,4,27,false),(247,5,47,false),(247,6,15,true)
	        
2025-04-19 07:24:59.902 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1099
2025-04-19 07:24:59.905 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1099
2025-04-19 07:24:59.908 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:59.908 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1100
2025-04-19 07:24:59.908 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1100
2025-04-19 07:24:59.909 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1100, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:59.909 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (248,1,1,false),(248,2,4,false),(248,3,12,false),(248,4,36,false),(248,5,49,false),(248,6,5,true)
	        
2025-04-19 07:24:59.910 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1100
2025-04-19 07:24:59.912 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1100
2025-04-19 07:24:59.914 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:59.915 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1101
2025-04-19 07:24:59.915 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1101
2025-04-19 07:24:59.915 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1101, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:59.916 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (249,1,31,false),(249,2,43,false),(249,3,58,false),(249,4,59,false),(249,5,66,false),(249,6,9,true)
	        
2025-04-19 07:24:59.917 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1101
2025-04-19 07:24:59.920 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1101
2025-04-19 07:24:59.922 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:59.922 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1102
2025-04-19 07:24:59.922 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1102
2025-04-19 07:24:59.923 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1102, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:59.923 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (250,1,2,false),(250,2,8,false),(250,3,15,false),(250,4,19,false),(250,5,58,false),(250,6,10,true)
	        
2025-04-19 07:24:59.924 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1102
2025-04-19 07:24:59.926 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1102
2025-04-19 07:24:59.928 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:59.929 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1103
2025-04-19 07:24:59.929 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1103
2025-04-19 07:24:59.929 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1103, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:59.929 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (251,1,5,false),(251,2,11,false),(251,3,22,false),(251,4,23,false),(251,5,69,false),(251,6,7,true)
	        
2025-04-19 07:24:59.930 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1103
2025-04-19 07:24:59.933 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1103
2025-04-19 07:24:59.936 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:59.937 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1104
2025-04-19 07:24:59.937 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1104
2025-04-19 07:24:59.937 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1104, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:59.938 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (252,1,52,false),(252,2,58,false),(252,3,59,false),(252,4,64,false),(252,5,66,false),(252,6,9,true)
	        
2025-04-19 07:24:59.938 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1104
2025-04-19 07:24:59.944 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1104
2025-04-19 07:24:59.947 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:59.947 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1105
2025-04-19 07:24:59.948 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1105
2025-04-19 07:24:59.948 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1105, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:59.949 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (253,1,10,false),(253,2,23,false),(253,3,30,false),(253,4,54,false),(253,5,65,false),(253,6,11,true)
	        
2025-04-19 07:24:59.949 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1105
2025-04-19 07:24:59.954 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1105
2025-04-19 07:24:59.956 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:59.957 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1106
2025-04-19 07:24:59.957 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1106
2025-04-19 07:24:59.957 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1106, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:59.958 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (254,1,17,false),(254,2,26,false),(254,3,37,false),(254,4,61,false),(254,5,65,false),(254,6,2,true)
	        
2025-04-19 07:24:59.958 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1106
2025-04-19 07:24:59.961 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1106
2025-04-19 07:24:59.963 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:59.963 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1107
2025-04-19 07:24:59.964 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1107
2025-04-19 07:24:59.964 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1107, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:59.964 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (255,1,31,false),(255,2,32,false),(255,3,54,false),(255,4,60,false),(255,5,63,false),(255,6,12,true)
	        
2025-04-19 07:24:59.965 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1107
2025-04-19 07:24:59.968 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1107
2025-04-19 07:24:59.970 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:59.971 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1108
2025-04-19 07:24:59.971 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1108
2025-04-19 07:24:59.971 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1108, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:59.971 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (256,1,8,false),(256,2,21,false),(256,3,31,false),(256,4,32,false),(256,5,37,false),(256,6,23,true)
	        
2025-04-19 07:24:59.972 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1108
2025-04-19 07:24:59.975 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1108
2025-04-19 07:24:59.977 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:59.977 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1109
2025-04-19 07:24:59.978 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1109
2025-04-19 07:24:59.978 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1109, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:59.978 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (257,1,3,false),(257,2,17,false),(257,3,26,false),(257,4,38,false),(257,5,54,false),(257,6,15,true)
	        
2025-04-19 07:24:59.979 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1109
2025-04-19 07:24:59.981 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1109
2025-04-19 07:24:59.984 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:59.985 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1110
2025-04-19 07:24:59.985 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1110
2025-04-19 07:24:59.985 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1110, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:59.986 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (258,1,11,false),(258,2,18,false),(258,3,39,false),(258,4,44,false),(258,5,65,false),(258,6,7,true)
	        
2025-04-19 07:24:59.986 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1110
2025-04-19 07:24:59.989 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1110
2025-04-19 07:24:59.991 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:59.992 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1111
2025-04-19 07:24:59.992 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1111
2025-04-19 07:24:59.992 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1111, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:24:59.992 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (259,1,11,false),(259,2,24,false),(259,3,58,false),(259,4,66,false),(259,5,67,false),(259,6,26,true)
	        
2025-04-19 07:24:59.993 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1111
2025-04-19 07:24:59.996 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1111
2025-04-19 07:24:59.998 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:24:59.999 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1112
2025-04-19 07:24:59.999 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1112
2025-04-19 07:25:00.000 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1112, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.002 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (260,1,16,false),(260,2,28,false),(260,3,49,false),(260,4,51,false),(260,5,55,false),(260,6,23,true)
	        
2025-04-19 07:25:00.002 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1112
2025-04-19 07:25:00.008 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1112
2025-04-19 07:25:00.011 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.012 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1113
2025-04-19 07:25:00.012 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1113
2025-04-19 07:25:00.012 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1113, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.013 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (261,1,2,false),(261,2,9,false),(261,3,28,false),(261,4,36,false),(261,5,53,false),(261,6,4,true)
	        
2025-04-19 07:25:00.013 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1113
2025-04-19 07:25:00.018 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1113
2025-04-19 07:25:00.021 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.021 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1114
2025-04-19 07:25:00.022 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1114
2025-04-19 07:25:00.022 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1114, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.022 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (262,1,10,false),(262,2,16,false),(262,3,18,false),(262,4,40,false),(262,5,66,false),(262,6,16,true)
	        
2025-04-19 07:25:00.023 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1114
2025-04-19 07:25:00.027 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1114
2025-04-19 07:25:00.033 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.034 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1115
2025-04-19 07:25:00.035 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1115
2025-04-19 07:25:00.035 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1115, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.036 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (263,1,2,false),(263,2,13,false),(263,3,29,false),(263,4,58,false),(263,5,69,false),(263,6,4,true)
	        
2025-04-19 07:25:00.036 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1115
2025-04-19 07:25:00.040 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1115
2025-04-19 07:25:00.042 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.043 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1116
2025-04-19 07:25:00.043 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1116
2025-04-19 07:25:00.043 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1116, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.044 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (264,1,26,false),(264,2,27,false),(264,3,43,false),(264,4,61,false),(264,5,69,false),(264,6,4,true)
	        
2025-04-19 07:25:00.045 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1116
2025-04-19 07:25:00.048 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1116
2025-04-19 07:25:00.052 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.053 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1117
2025-04-19 07:25:00.054 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1117
2025-04-19 07:25:00.054 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1117, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.054 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (265,1,11,false),(265,2,20,false),(265,3,33,false),(265,4,43,false),(265,5,58,false),(265,6,24,true)
	        
2025-04-19 07:25:00.055 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1117
2025-04-19 07:25:00.058 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1117
2025-04-19 07:25:00.061 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.062 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1118
2025-04-19 07:25:00.062 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1118
2025-04-19 07:25:00.062 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1118, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.063 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (266,1,3,false),(266,2,10,false),(266,3,24,false),(266,4,46,false),(266,5,63,false),(266,6,4,true)
	        
2025-04-19 07:25:00.063 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1118
2025-04-19 07:25:00.068 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1118
2025-04-19 07:25:00.071 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.072 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1119
2025-04-19 07:25:00.073 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1119
2025-04-19 07:25:00.074 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1119, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.074 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (267,1,16,false),(267,2,18,false),(267,3,33,false),(267,4,37,false),(267,5,50,false),(267,6,8,true)
	        
2025-04-19 07:25:00.075 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1119
2025-04-19 07:25:00.079 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1119
2025-04-19 07:25:00.082 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.082 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1120
2025-04-19 07:25:00.083 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1120
2025-04-19 07:25:00.083 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1120, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.084 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (268,1,14,false),(268,2,29,false),(268,3,30,false),(268,4,54,false),(268,5,69,false),(268,6,11,true)
	        
2025-04-19 07:25:00.085 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1120
2025-04-19 07:25:00.088 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1120
2025-04-19 07:25:00.090 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.091 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1121
2025-04-19 07:25:00.091 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1121
2025-04-19 07:25:00.091 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1121, '2023-03-20', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.091 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (269,1,1,false),(269,2,27,false),(269,3,32,false),(269,4,47,false),(269,5,67,false),(269,6,14,true)
	        
2025-04-19 07:25:00.092 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1121
2025-04-19 07:25:00.095 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1121
2025-04-19 07:25:00.097 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.097 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1122
2025-04-19 07:25:00.097 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1122
2025-04-19 07:25:00.097 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1122, '2023-03-22', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.098 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (270,1,27,false),(270,2,28,false),(270,3,37,false),(270,4,50,false),(270,5,57,false),(270,6,5,true)
	        
2025-04-19 07:25:00.098 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1122
2025-04-19 07:25:00.102 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1122
2025-04-19 07:25:00.104 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.104 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1123
2025-04-19 07:25:00.104 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1123
2025-04-19 07:25:00.104 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1123, '2023-03-25', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.105 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (271,1,15,false),(271,2,17,false),(271,3,18,false),(271,4,47,false),(271,5,57,false),(271,6,19,true)
	        
2025-04-19 07:25:00.105 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1123
2025-04-19 07:25:00.108 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1123
2025-04-19 07:25:00.110 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.111 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1124
2025-04-19 07:25:00.111 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1124
2025-04-19 07:25:00.111 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1124, '2023-03-27', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.112 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (272,1,19,false),(272,2,26,false),(272,3,36,false),(272,4,43,false),(272,5,58,false),(272,6,14,true)
	        
2025-04-19 07:25:00.112 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1124
2025-04-19 07:25:00.114 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1124
2025-04-19 07:25:00.117 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.117 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1125
2025-04-19 07:25:00.118 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1125
2025-04-19 07:25:00.118 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1125, '2023-03-29', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.118 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (273,1,4,false),(273,2,9,false),(273,3,24,false),(273,4,46,false),(273,5,66,false),(273,6,7,true)
	        
2025-04-19 07:25:00.119 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1125
2025-04-19 07:25:00.122 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1125
2025-04-19 07:25:00.124 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.124 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1126
2025-04-19 07:25:00.124 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1126
2025-04-19 07:25:00.124 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1126, '2023-04-01', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.125 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (274,1,11,false),(274,2,19,false),(274,3,21,false),(274,4,29,false),(274,5,52,false),(274,6,17,true)
	        
2025-04-19 07:25:00.125 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1126
2025-04-19 07:25:00.128 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1126
2025-04-19 07:25:00.130 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.130 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1127
2025-04-19 07:25:00.130 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1127
2025-04-19 07:25:00.131 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1127, '2023-04-03', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.131 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (275,1,16,false),(275,2,30,false),(275,3,31,false),(275,4,54,false),(275,5,68,false),(275,6,1,true)
	        
2025-04-19 07:25:00.131 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1127
2025-04-19 07:25:00.135 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1127
2025-04-19 07:25:00.137 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.137 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1128
2025-04-19 07:25:00.137 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1128
2025-04-19 07:25:00.138 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1128, '2023-04-05', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.138 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (276,1,3,false),(276,2,5,false),(276,3,9,false),(276,4,42,false),(276,5,52,false),(276,6,11,true)
	        
2025-04-19 07:25:00.138 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1128
2025-04-19 07:25:00.141 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1128
2025-04-19 07:25:00.143 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.144 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1129
2025-04-19 07:25:00.144 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1129
2025-04-19 07:25:00.144 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1129, '2023-04-08', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.144 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (277,1,11,false),(277,2,22,false),(277,3,24,false),(277,4,51,false),(277,5,60,false),(277,6,18,true)
	        
2025-04-19 07:25:00.145 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1129
2025-04-19 07:25:00.147 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1129
2025-04-19 07:25:00.149 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.150 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1130
2025-04-19 07:25:00.150 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1130
2025-04-19 07:25:00.151 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1130, '2023-04-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.151 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (278,1,9,false),(278,2,10,false),(278,3,36,false),(278,4,46,false),(278,5,52,false),(278,6,14,true)
	        
2025-04-19 07:25:00.152 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1130
2025-04-19 07:25:00.155 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1130
2025-04-19 07:25:00.157 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.157 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1131
2025-04-19 07:25:00.158 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1131
2025-04-19 07:25:00.158 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1131, '2023-04-12', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.158 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (279,1,9,false),(279,2,36,false),(279,3,41,false),(279,4,44,false),(279,5,59,false),(279,6,4,true)
	        
2025-04-19 07:25:00.159 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1131
2025-04-19 07:25:00.162 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1131
2025-04-19 07:25:00.164 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.164 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1132
2025-04-19 07:25:00.164 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1132
2025-04-19 07:25:00.165 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1132, '2023-04-15', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.165 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (280,1,1,false),(280,2,33,false),(280,3,34,false),(280,4,56,false),(280,5,59,false),(280,6,18,true)
	        
2025-04-19 07:25:00.166 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1132
2025-04-19 07:25:00.170 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1132
2025-04-19 07:25:00.172 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.173 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1133
2025-04-19 07:25:00.173 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1133
2025-04-19 07:25:00.173 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1133, '2023-04-17', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.174 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (281,1,23,false),(281,2,25,false),(281,3,35,false),(281,4,63,false),(281,5,64,false),(281,6,25,true)
	        
2025-04-19 07:25:00.174 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1133
2025-04-19 07:25:00.177 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1133
2025-04-19 07:25:00.179 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.179 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1134
2025-04-19 07:25:00.179 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1134
2025-04-19 07:25:00.179 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1134, '2023-04-19', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.180 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (282,1,4,false),(282,2,11,false),(282,3,21,false),(282,4,38,false),(282,5,64,false),(282,6,11,true)
	        
2025-04-19 07:25:00.180 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1134
2025-04-19 07:25:00.182 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1134
2025-04-19 07:25:00.186 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.186 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1135
2025-04-19 07:25:00.186 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1135
2025-04-19 07:25:00.186 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1135, '2023-04-22', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.187 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (283,1,17,false),(283,2,36,false),(283,3,47,false),(283,4,63,false),(283,5,68,false),(283,6,25,true)
	        
2025-04-19 07:25:00.187 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1135
2025-04-19 07:25:00.190 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1135
2025-04-19 07:25:00.192 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.192 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1136
2025-04-19 07:25:00.192 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1136
2025-04-19 07:25:00.193 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1136, '2023-04-24', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.193 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (284,1,19,false),(284,2,21,false),(284,3,55,false),(284,4,66,false),(284,5,68,false),(284,6,3,true)
	        
2025-04-19 07:25:00.193 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1136
2025-04-19 07:25:00.196 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1136
2025-04-19 07:25:00.198 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.198 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1137
2025-04-19 07:25:00.199 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1137
2025-04-19 07:25:00.199 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1137, '2023-04-26', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.199 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (285,1,2,false),(285,2,15,false),(285,3,30,false),(285,4,35,false),(285,5,49,false),(285,6,6,true)
	        
2025-04-19 07:25:00.200 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1137
2025-04-19 07:25:00.203 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1137
2025-04-19 07:25:00.205 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.205 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1138
2025-04-19 07:25:00.206 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1138
2025-04-19 07:25:00.206 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1138, '2023-04-29', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.206 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (286,1,16,false),(286,2,53,false),(286,3,54,false),(286,4,57,false),(286,5,65,false),(286,6,8,true)
	        
2025-04-19 07:25:00.207 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1138
2025-04-19 07:25:00.210 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1138
2025-04-19 07:25:00.212 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.213 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1139
2025-04-19 07:25:00.213 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1139
2025-04-19 07:25:00.213 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1139, '2023-05-01', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.214 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (287,1,3,false),(287,2,38,false),(287,3,55,false),(287,4,61,false),(287,5,66,false),(287,6,1,true)
	        
2025-04-19 07:25:00.214 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1139
2025-04-19 07:25:00.220 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1139
2025-04-19 07:25:00.223 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.223 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1140
2025-04-19 07:25:00.224 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1140
2025-04-19 07:25:00.225 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1140, '2023-05-03', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.225 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (288,1,21,false),(288,2,26,false),(288,3,30,false),(288,4,45,false),(288,5,47,false),(288,6,23,true)
	        
2025-04-19 07:25:00.226 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1140
2025-04-19 07:25:00.229 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1140
2025-04-19 07:25:00.232 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.232 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1141
2025-04-19 07:25:00.233 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1141
2025-04-19 07:25:00.233 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1141, '2023-05-06', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.233 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (289,1,31,false),(289,2,39,false),(289,3,47,false),(289,4,51,false),(289,5,53,false),(289,6,6,true)
	        
2025-04-19 07:25:00.234 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1141
2025-04-19 07:25:00.237 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1141
2025-04-19 07:25:00.239 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.240 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1142
2025-04-19 07:25:00.240 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1142
2025-04-19 07:25:00.240 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1142, '2023-05-08', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.240 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (290,1,15,false),(290,2,20,false),(290,3,33,false),(290,4,36,false),(290,5,43,false),(290,6,12,true)
	        
2025-04-19 07:25:00.241 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1142
2025-04-19 07:25:00.243 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1142
2025-04-19 07:25:00.254 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.256 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1143
2025-04-19 07:25:00.258 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1143
2025-04-19 07:25:00.259 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1143, '2023-05-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.262 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (291,1,21,false),(291,2,24,false),(291,3,33,false),(291,4,55,false),(291,5,69,false),(291,6,3,true)
	        
2025-04-19 07:25:00.263 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1143
2025-04-19 07:25:00.268 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1143
2025-04-19 07:25:00.270 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.271 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1144
2025-04-19 07:25:00.271 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1144
2025-04-19 07:25:00.271 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1144, '2023-05-13', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.271 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (292,1,3,false),(292,2,15,false),(292,3,20,false),(292,4,23,false),(292,5,46,false),(292,6,11,true)
	        
2025-04-19 07:25:00.272 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1144
2025-04-19 07:25:00.274 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1144
2025-04-19 07:25:00.276 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.277 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1145
2025-04-19 07:25:00.277 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1145
2025-04-19 07:25:00.277 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1145, '2023-05-15', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.277 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (293,1,1,false),(293,2,26,false),(293,3,28,false),(293,4,55,false),(293,5,58,false),(293,6,25,true)
	        
2025-04-19 07:25:00.278 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1145
2025-04-19 07:25:00.280 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1145
2025-04-19 07:25:00.282 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.283 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1146
2025-04-19 07:25:00.283 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1146
2025-04-19 07:25:00.283 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1146, '2023-05-17', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.284 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (294,1,18,false),(294,2,34,false),(294,3,37,false),(294,4,45,false),(294,5,51,false),(294,6,14,true)
	        
2025-04-19 07:25:00.284 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1146
2025-04-19 07:25:00.287 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1146
2025-04-19 07:25:00.289 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.290 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1147
2025-04-19 07:25:00.290 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1147
2025-04-19 07:25:00.290 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1147, '2023-05-20', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.291 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (295,1,17,false),(295,2,23,false),(295,3,32,false),(295,4,38,false),(295,5,63,false),(295,6,23,true)
	        
2025-04-19 07:25:00.291 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1147
2025-04-19 07:25:00.294 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1147
2025-04-19 07:25:00.296 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.296 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1148
2025-04-19 07:25:00.296 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1148
2025-04-19 07:25:00.296 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1148, '2023-05-22', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.297 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (296,1,9,false),(296,2,38,false),(296,3,48,false),(296,4,52,false),(296,5,68,false),(296,6,25,true)
	        
2025-04-19 07:25:00.297 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1148
2025-04-19 07:25:00.300 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1148
2025-04-19 07:25:00.302 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.303 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1149
2025-04-19 07:25:00.303 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1149
2025-04-19 07:25:00.303 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1149, '2023-05-24', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.304 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (297,1,12,false),(297,2,21,false),(297,3,44,false),(297,4,50,false),(297,5,58,false),(297,6,26,true)
	        
2025-04-19 07:25:00.304 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1149
2025-04-19 07:25:00.307 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1149
2025-04-19 07:25:00.309 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.309 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1150
2025-04-19 07:25:00.309 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1150
2025-04-19 07:25:00.309 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1150, '2023-05-27', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.310 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (298,1,24,false),(298,2,38,false),(298,3,39,false),(298,4,48,false),(298,5,56,false),(298,6,4,true)
	        
2025-04-19 07:25:00.310 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1150
2025-04-19 07:25:00.313 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1150
2025-04-19 07:25:00.314 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.315 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1151
2025-04-19 07:25:00.315 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1151
2025-04-19 07:25:00.315 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1151, '2023-05-29', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.316 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (299,1,21,false),(299,2,33,false),(299,3,35,false),(299,4,62,false),(299,5,64,false),(299,6,24,true)
	        
2025-04-19 07:25:00.316 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1151
2025-04-19 07:25:00.319 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1151
2025-04-19 07:25:00.321 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.322 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1152
2025-04-19 07:25:00.322 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1152
2025-04-19 07:25:00.322 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1152, '2023-05-31', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.323 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (300,1,2,false),(300,2,4,false),(300,3,54,false),(300,4,61,false),(300,5,62,false),(300,6,14,true)
	        
2025-04-19 07:25:00.323 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1152
2025-04-19 07:25:00.326 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1152
2025-04-19 07:25:00.328 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.329 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1153
2025-04-19 07:25:00.329 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1153
2025-04-19 07:25:00.329 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1153, '2023-06-03', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.329 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (301,1,15,false),(301,2,45,false),(301,3,64,false),(301,4,67,false),(301,5,68,false),(301,6,18,true)
	        
2025-04-19 07:25:00.330 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1153
2025-04-19 07:25:00.332 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1153
2025-04-19 07:25:00.335 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.336 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1154
2025-04-19 07:25:00.336 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1154
2025-04-19 07:25:00.336 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1154, '2023-06-05', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.336 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (302,1,2,false),(302,2,31,false),(302,3,45,false),(302,4,46,false),(302,5,49,false),(302,6,20,true)
	        
2025-04-19 07:25:00.337 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1154
2025-04-19 07:25:00.339 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1154
2025-04-19 07:25:00.341 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.342 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1155
2025-04-19 07:25:00.342 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1155
2025-04-19 07:25:00.342 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1155, '2023-06-07', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.343 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (303,1,16,false),(303,2,21,false),(303,3,29,false),(303,4,53,false),(303,5,66,false),(303,6,2,true)
	        
2025-04-19 07:25:00.343 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1155
2025-04-19 07:25:00.346 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1155
2025-04-19 07:25:00.348 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.348 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1156
2025-04-19 07:25:00.348 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1156
2025-04-19 07:25:00.349 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1156, '2023-06-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.349 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (304,1,21,false),(304,2,32,false),(304,3,42,false),(304,4,46,false),(304,5,50,false),(304,6,4,true)
	        
2025-04-19 07:25:00.349 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1156
2025-04-19 07:25:00.353 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1156
2025-04-19 07:25:00.355 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.355 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1157
2025-04-19 07:25:00.355 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1157
2025-04-19 07:25:00.356 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1157, '2023-06-12', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.356 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (305,1,2,false),(305,2,3,false),(305,3,16,false),(305,4,23,false),(305,5,68,false),(305,6,7,true)
	        
2025-04-19 07:25:00.356 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1157
2025-04-19 07:25:00.359 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1157
2025-04-19 07:25:00.361 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.362 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1158
2025-04-19 07:25:00.362 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1158
2025-04-19 07:25:00.362 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1158, '2023-06-14', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.363 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (306,1,3,false),(306,2,20,false),(306,3,36,false),(306,4,42,false),(306,5,64,false),(306,6,4,true)
	        
2025-04-19 07:25:00.363 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1158
2025-04-19 07:25:00.366 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1158
2025-04-19 07:25:00.369 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.369 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1159
2025-04-19 07:25:00.370 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1159
2025-04-19 07:25:00.370 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1159, '2023-06-17', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.370 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (307,1,2,false),(307,2,12,false),(307,3,45,false),(307,4,61,false),(307,5,64,false),(307,6,26,true)
	        
2025-04-19 07:25:00.371 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1159
2025-04-19 07:25:00.373 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1159
2025-04-19 07:25:00.375 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.375 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1160
2025-04-19 07:25:00.376 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1160
2025-04-19 07:25:00.376 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1160, '2023-06-19', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.376 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (308,1,36,false),(308,2,39,false),(308,3,52,false),(308,4,57,false),(308,5,69,false),(308,6,1,true)
	        
2025-04-19 07:25:00.377 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1160
2025-04-19 07:25:00.379 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1160
2025-04-19 07:25:00.381 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.381 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1161
2025-04-19 07:25:00.382 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1161
2025-04-19 07:25:00.382 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1161, '2023-06-21', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.382 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (309,1,5,false),(309,2,11,false),(309,3,33,false),(309,4,35,false),(309,5,63,false),(309,6,14,true)
	        
2025-04-19 07:25:00.383 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1161
2025-04-19 07:25:00.387 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1161
2025-04-19 07:25:00.389 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.390 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1162
2025-04-19 07:25:00.390 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1162
2025-04-19 07:25:00.390 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1162, '2023-06-24', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.390 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (310,1,2,false),(310,2,38,false),(310,3,44,false),(310,4,50,false),(310,5,62,false),(310,6,19,true)
	        
2025-04-19 07:25:00.391 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1162
2025-04-19 07:25:00.395 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1162
2025-04-19 07:25:00.398 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.398 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1163
2025-04-19 07:25:00.399 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1163
2025-04-19 07:25:00.399 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1163, '2023-06-26', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.399 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (311,1,6,false),(311,2,28,false),(311,3,39,false),(311,4,43,false),(311,5,54,false),(311,6,12,true)
	        
2025-04-19 07:25:00.400 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1163
2025-04-19 07:25:00.404 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1163
2025-04-19 07:25:00.407 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.407 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1164
2025-04-19 07:25:00.407 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1164
2025-04-19 07:25:00.408 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1164, '2023-06-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.413 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (312,1,19,false),(312,2,25,false),(312,3,34,false),(312,4,57,false),(312,5,68,false),(312,6,4,true)
	        
2025-04-19 07:25:00.420 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1164
2025-04-19 07:25:00.428 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1164
2025-04-19 07:25:00.438 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.441 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1165
2025-04-19 07:25:00.442 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1165
2025-04-19 07:25:00.443 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1165, '2023-07-01', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.445 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (313,1,4,false),(313,2,17,false),(313,3,35,false),(313,4,49,false),(313,5,61,false),(313,6,8,true)
	        
2025-04-19 07:25:00.450 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1165
2025-04-19 07:25:00.471 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1165
2025-04-19 07:25:00.480 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.481 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1166
2025-04-19 07:25:00.481 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1166
2025-04-19 07:25:00.482 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1166, '2023-07-03', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.482 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (314,1,15,false),(314,2,26,false),(314,3,31,false),(314,4,38,false),(314,5,61,false),(314,6,3,true)
	        
2025-04-19 07:25:00.483 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1166
2025-04-19 07:25:00.491 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1166
2025-04-19 07:25:00.496 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.496 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1167
2025-04-19 07:25:00.497 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1167
2025-04-19 07:25:00.497 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1167, '2023-07-05', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.499 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (315,1,17,false),(315,2,24,false),(315,3,48,false),(315,4,62,false),(315,5,68,false),(315,6,23,true)
	        
2025-04-19 07:25:00.500 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1167
2025-04-19 07:25:00.505 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1167
2025-04-19 07:25:00.507 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.508 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1168
2025-04-19 07:25:00.508 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1168
2025-04-19 07:25:00.509 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1168, '2023-07-08', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.509 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (316,1,7,false),(316,2,23,false),(316,3,24,false),(316,4,32,false),(316,5,43,false),(316,6,18,true)
	        
2025-04-19 07:25:00.510 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1168
2025-04-19 07:25:00.514 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1168
2025-04-19 07:25:00.519 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.521 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1169
2025-04-19 07:25:00.526 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1169
2025-04-19 07:25:00.527 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1169, '2023-07-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.528 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (317,1,2,false),(317,2,24,false),(317,3,34,false),(317,4,53,false),(317,5,58,false),(317,6,13,true)
	        
2025-04-19 07:25:00.529 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1169
2025-04-19 07:25:00.535 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1169
2025-04-19 07:25:00.542 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.543 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1170
2025-04-19 07:25:00.544 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1170
2025-04-19 07:25:00.544 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1170, '2023-07-12', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.545 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (318,1,23,false),(318,2,35,false),(318,3,45,false),(318,4,66,false),(318,5,67,false),(318,6,20,true)
	        
2025-04-19 07:25:00.546 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1170
2025-04-19 07:25:00.558 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1170
2025-04-19 07:25:00.563 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.563 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1171
2025-04-19 07:25:00.563 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1171
2025-04-19 07:25:00.564 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1171, '2023-07-17', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.564 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (319,1,2,false),(319,2,9,false),(319,3,43,false),(319,4,55,false),(319,5,57,false),(319,6,18,true)
	        
2025-04-19 07:25:00.565 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1171
2025-04-19 07:25:00.571 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1171
2025-04-19 07:25:00.573 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.574 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1172
2025-04-19 07:25:00.574 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1172
2025-04-19 07:25:00.574 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1172, '2023-07-19', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.575 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (320,1,5,false),(320,2,8,false),(320,3,9,false),(320,4,17,false),(320,5,41,false),(320,6,21,true)
	        
2025-04-19 07:25:00.575 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1172
2025-04-19 07:25:00.578 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1172
2025-04-19 07:25:00.580 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.580 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1173
2025-04-19 07:25:00.580 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1173
2025-04-19 07:25:00.581 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1173, '2023-07-22', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.581 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (321,1,7,false),(321,2,10,false),(321,3,11,false),(321,4,13,false),(321,5,24,false),(321,6,24,true)
	        
2025-04-19 07:25:00.581 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1173
2025-04-19 07:25:00.584 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1173
2025-04-19 07:25:00.589 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.590 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1174
2025-04-19 07:25:00.590 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1174
2025-04-19 07:25:00.590 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1174, '2023-07-24', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.590 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (322,1,25,false),(322,2,27,false),(322,3,36,false),(322,4,37,false),(322,5,63,false),(322,6,7,true)
	        
2025-04-19 07:25:00.591 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1174
2025-04-19 07:25:00.595 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1174
2025-04-19 07:25:00.597 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.598 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1175
2025-04-19 07:25:00.598 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1175
2025-04-19 07:25:00.598 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1175, '2023-07-26', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.599 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (323,1,3,false),(323,2,4,false),(323,3,12,false),(323,4,28,false),(323,5,49,false),(323,6,25,true)
	        
2025-04-19 07:25:00.599 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1175
2025-04-19 07:25:00.604 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1175
2025-04-19 07:25:00.606 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.606 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1176
2025-04-19 07:25:00.607 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1176
2025-04-19 07:25:00.607 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1176, '2023-07-29', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.607 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (324,1,3,false),(324,2,16,false),(324,3,40,false),(324,4,48,false),(324,5,60,false),(324,6,14,true)
	        
2025-04-19 07:25:00.608 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1176
2025-04-19 07:25:00.611 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1176
2025-04-19 07:25:00.613 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.613 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1177
2025-04-19 07:25:00.613 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1177
2025-04-19 07:25:00.613 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1177, '2023-07-31', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.614 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (325,1,10,false),(325,2,25,false),(325,3,27,false),(325,4,34,false),(325,5,38,false),(325,6,2,true)
	        
2025-04-19 07:25:00.615 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1177
2025-04-19 07:25:00.620 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1177
2025-04-19 07:25:00.625 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.626 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1178
2025-04-19 07:25:00.626 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1178
2025-04-19 07:25:00.626 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1178, '2023-08-02', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.627 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (326,1,2,false),(326,2,11,false),(326,3,48,false),(326,4,58,false),(326,5,65,false),(326,6,13,true)
	        
2025-04-19 07:25:00.627 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1178
2025-04-19 07:25:00.630 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1178
2025-04-19 07:25:00.632 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.632 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1179
2025-04-19 07:25:00.632 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1179
2025-04-19 07:25:00.632 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1179, '2023-08-05', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.633 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (327,1,23,false),(327,2,24,false),(327,3,33,false),(327,4,51,false),(327,5,64,false),(327,6,5,true)
	        
2025-04-19 07:25:00.633 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1179
2025-04-19 07:25:00.637 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1179
2025-04-19 07:25:00.639 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.639 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1180
2025-04-19 07:25:00.640 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1180
2025-04-19 07:25:00.640 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1180, '2023-08-07', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.640 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (328,1,18,false),(328,2,42,false),(328,3,44,false),(328,4,62,false),(328,5,65,false),(328,6,23,true)
	        
2025-04-19 07:25:00.641 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1180
2025-04-19 07:25:00.643 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1180
2025-04-19 07:25:00.646 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.646 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1181
2025-04-19 07:25:00.646 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1181
2025-04-19 07:25:00.646 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1181, '2023-08-09', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.647 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (329,1,6,false),(329,2,13,false),(329,3,20,false),(329,4,35,false),(329,5,54,false),(329,6,22,true)
	        
2025-04-19 07:25:00.647 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1181
2025-04-19 07:25:00.650 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1181
2025-04-19 07:25:00.653 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.653 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1182
2025-04-19 07:25:00.654 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1182
2025-04-19 07:25:00.654 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1182, '2023-08-12', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.654 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (330,1,10,false),(330,2,15,false),(330,3,21,false),(330,4,67,false),(330,5,69,false),(330,6,3,true)
	        
2025-04-19 07:25:00.655 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1182
2025-04-19 07:25:00.658 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1182
2025-04-19 07:25:00.660 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.661 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1183
2025-04-19 07:25:00.661 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1183
2025-04-19 07:25:00.661 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1183, '2023-08-14', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.662 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (331,1,19,false),(331,2,21,false),(331,3,37,false),(331,4,50,false),(331,5,65,false),(331,6,26,true)
	        
2025-04-19 07:25:00.662 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1183
2025-04-19 07:25:00.667 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1183
2025-04-19 07:25:00.670 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.670 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1184
2025-04-19 07:25:00.670 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1184
2025-04-19 07:25:00.670 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1184, '2023-08-16', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.671 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (332,1,32,false),(332,2,34,false),(332,3,37,false),(332,4,39,false),(332,5,47,false),(332,6,3,true)
	        
2025-04-19 07:25:00.671 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1184
2025-04-19 07:25:00.674 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1184
2025-04-19 07:25:00.676 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.677 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1186
2025-04-19 07:25:00.677 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1186
2025-04-19 07:25:00.677 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1186, '2023-08-21', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.678 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (333,1,1,false),(333,2,25,false),(333,3,27,false),(333,4,38,false),(333,5,62,false),(333,6,13,true)
	        
2025-04-19 07:25:00.678 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1186
2025-04-19 07:25:00.681 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1186
2025-04-19 07:25:00.684 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.685 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1187
2025-04-19 07:25:00.685 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1187
2025-04-19 07:25:00.685 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1187, '2023-08-23', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.686 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (334,1,3,false),(334,2,4,false),(334,3,12,false),(334,4,22,false),(334,5,28,false),(334,6,16,true)
	        
2025-04-19 07:25:00.686 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1187
2025-04-19 07:25:00.690 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1187
2025-04-19 07:25:00.692 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.692 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1188
2025-04-19 07:25:00.692 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1188
2025-04-19 07:25:00.693 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1188, '2023-08-26', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.693 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (335,1,25,false),(335,2,30,false),(335,3,32,false),(335,4,33,false),(335,5,55,false),(335,6,20,true)
	        
2025-04-19 07:25:00.693 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1188
2025-04-19 07:25:00.696 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1188
2025-04-19 07:25:00.698 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.699 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1189
2025-04-19 07:25:00.699 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1189
2025-04-19 07:25:00.699 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1189, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.700 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (336,1,20,false),(336,2,22,false),(336,3,26,false),(336,4,28,false),(336,5,63,false),(336,6,5,true)
	        
2025-04-19 07:25:00.701 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1189
2025-04-19 07:25:00.704 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1189
2025-04-19 07:25:00.707 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.707 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1190
2025-04-19 07:25:00.708 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1190
2025-04-19 07:25:00.708 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1190, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.708 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (337,1,4,false),(337,2,6,false),(337,3,25,false),(337,4,55,false),(337,5,68,false),(337,6,26,true)
	        
2025-04-19 07:25:00.709 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1190
2025-04-19 07:25:00.713 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1190
2025-04-19 07:25:00.716 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.717 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1191
2025-04-19 07:25:00.717 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1191
2025-04-19 07:25:00.717 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1191, '2023-08-30', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.718 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (338,1,4,false),(338,2,13,false),(338,3,35,false),(338,4,61,false),(338,5,69,false),(338,6,4,true)
	        
2025-04-19 07:25:00.719 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1191
2025-04-19 07:25:00.723 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1191
2025-04-19 07:25:00.725 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.726 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1192
2025-04-19 07:25:00.726 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1192
2025-04-19 07:25:00.726 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1192, '2023-09-02', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.726 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (339,1,25,false),(339,2,38,false),(339,3,42,false),(339,4,66,false),(339,5,67,false),(339,6,19,true)
	        
2025-04-19 07:25:00.727 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1192
2025-04-19 07:25:00.730 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1192
2025-04-19 07:25:00.732 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.732 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1193
2025-04-19 07:25:00.733 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1193
2025-04-19 07:25:00.733 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1193, '2023-09-04', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.733 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (340,1,1,false),(340,2,26,false),(340,3,32,false),(340,4,46,false),(340,5,51,false),(340,6,13,true)
	        
2025-04-19 07:25:00.734 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1193
2025-04-19 07:25:00.737 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1193
2025-04-19 07:25:00.739 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.739 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1194
2025-04-19 07:25:00.740 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1194
2025-04-19 07:25:00.740 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1194, '2023-09-06', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.740 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (341,1,9,false),(341,2,14,false),(341,3,20,false),(341,4,23,false),(341,5,63,false),(341,6,1,true)
	        
2025-04-19 07:25:00.741 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1194
2025-04-19 07:25:00.744 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1194
2025-04-19 07:25:00.748 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.749 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1195
2025-04-19 07:25:00.749 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1195
2025-04-19 07:25:00.750 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1195, '2023-09-09', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.750 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (342,1,11,false),(342,2,19,false),(342,3,29,false),(342,4,63,false),(342,5,68,false),(342,6,25,true)
	        
2025-04-19 07:25:00.751 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1195
2025-04-19 07:25:00.754 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1195
2025-04-19 07:25:00.756 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.757 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1196
2025-04-19 07:25:00.757 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1196
2025-04-19 07:25:00.757 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1196, '2023-09-11', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.758 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (343,1,9,false),(343,2,25,false),(343,3,27,false),(343,4,53,false),(343,5,66,false),(343,6,5,true)
	        
2025-04-19 07:25:00.758 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1196
2025-04-19 07:25:00.761 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1196
2025-04-19 07:25:00.763 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.763 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1197
2025-04-19 07:25:00.763 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1197
2025-04-19 07:25:00.764 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1197, '2023-09-13', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.764 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (344,1,22,false),(344,2,30,false),(344,3,37,false),(344,4,44,false),(344,5,45,false),(344,6,18,true)
	        
2025-04-19 07:25:00.764 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1197
2025-04-19 07:25:00.767 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1197
2025-04-19 07:25:00.770 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.770 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1198
2025-04-19 07:25:00.771 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1198
2025-04-19 07:25:00.771 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1198, '2023-09-16', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.771 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (345,1,8,false),(345,2,11,false),(345,3,19,false),(345,4,24,false),(345,5,46,false),(345,6,5,true)
	        
2025-04-19 07:25:00.772 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1198
2025-04-19 07:25:00.774 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1198
2025-04-19 07:25:00.777 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.777 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1199
2025-04-19 07:25:00.777 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1199
2025-04-19 07:25:00.777 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1199, '2023-09-18', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.778 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (346,1,2,false),(346,2,21,false),(346,3,26,false),(346,4,40,false),(346,5,42,false),(346,6,9,true)
	        
2025-04-19 07:25:00.778 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1199
2025-04-19 07:25:00.781 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1199
2025-04-19 07:25:00.783 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.783 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1200
2025-04-19 07:25:00.784 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1200
2025-04-19 07:25:00.784 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1200, '2023-09-20', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.785 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (347,1,16,false),(347,2,27,false),(347,3,59,false),(347,4,62,false),(347,5,63,false),(347,6,23,true)
	        
2025-04-19 07:25:00.785 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1200
2025-04-19 07:25:00.788 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1200
2025-04-19 07:25:00.790 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.790 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1201
2025-04-19 07:25:00.790 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1201
2025-04-19 07:25:00.791 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1201, '2023-09-23', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.791 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (348,1,1,false),(348,2,12,false),(348,3,20,false),(348,4,33,false),(348,5,66,false),(348,6,21,true)
	        
2025-04-19 07:25:00.792 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1201
2025-04-19 07:25:00.794 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1201
2025-04-19 07:25:00.796 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.797 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1202
2025-04-19 07:25:00.797 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1202
2025-04-19 07:25:00.797 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1202, '2023-09-25', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.798 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (349,1,10,false),(349,2,12,false),(349,3,22,false),(349,4,36,false),(349,5,50,false),(349,6,4,true)
	        
2025-04-19 07:25:00.798 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1202
2025-04-19 07:25:00.801 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1202
2025-04-19 07:25:00.803 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.804 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1203
2025-04-19 07:25:00.804 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1203
2025-04-19 07:25:00.804 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1203, '2023-09-27', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.805 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (350,1,1,false),(350,2,7,false),(350,3,46,false),(350,4,47,false),(350,5,63,false),(350,6,7,true)
	        
2025-04-19 07:25:00.805 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1203
2025-04-19 07:25:00.808 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1203
2025-04-19 07:25:00.811 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.812 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1204
2025-04-19 07:25:00.812 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1204
2025-04-19 07:25:00.813 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1204, '2023-09-30', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.813 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (351,1,19,false),(351,2,30,false),(351,3,37,false),(351,4,44,false),(351,5,46,false),(351,6,22,true)
	        
2025-04-19 07:25:00.814 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1204
2025-04-19 07:25:00.818 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1204
2025-04-19 07:25:00.821 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.821 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1205
2025-04-19 07:25:00.822 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1205
2025-04-19 07:25:00.822 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1205, '2023-10-02', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.822 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (352,1,12,false),(352,2,26,false),(352,3,27,false),(352,4,43,false),(352,5,47,false),(352,6,5,true)
	        
2025-04-19 07:25:00.823 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1205
2025-04-19 07:25:00.825 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1205
2025-04-19 07:25:00.828 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.828 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1206
2025-04-19 07:25:00.829 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1206
2025-04-19 07:25:00.829 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1206, '2023-10-04', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.829 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (353,1,9,false),(353,2,35,false),(353,3,54,false),(353,4,63,false),(353,5,64,false),(353,6,1,true)
	        
2025-04-19 07:25:00.830 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1206
2025-04-19 07:25:00.832 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1206
2025-04-19 07:25:00.835 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.836 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1207
2025-04-19 07:25:00.836 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1207
2025-04-19 07:25:00.836 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1207, '2023-10-07', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.837 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (354,1,47,false),(354,2,54,false),(354,3,57,false),(354,4,60,false),(354,5,65,false),(354,6,19,true)
	        
2025-04-19 07:25:00.837 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1207
2025-04-19 07:25:00.840 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1207
2025-04-19 07:25:00.842 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.842 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1208
2025-04-19 07:25:00.843 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1208
2025-04-19 07:25:00.843 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1208, '2023-10-09', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.843 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (355,1,16,false),(355,2,34,false),(355,3,46,false),(355,4,55,false),(355,5,67,false),(355,6,14,true)
	        
2025-04-19 07:25:00.844 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1208
2025-04-19 07:25:00.847 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1208
2025-04-19 07:25:00.849 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.849 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1209
2025-04-19 07:25:00.850 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1209
2025-04-19 07:25:00.850 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1209, '2023-10-11', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.850 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (356,1,22,false),(356,2,24,false),(356,3,40,false),(356,4,52,false),(356,5,64,false),(356,6,10,true)
	        
2025-04-19 07:25:00.851 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1209
2025-04-19 07:25:00.854 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1209
2025-04-19 07:25:00.856 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.856 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1210
2025-04-19 07:25:00.857 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1210
2025-04-19 07:25:00.857 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1210, '2023-10-14', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.857 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (357,1,14,false),(357,2,16,false),(357,3,42,false),(357,4,48,false),(357,5,64,false),(357,6,14,true)
	        
2025-04-19 07:25:00.858 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1210
2025-04-19 07:25:00.861 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1210
2025-04-19 07:25:00.863 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.863 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1211
2025-04-19 07:25:00.863 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1211
2025-04-19 07:25:00.864 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1211, '2023-10-16', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.864 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (358,1,2,false),(358,2,27,false),(358,3,31,false),(358,4,44,false),(358,5,64,false),(358,6,18,true)
	        
2025-04-19 07:25:00.865 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1211
2025-04-19 07:25:00.868 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1211
2025-04-19 07:25:00.870 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.871 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1212
2025-04-19 07:25:00.871 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1212
2025-04-19 07:25:00.871 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1212, '2023-10-18', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.872 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (359,1,1,false),(359,2,4,false),(359,3,13,false),(359,4,35,false),(359,5,58,false),(359,6,24,true)
	        
2025-04-19 07:25:00.872 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1212
2025-04-19 07:25:00.875 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1212
2025-04-19 07:25:00.877 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.878 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1213
2025-04-19 07:25:00.878 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1213
2025-04-19 07:25:00.878 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1213, '2023-10-21', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.879 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (360,1,6,false),(360,2,15,false),(360,3,24,false),(360,4,67,false),(360,5,68,false),(360,6,11,true)
	        
2025-04-19 07:25:00.879 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1213
2025-04-19 07:25:00.882 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1213
2025-04-19 07:25:00.886 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.886 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1214
2025-04-19 07:25:00.887 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1214
2025-04-19 07:25:00.887 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1214, '2023-10-23', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.887 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (361,1,18,false),(361,2,21,false),(361,3,25,false),(361,4,46,false),(361,5,64,false),(361,6,21,true)
	        
2025-04-19 07:25:00.888 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1214
2025-04-19 07:25:00.890 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1214
2025-04-19 07:25:00.892 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.893 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1215
2025-04-19 07:25:00.893 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1215
2025-04-19 07:25:00.893 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1215, '2023-10-25', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.894 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (362,1,24,false),(362,2,27,false),(362,3,41,false),(362,4,53,false),(362,5,68,false),(362,6,2,true)
	        
2025-04-19 07:25:00.894 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1215
2025-04-19 07:25:00.897 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1215
2025-04-19 07:25:00.899 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.899 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1216
2025-04-19 07:25:00.899 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1216
2025-04-19 07:25:00.899 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1216, '2023-10-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.900 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (363,1,14,false),(363,2,24,false),(363,3,50,false),(363,4,59,false),(363,5,64,false),(363,6,2,true)
	        
2025-04-19 07:25:00.900 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1216
2025-04-19 07:25:00.903 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1216
2025-04-19 07:25:00.905 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.906 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1217
2025-04-19 07:25:00.906 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1217
2025-04-19 07:25:00.906 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1217, '2023-10-30', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.907 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (364,1,19,false),(364,2,22,false),(364,3,34,false),(364,4,66,false),(364,5,69,false),(364,6,5,true)
	        
2025-04-19 07:25:00.907 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1217
2025-04-19 07:25:00.910 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1217
2025-04-19 07:25:00.912 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.912 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1218
2025-04-19 07:25:00.913 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1218
2025-04-19 07:25:00.913 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1218, '2023-11-01', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.913 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (365,1,22,false),(365,2,26,false),(365,3,39,false),(365,4,47,false),(365,5,63,false),(365,6,12,true)
	        
2025-04-19 07:25:00.914 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1218
2025-04-19 07:25:00.916 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1218
2025-04-19 07:25:00.919 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.919 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1219
2025-04-19 07:25:00.920 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1219
2025-04-19 07:25:00.920 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1219, '2023-11-04', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.920 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (366,1,1,false),(366,2,28,false),(366,3,30,false),(366,4,34,false),(366,5,52,false),(366,6,6,true)
	        
2025-04-19 07:25:00.921 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1219
2025-04-19 07:25:00.923 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1219
2025-04-19 07:25:00.925 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.926 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1220
2025-04-19 07:25:00.926 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1220
2025-04-19 07:25:00.926 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1220, '2023-11-06', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.926 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (367,1,12,false),(367,2,25,false),(367,3,40,false),(367,4,59,false),(367,5,61,false),(367,6,26,true)
	        
2025-04-19 07:25:00.927 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1220
2025-04-19 07:25:00.930 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1220
2025-04-19 07:25:00.932 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.932 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1221
2025-04-19 07:25:00.932 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1221
2025-04-19 07:25:00.932 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1221, '2023-11-08', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.933 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (368,1,14,false),(368,2,21,false),(368,3,33,false),(368,4,39,false),(368,5,62,false),(368,6,20,true)
	        
2025-04-19 07:25:00.933 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1221
2025-04-19 07:25:00.938 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1221
2025-04-19 07:25:00.941 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.941 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1222
2025-04-19 07:25:00.941 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1222
2025-04-19 07:25:00.942 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1222, '2023-11-11', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.942 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (369,1,1,false),(369,2,12,false),(369,3,14,false),(369,4,24,false),(369,5,57,false),(369,6,7,true)
	        
2025-04-19 07:25:00.942 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1222
2025-04-19 07:25:00.945 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1222
2025-04-19 07:25:00.947 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.948 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1223
2025-04-19 07:25:00.948 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1223
2025-04-19 07:25:00.948 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1223, '2023-11-13', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.949 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (370,1,24,false),(370,2,33,false),(370,3,35,false),(370,4,37,false),(370,5,42,false),(370,6,21,true)
	        
2025-04-19 07:25:00.949 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1223
2025-04-19 07:25:00.952 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1223
2025-04-19 07:25:00.954 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.955 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1224
2025-04-19 07:25:00.955 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1224
2025-04-19 07:25:00.955 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1224, '2023-11-15', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.956 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (371,1,3,false),(371,2,4,false),(371,3,51,false),(371,4,53,false),(371,5,60,false),(371,6,6,true)
	        
2025-04-19 07:25:00.956 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1224
2025-04-19 07:25:00.959 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1224
2025-04-19 07:25:00.961 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.961 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1225
2025-04-19 07:25:00.962 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1225
2025-04-19 07:25:00.962 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1225, '2023-11-18', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.962 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (372,1,34,false),(372,2,50,false),(372,3,51,false),(372,4,61,false),(372,5,67,false),(372,6,20,true)
	        
2025-04-19 07:25:00.963 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1225
2025-04-19 07:25:00.965 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1225
2025-04-19 07:25:00.969 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.969 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1226
2025-04-19 07:25:00.969 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1226
2025-04-19 07:25:00.970 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1226, '2023-11-20', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.970 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (373,1,19,false),(373,2,26,false),(373,3,30,false),(373,4,39,false),(373,5,63,false),(373,6,13,true)
	        
2025-04-19 07:25:00.971 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1226
2025-04-19 07:25:00.974 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1226
2025-04-19 07:25:00.977 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.978 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1227
2025-04-19 07:25:00.979 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1227
2025-04-19 07:25:00.979 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1227, '2023-11-22', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.980 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (374,1,20,false),(374,2,24,false),(374,3,33,false),(374,4,39,false),(374,5,42,false),(374,6,21,true)
	        
2025-04-19 07:25:00.982 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1227
2025-04-19 07:25:00.990 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1227
2025-04-19 07:25:00.994 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:00.994 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1228
2025-04-19 07:25:00.995 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1228
2025-04-19 07:25:00.995 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1228, '2023-11-25', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:00.995 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (375,1,27,false),(375,2,33,false),(375,3,63,false),(375,4,66,false),(375,5,68,false),(375,6,9,true)
	        
2025-04-19 07:25:00.996 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1228
2025-04-19 07:25:00.999 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1228
2025-04-19 07:25:01.003 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:01.004 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1229
2025-04-19 07:25:01.004 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1229
2025-04-19 07:25:01.005 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1229, '2023-11-27', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:01.006 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (376,1,2,false),(376,2,21,false),(376,3,38,false),(376,4,61,false),(376,5,66,false),(376,6,12,true)
	        
2025-04-19 07:25:01.006 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1229
2025-04-19 07:25:01.011 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1229
2025-04-19 07:25:01.015 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:01.015 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1230
2025-04-19 07:25:01.016 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1230
2025-04-19 07:25:01.016 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1230, '2023-11-29', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:01.018 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (377,1,6,false),(377,2,47,false),(377,3,50,false),(377,4,61,false),(377,5,68,false),(377,6,4,true)
	        
2025-04-19 07:25:01.019 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1230
2025-04-19 07:25:01.023 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1230
2025-04-19 07:25:01.026 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:01.027 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1231
2025-04-19 07:25:01.028 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1231
2025-04-19 07:25:01.028 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1231, '2023-12-02', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:01.029 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (378,1,28,false),(378,2,35,false),(378,3,41,false),(378,4,47,false),(378,5,60,false),(378,6,3,true)
	        
2025-04-19 07:25:01.030 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1231
2025-04-19 07:25:01.040 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1231
2025-04-19 07:25:01.043 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:01.044 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1232
2025-04-19 07:25:01.044 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1232
2025-04-19 07:25:01.044 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1232, '2023-12-04', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:01.045 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (379,1,18,false),(379,2,19,false),(379,3,27,false),(379,4,28,false),(379,5,45,false),(379,6,9,true)
	        
2025-04-19 07:25:01.045 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1232
2025-04-19 07:25:01.054 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1232
2025-04-19 07:25:01.057 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:01.058 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1233
2025-04-19 07:25:01.059 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1233
2025-04-19 07:25:01.059 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1233, '2023-12-06', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:01.060 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (380,1,2,false),(380,2,12,false),(380,3,37,false),(380,4,56,false),(380,5,65,false),(380,6,21,true)
	        
2025-04-19 07:25:01.060 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1233
2025-04-19 07:25:01.064 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1233
2025-04-19 07:25:01.069 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:01.070 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1234
2025-04-19 07:25:01.070 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1234
2025-04-19 07:25:01.070 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1234, '2023-12-09', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:01.071 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (381,1,5,false),(381,2,25,false),(381,3,26,false),(381,4,40,false),(381,5,60,false),(381,6,1,true)
	        
2025-04-19 07:25:01.072 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1234
2025-04-19 07:25:01.076 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1234
2025-04-19 07:25:01.079 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:01.079 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1235
2025-04-19 07:25:01.079 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1235
2025-04-19 07:25:01.080 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1235, '2023-12-11', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:01.080 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (382,1,1,false),(382,2,24,false),(382,3,27,false),(382,4,31,false),(382,5,62,false),(382,6,20,true)
	        
2025-04-19 07:25:01.081 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1235
2025-04-19 07:25:01.083 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1235
2025-04-19 07:25:01.086 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:01.086 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1236
2025-04-19 07:25:01.087 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1236
2025-04-19 07:25:01.087 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1236, '2023-12-13', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:01.087 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (383,1,3,false),(383,2,8,false),(383,3,41,false),(383,4,56,false),(383,5,64,false),(383,6,18,true)
	        
2025-04-19 07:25:01.088 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1236
2025-04-19 07:25:01.091 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1236
2025-04-19 07:25:01.093 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:01.094 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1237
2025-04-19 07:25:01.094 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1237
2025-04-19 07:25:01.094 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1237, '2023-12-16', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:01.094 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (384,1,3,false),(384,2,9,false),(384,3,10,false),(384,4,20,false),(384,5,62,false),(384,6,25,true)
	        
2025-04-19 07:25:01.095 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1237
2025-04-19 07:25:01.097 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1237
2025-04-19 07:25:01.099 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:01.100 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1238
2025-04-19 07:25:01.100 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1238
2025-04-19 07:25:01.100 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1238, '2023-12-18', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:01.101 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (385,1,5,false),(385,2,8,false),(385,3,19,false),(385,4,34,false),(385,5,39,false),(385,6,26,true)
	        
2025-04-19 07:25:01.101 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1238
2025-04-19 07:25:01.105 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1238
2025-04-19 07:25:01.108 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:01.108 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1239
2025-04-19 07:25:01.108 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1239
2025-04-19 07:25:01.109 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1239, '2023-12-20', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:01.109 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (386,1,27,false),(386,2,35,false),(386,3,41,false),(386,4,56,false),(386,5,60,false),(386,6,16,true)
	        
2025-04-19 07:25:01.109 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1239
2025-04-19 07:25:01.112 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1239
2025-04-19 07:25:01.114 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:01.114 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1240
2025-04-19 07:25:01.114 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1240
2025-04-19 07:25:01.114 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1240, '2023-12-23', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:01.115 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (387,1,9,false),(387,2,14,false),(387,3,17,false),(387,4,18,false),(387,5,53,false),(387,6,6,true)
	        
2025-04-19 07:25:01.116 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1240
2025-04-19 07:25:01.120 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1240
2025-04-19 07:25:01.122 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:01.123 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1241
2025-04-19 07:25:01.123 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1241
2025-04-19 07:25:01.123 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1241, '2023-12-25', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:01.123 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (388,1,5,false),(388,2,12,false),(388,3,20,false),(388,4,24,false),(388,5,29,false),(388,6,4,true)
	        
2025-04-19 07:25:01.124 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1241
2025-04-19 07:25:01.127 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1241
2025-04-19 07:25:01.128 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:01.129 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1242
2025-04-19 07:25:01.129 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1242
2025-04-19 07:25:01.129 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1242, '2023-12-27', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:01.130 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (389,1,4,false),(389,2,11,false),(389,3,38,false),(389,4,51,false),(389,5,68,false),(389,6,5,true)
	        
2025-04-19 07:25:01.130 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1242
2025-04-19 07:25:01.134 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1242
2025-04-19 07:25:01.136 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:01.137 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1243
2025-04-19 07:25:01.137 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1243
2025-04-19 07:25:01.137 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1243, '2023-12-30', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:01.138 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (390,1,10,false),(390,2,11,false),(390,3,26,false),(390,4,27,false),(390,5,34,false),(390,6,7,true)
	        
2025-04-19 07:25:01.138 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1243
2025-04-19 07:25:01.141 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1243
2025-04-19 07:25:01.143 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:01.143 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1244
2025-04-19 07:25:01.143 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1244
2025-04-19 07:25:01.143 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1244, '2024-01-01', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:01.144 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (391,1,12,false),(391,2,21,false),(391,3,42,false),(391,4,44,false),(391,5,49,false),(391,6,1,true)
	        
2025-04-19 07:25:01.144 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1244
2025-04-19 07:25:01.147 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1244
2025-04-19 07:25:01.149 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:01.149 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1245
2025-04-19 07:25:01.149 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1245
2025-04-19 07:25:01.150 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1245, '2024-01-03', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:01.150 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (392,1,30,false),(392,2,31,false),(392,3,38,false),(392,4,48,false),(392,5,68,false),(392,6,8,true)
	        
2025-04-19 07:25:01.151 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1245
2025-04-19 07:25:01.154 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1245
2025-04-19 07:25:01.156 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:01.156 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1246
2025-04-19 07:25:01.157 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1246
2025-04-19 07:25:01.157 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1246, '2024-01-06', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:01.157 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (393,1,4,false),(393,2,31,false),(393,3,34,false),(393,4,38,false),(393,5,61,false),(393,6,13,true)
	        
2025-04-19 07:25:01.158 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1246
2025-04-19 07:25:01.160 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1246
2025-04-19 07:25:01.162 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:01.163 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1247
2025-04-19 07:25:01.163 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1247
2025-04-19 07:25:01.163 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1247, '2024-01-08', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:01.164 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (394,1,7,false),(394,2,17,false),(394,3,28,false),(394,4,40,false),(394,5,45,false),(394,6,2,true)
	        
2025-04-19 07:25:01.164 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1247
2025-04-19 07:25:01.169 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1247
2025-04-19 07:25:01.172 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:01.172 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1248
2025-04-19 07:25:01.172 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1248
2025-04-19 07:25:01.172 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1248, '2024-01-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:01.173 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (395,1,25,false),(395,2,40,false),(395,3,43,false),(395,4,48,false),(395,5,50,false),(395,6,11,true)
	        
2025-04-19 07:25:01.173 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1248
2025-04-19 07:25:01.176 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1248
2025-04-19 07:25:01.178 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:01.179 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1249
2025-04-19 07:25:01.179 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1249
2025-04-19 07:25:01.179 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1249, '2024-01-13', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:01.179 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (396,1,12,false),(396,2,31,false),(396,3,33,false),(396,4,51,false),(396,5,58,false),(396,6,15,true)
	        
2025-04-19 07:25:01.180 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1249
2025-04-19 07:25:01.182 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1249
2025-04-19 07:25:01.185 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:01.186 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1250
2025-04-19 07:25:01.186 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1250
2025-04-19 07:25:01.186 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1250, '2024-01-15', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:01.187 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (397,1,13,false),(397,2,30,false),(397,3,35,false),(397,4,49,false),(397,5,59,false),(397,6,4,true)
	        
2025-04-19 07:25:01.187 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1250
2025-04-19 07:25:01.190 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1250
2025-04-19 07:25:01.192 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:01.192 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1251
2025-04-19 07:25:01.192 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1251
2025-04-19 07:25:01.192 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1251, '2024-01-17', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:01.193 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (398,1,18,false),(398,2,22,false),(398,3,43,false),(398,4,61,false),(398,5,65,false),(398,6,2,true)
	        
2025-04-19 07:25:01.193 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1251
2025-04-19 07:25:01.196 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1251
2025-04-19 07:25:01.199 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:01.199 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1252
2025-04-19 07:25:01.200 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1252
2025-04-19 07:25:01.200 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1252, '2024-01-20', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:01.201 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (399,1,16,false),(399,2,31,false),(399,3,34,false),(399,4,47,false),(399,5,65,false),(399,6,10,true)
	        
2025-04-19 07:25:01.202 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1252
2025-04-19 07:25:01.205 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1252
2025-04-19 07:25:01.207 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:01.208 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1253
2025-04-19 07:25:01.208 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1253
2025-04-19 07:25:01.208 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1253, '2024-01-22', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:01.209 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (400,1,24,false),(400,2,25,false),(400,3,43,false),(400,4,52,false),(400,5,63,false),(400,6,21,true)
	        
2025-04-19 07:25:01.209 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1253
2025-04-19 07:25:01.212 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1253
2025-04-19 07:25:01.214 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:01.214 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1254
2025-04-19 07:25:01.215 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1254
2025-04-19 07:25:01.215 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1254, '2024-01-24', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:01.215 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (401,1,1,false),(401,2,5,false),(401,3,32,false),(401,4,50,false),(401,5,64,false),(401,6,8,true)
	        
2025-04-19 07:25:01.216 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1254
2025-04-19 07:25:01.219 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1254
2025-04-19 07:25:01.221 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:01.222 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1255
2025-04-19 07:25:01.222 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1255
2025-04-19 07:25:01.222 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1255, '2024-01-27', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:01.223 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (402,1,7,false),(402,2,38,false),(402,3,65,false),(402,4,66,false),(402,5,68,false),(402,6,21,true)
	        
2025-04-19 07:25:01.223 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1255
2025-04-19 07:25:01.232 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1255
2025-04-19 07:25:01.236 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:01.237 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1256
2025-04-19 07:25:01.237 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1256
2025-04-19 07:25:01.238 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1256, '2024-01-29', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:01.238 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (403,1,39,false),(403,2,41,false),(403,3,43,false),(403,4,49,false),(403,5,64,false),(403,6,4,true)
	        
2025-04-19 07:25:01.239 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1256
2025-04-19 07:25:01.242 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1256
2025-04-19 07:25:01.244 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:01.244 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1257
2025-04-19 07:25:01.245 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1257
2025-04-19 07:25:01.245 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1257, '2024-01-31', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:01.245 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (404,1,15,false),(404,2,18,false),(404,3,19,false),(404,4,41,false),(404,5,43,false),(404,6,14,true)
	        
2025-04-19 07:25:01.246 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1257
2025-04-19 07:25:01.248 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1257
2025-04-19 07:25:01.251 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:01.251 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1258
2025-04-19 07:25:01.251 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1258
2025-04-19 07:25:01.252 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1258, '2024-02-03', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:01.252 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (405,1,9,false),(405,2,11,false),(405,3,27,false),(405,4,59,false),(405,5,66,false),(405,6,19,true)
	        
2025-04-19 07:25:01.253 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1258
2025-04-19 07:25:01.255 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1258
2025-04-19 07:25:01.257 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:01.257 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1259
2025-04-19 07:25:01.258 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1259
2025-04-19 07:25:01.258 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1259, '2024-02-05', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:01.258 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (406,1,1,false),(406,2,2,false),(406,3,27,false),(406,4,30,false),(406,5,67,false),(406,6,9,true)
	        
2025-04-19 07:25:01.259 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1259
2025-04-19 07:25:01.261 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1259
2025-04-19 07:25:01.263 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:01.264 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1260
2025-04-19 07:25:01.264 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1260
2025-04-19 07:25:01.264 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1260, '2024-02-07', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:01.265 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (407,1,12,false),(407,2,21,false),(407,3,62,false),(407,4,67,false),(407,5,69,false),(407,6,17,true)
	        
2025-04-19 07:25:01.265 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1260
2025-04-19 07:25:01.268 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1260
2025-04-19 07:25:01.270 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:01.271 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1261
2025-04-19 07:25:01.271 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1261
2025-04-19 07:25:01.271 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1261, '2024-02-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:01.272 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (408,1,27,false),(408,2,28,false),(408,3,34,false),(408,4,37,false),(408,5,44,false),(408,6,8,true)
	        
2025-04-19 07:25:01.272 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1261
2025-04-19 07:25:01.275 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1261
2025-04-19 07:25:01.277 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:01.277 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1262
2025-04-19 07:25:01.277 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1262
2025-04-19 07:25:01.278 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1262, '2024-02-12', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:01.278 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (409,1,17,false),(409,2,36,false),(409,3,43,false),(409,4,53,false),(409,5,67,false),(409,6,14,true)
	        
2025-04-19 07:25:01.279 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1262
2025-04-19 07:25:01.281 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1262
2025-04-19 07:25:01.283 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:01.284 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1263
2025-04-19 07:25:01.284 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1263
2025-04-19 07:25:01.284 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1263, '2024-02-14', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:01.285 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (410,1,1,false),(410,2,4,false),(410,3,45,false),(410,4,47,false),(410,5,67,false),(410,6,18,true)
	        
2025-04-19 07:25:01.285 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1263
2025-04-19 07:25:01.288 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1263
2025-04-19 07:25:01.290 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:01.290 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1264
2025-04-19 07:25:01.290 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1264
2025-04-19 07:25:01.291 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1264, '2024-02-17', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:01.291 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (411,1,6,false),(411,2,28,false),(411,3,59,false),(411,4,62,false),(411,5,69,false),(411,6,21,true)
	        
2025-04-19 07:25:01.292 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1264
2025-04-19 07:25:01.294 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1264
2025-04-19 07:25:01.296 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:01.297 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1265
2025-04-19 07:25:01.297 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1265
2025-04-19 07:25:01.297 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1265, '2024-02-19', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:01.297 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (412,1,4,false),(412,2,23,false),(412,3,45,false),(412,4,50,false),(412,5,53,false),(412,6,17,true)
	        
2025-04-19 07:25:01.298 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1265
2025-04-19 07:25:01.301 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1265
2025-04-19 07:25:01.303 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:01.304 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1266
2025-04-19 07:25:01.304 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1266
2025-04-19 07:25:01.304 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1266, '2024-02-21', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:01.304 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (413,1,4,false),(413,2,27,false),(413,3,33,false),(413,4,41,false),(413,5,42,false),(413,6,14,true)
	        
2025-04-19 07:25:01.305 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1266
2025-04-19 07:25:01.308 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1266
2025-04-19 07:25:01.309 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:01.310 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1267
2025-04-19 07:25:01.310 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1267
2025-04-19 07:25:01.310 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1267, '2024-02-24', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:01.311 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (414,1,3,false),(414,2,8,false),(414,3,40,false),(414,4,53,false),(414,5,58,false),(414,6,3,true)
	        
2025-04-19 07:25:01.311 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1267
2025-04-19 07:25:01.314 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1267
2025-04-19 07:25:01.316 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:01.316 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1268
2025-04-19 07:25:01.316 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1268
2025-04-19 07:25:01.316 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1268, '2024-02-26', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:01.317 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (415,1,24,false),(415,2,29,false),(415,3,42,false),(415,4,51,false),(415,5,54,false),(415,6,16,true)
	        
2025-04-19 07:25:01.318 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1268
2025-04-19 07:25:01.320 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1268
2025-04-19 07:25:01.322 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:01.323 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1269
2025-04-19 07:25:01.323 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1269
2025-04-19 07:25:01.323 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1269, '2024-02-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:01.324 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (416,1,16,false),(416,2,26,false),(416,3,29,false),(416,4,38,false),(416,5,50,false),(416,6,6,true)
	        
2025-04-19 07:25:01.324 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1269
2025-04-19 07:25:01.327 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1269
2025-04-19 07:25:01.329 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:01.329 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1270
2025-04-19 07:25:01.329 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1270
2025-04-19 07:25:01.329 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1270, '2024-03-02', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:01.330 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (417,1,3,false),(417,2,18,false),(417,3,27,false),(417,4,36,false),(417,5,53,false),(417,6,12,true)
	        
2025-04-19 07:25:01.330 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1270
2025-04-19 07:25:01.333 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1270
2025-04-19 07:25:01.336 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:01.336 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1271
2025-04-19 07:25:01.336 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1271
2025-04-19 07:25:01.337 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1271, '2024-03-04', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:01.337 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (418,1,36,false),(418,2,42,false),(418,3,50,false),(418,4,52,false),(418,5,67,false),(418,6,26,true)
	        
2025-04-19 07:25:01.337 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1271
2025-04-19 07:25:01.341 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1271
2025-04-19 07:25:01.344 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 07:25:01.345 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1272
2025-04-19 07:25:01.345 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1272
2025-04-19 07:25:01.345 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1272, '2024-03-06', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 07:25:01.346 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (419,1,6,false),(419,2,19,false),(419,3,28,false),(419,4,44,false),(419,5,60,false),(419,6,10,true)
	        
2025-04-19 07:25:01.346 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1272
2025-04-19 07:25:01.349 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1272
2025-04-19 07:25:05.298 UTC [158] LOG:  statement: 
	        SELECT * FROM draws 
	        ORDER BY draw_number DESC 
	        LIMIT 20 OFFSET 0
	        
2025-04-19 07:25:08.343 UTC [158] LOG:  statement: 
	        SELECT * FROM draws 
	        ORDER BY draw_number DESC 
	        LIMIT 20 OFFSET 0
	        
2025-04-19 07:25:09.332 UTC [158] LOG:  statement: 
	        SELECT * FROM draws 
	        ORDER BY draw_number DESC 
	        LIMIT 20 OFFSET 0
	        
2025-04-19 07:25:09.497 UTC [158] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 07:25:09.819 UTC [158] DEBUG:  unexpected EOF on client connection
2025-04-19 07:25:11.942 UTC [174] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:25:11.951 UTC [174] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:25:11.959 UTC [174] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:25:11.959 UTC [174] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:25:11.963 UTC [174] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:25:11.967 UTC [174] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:25:11.971 UTC [174] DEBUG:  building index "pg_toast_19011_index" on table "pg_toast_19011" serially
2025-04-19 07:25:11.976 UTC [174] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:25:11.977 UTC [174] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:25:11.977 UTC [174] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:25:11.980 UTC [174] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:25:11.981 UTC [174] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:25:11.981 UTC [174] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:25:11.982 UTC [174] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:25:11.982 UTC [174] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:25:11.982 UTC [174] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:25:11.986 UTC [174] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:25:11.988 UTC [174] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:25:11.988 UTC [174] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:25:11.988 UTC [174] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:25:11.989 UTC [174] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:25:11.990 UTC [174] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:25:11.990 UTC [174] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:25:11.990 UTC [174] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:25:11.992 UTC [174] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:25:11.992 UTC [174] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:25:11.992 UTC [174] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:25:11.993 UTC [174] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:25:11.993 UTC [174] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:25:11.993 UTC [174] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:25:11.995 UTC [174] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:25:11.996 UTC [174] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:25:11.996 UTC [174] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:25:11.996 UTC [174] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:25:11.997 UTC [174] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:25:11.999 UTC [174] DEBUG:  building index "pg_toast_19072_index" on table "pg_toast_19072" serially
2025-04-19 07:25:12.000 UTC [174] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:25:12.000 UTC [174] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:25:12.000 UTC [174] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:25:12.001 UTC [174] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:25:12.002 UTC [174] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:25:12.003 UTC [174] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:25:12.003 UTC [174] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:25:12.003 UTC [174] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:25:12.004 UTC [174] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:25:12.004 UTC [174] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:25:12.005 UTC [174] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:25:12.006 UTC [174] DEBUG:  building index "pg_toast_19105_index" on table "pg_toast_19105" serially
2025-04-19 07:25:12.007 UTC [174] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:25:12.007 UTC [174] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:25:12.007 UTC [174] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:25:12.007 UTC [174] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:25:12.008 UTC [174] DEBUG:  building index "pg_toast_19116_index" on table "pg_toast_19116" serially
2025-04-19 07:25:12.009 UTC [174] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:25:12.009 UTC [174] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:25:12.009 UTC [174] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:25:12.011 UTC [174] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:25:12.012 UTC [174] DEBUG:  building index "pg_toast_19139_index" on table "pg_toast_19139" serially
2025-04-19 07:25:12.012 UTC [174] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:25:12.012 UTC [174] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:25:12.012 UTC [174] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:25:12.013 UTC [174] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:25:12.013 UTC [174] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:25:12.014 UTC [174] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:25:12.014 UTC [174] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:25:12.015 UTC [174] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:25:12.015 UTC [174] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:25:12.016 UTC [174] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:25:12.016 UTC [174] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:25:12.016 UTC [174] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:25:12.016 UTC [174] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:25:12.017 UTC [174] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:25:12.017 UTC [174] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:25:12.018 UTC [174] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:25:12.018 UTC [174] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:25:12.019 UTC [174] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:25:12.019 UTC [174] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:25:12.019 UTC [174] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:25:12.019 UTC [174] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:25:12.020 UTC [174] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:25:12.020 UTC [174] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:25:12.021 UTC [174] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:25:12.021 UTC [174] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:25:12.035 UTC [174] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:25:12.340 UTC [174] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$rybtevwE1Mneg1UCTEVlGuxbRiOtuOwqlbtkQkoOKmq6PjtxmdiFC')
	                RETURNING id, username, email
	                
2025-04-19 07:25:12.341 UTC [174] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:25:12.342 UTC [174] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:25:12.343 UTC [174] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 07:25:12.355 UTC [174] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:25:12.357 UTC [174] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:25:12.361 UTC [174] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:25:12.371 UTC [174] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:25:12.371 UTC [174] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:25:12.375 UTC [174] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:25:12.378 UTC [174] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:25:12.379 UTC [174] DEBUG:  building index "pg_toast_19175_index" on table "pg_toast_19175" serially
2025-04-19 07:25:12.380 UTC [174] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:25:12.380 UTC [174] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:25:12.380 UTC [174] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:25:12.381 UTC [174] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:25:12.381 UTC [174] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:25:12.381 UTC [174] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:25:12.381 UTC [174] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:25:12.381 UTC [174] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:25:12.381 UTC [174] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:25:12.382 UTC [174] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:25:12.383 UTC [174] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:25:12.383 UTC [174] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:25:12.383 UTC [174] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:25:12.384 UTC [174] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:25:12.385 UTC [174] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:25:12.385 UTC [174] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:25:12.385 UTC [174] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:25:12.386 UTC [174] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:25:12.387 UTC [174] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:25:12.387 UTC [174] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:25:12.388 UTC [174] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:25:12.388 UTC [174] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:25:12.388 UTC [174] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:25:12.389 UTC [174] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:25:12.390 UTC [174] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:25:12.390 UTC [174] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:25:12.390 UTC [174] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:25:12.391 UTC [174] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:25:12.392 UTC [174] DEBUG:  building index "pg_toast_19236_index" on table "pg_toast_19236" serially
2025-04-19 07:25:12.393 UTC [174] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:25:12.393 UTC [174] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:25:12.393 UTC [174] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:25:12.394 UTC [174] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:25:12.395 UTC [174] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:25:12.395 UTC [174] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:25:12.395 UTC [174] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:25:12.396 UTC [174] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:25:12.396 UTC [174] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:25:12.396 UTC [174] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:25:12.397 UTC [174] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:25:12.398 UTC [174] DEBUG:  building index "pg_toast_19269_index" on table "pg_toast_19269" serially
2025-04-19 07:25:12.399 UTC [174] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:25:12.399 UTC [174] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:25:12.399 UTC [174] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:25:12.399 UTC [174] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:25:12.401 UTC [174] DEBUG:  building index "pg_toast_19280_index" on table "pg_toast_19280" serially
2025-04-19 07:25:12.402 UTC [174] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:25:12.403 UTC [174] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:25:12.403 UTC [174] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:25:12.406 UTC [174] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:25:12.407 UTC [174] DEBUG:  building index "pg_toast_19303_index" on table "pg_toast_19303" serially
2025-04-19 07:25:12.408 UTC [174] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:25:12.408 UTC [174] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:25:12.408 UTC [174] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:25:12.409 UTC [174] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:25:12.409 UTC [174] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:25:12.410 UTC [174] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:25:12.410 UTC [174] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:25:12.410 UTC [174] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:25:12.410 UTC [174] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:25:12.411 UTC [174] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:25:12.411 UTC [174] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:25:12.412 UTC [174] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:25:12.412 UTC [174] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:25:12.413 UTC [174] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:25:12.413 UTC [174] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:25:12.414 UTC [174] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:25:12.414 UTC [174] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:25:12.414 UTC [174] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:25:12.414 UTC [174] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:25:12.415 UTC [174] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:25:12.415 UTC [174] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:25:12.416 UTC [174] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:25:12.416 UTC [174] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:25:12.417 UTC [174] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:25:12.417 UTC [174] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:25:12.425 UTC [174] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:25:12.707 UTC [174] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$ZGDCFBWKf5WX8hFN0Gq18OJ51C6WW.Df/xaKh8q6U0u8c.OK5UQp2')
	                RETURNING id, username, email
	                
2025-04-19 07:25:12.708 UTC [174] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:25:12.709 UTC [174] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:25:20.317 UTC [175] DEBUG:  autovacuum: processing database "postgres"
2025-04-19 07:25:25.464 UTC [174] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 07:25:25.746 UTC [174] DEBUG:  unexpected EOF on client connection
2025-04-19 07:25:27.683 UTC [183] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:25:27.689 UTC [183] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:25:27.695 UTC [183] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:25:27.695 UTC [183] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:25:27.702 UTC [183] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:25:27.707 UTC [183] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:25:27.711 UTC [183] DEBUG:  building index "pg_toast_19339_index" on table "pg_toast_19339" serially
2025-04-19 07:25:27.713 UTC [183] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:25:27.714 UTC [183] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:25:27.714 UTC [183] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:25:27.715 UTC [183] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:25:27.715 UTC [183] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:25:27.715 UTC [183] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:25:27.716 UTC [183] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:25:27.716 UTC [183] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:25:27.716 UTC [183] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:25:27.717 UTC [183] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:25:27.718 UTC [183] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:25:27.718 UTC [183] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:25:27.718 UTC [183] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:25:27.719 UTC [183] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:25:27.719 UTC [183] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:25:27.719 UTC [183] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:25:27.720 UTC [183] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:25:27.721 UTC [183] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:25:27.721 UTC [183] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:25:27.721 UTC [183] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:25:27.722 UTC [183] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:25:27.722 UTC [183] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:25:27.722 UTC [183] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:25:27.724 UTC [183] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:25:27.725 UTC [183] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:25:27.725 UTC [183] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:25:27.725 UTC [183] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:25:27.726 UTC [183] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:25:27.728 UTC [183] DEBUG:  building index "pg_toast_19400_index" on table "pg_toast_19400" serially
2025-04-19 07:25:27.729 UTC [183] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:25:27.729 UTC [183] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:25:27.729 UTC [183] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:25:27.730 UTC [183] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:25:27.731 UTC [183] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:25:27.731 UTC [183] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:25:27.731 UTC [183] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:25:27.732 UTC [183] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:25:27.733 UTC [183] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:25:27.733 UTC [183] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:25:27.734 UTC [183] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:25:27.735 UTC [183] DEBUG:  building index "pg_toast_19433_index" on table "pg_toast_19433" serially
2025-04-19 07:25:27.736 UTC [183] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:25:27.736 UTC [183] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:25:27.736 UTC [183] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:25:27.737 UTC [183] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:25:27.738 UTC [183] DEBUG:  building index "pg_toast_19444_index" on table "pg_toast_19444" serially
2025-04-19 07:25:27.739 UTC [183] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:25:27.739 UTC [183] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:25:27.739 UTC [183] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:25:27.742 UTC [183] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:25:27.744 UTC [183] DEBUG:  building index "pg_toast_19467_index" on table "pg_toast_19467" serially
2025-04-19 07:25:27.745 UTC [183] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:25:27.745 UTC [183] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:25:27.745 UTC [183] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:25:27.746 UTC [183] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:25:27.746 UTC [183] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:25:27.747 UTC [183] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:25:27.747 UTC [183] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:25:27.747 UTC [183] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:25:27.747 UTC [183] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:25:27.748 UTC [183] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:25:27.748 UTC [183] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:25:27.749 UTC [183] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:25:27.749 UTC [183] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:25:27.751 UTC [183] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:25:27.751 UTC [183] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:25:27.751 UTC [183] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:25:27.751 UTC [183] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:25:27.752 UTC [183] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:25:27.752 UTC [183] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:25:27.753 UTC [183] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:25:27.753 UTC [183] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:25:27.754 UTC [183] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:25:27.754 UTC [183] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:25:27.755 UTC [183] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:25:27.755 UTC [183] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:25:27.765 UTC [183] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:25:28.033 UTC [183] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$3neDIQ.7GLkzAq76iZx.XeRYTTLZx5cfCN4px7KF8LrLbwEEgQ04C')
	                RETURNING id, username, email
	                
2025-04-19 07:25:28.034 UTC [183] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:25:28.034 UTC [183] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:25:28.035 UTC [183] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 07:25:28.048 UTC [183] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:25:28.050 UTC [183] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:25:28.052 UTC [183] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:25:28.056 UTC [183] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:25:28.056 UTC [183] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:25:28.062 UTC [183] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:25:28.066 UTC [183] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:25:28.067 UTC [183] DEBUG:  building index "pg_toast_19503_index" on table "pg_toast_19503" serially
2025-04-19 07:25:28.068 UTC [183] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:25:28.068 UTC [183] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:25:28.068 UTC [183] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:25:28.069 UTC [183] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:25:28.069 UTC [183] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:25:28.069 UTC [183] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:25:28.070 UTC [183] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:25:28.070 UTC [183] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:25:28.070 UTC [183] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:25:28.070 UTC [183] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:25:28.071 UTC [183] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:25:28.071 UTC [183] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:25:28.071 UTC [183] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:25:28.072 UTC [183] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:25:28.072 UTC [183] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:25:28.072 UTC [183] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:25:28.073 UTC [183] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:25:28.073 UTC [183] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:25:28.074 UTC [183] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:25:28.074 UTC [183] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:25:28.075 UTC [183] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:25:28.075 UTC [183] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:25:28.075 UTC [183] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:25:28.076 UTC [183] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:25:28.077 UTC [183] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:25:28.077 UTC [183] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:25:28.077 UTC [183] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:25:28.078 UTC [183] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:25:28.079 UTC [183] DEBUG:  building index "pg_toast_19564_index" on table "pg_toast_19564" serially
2025-04-19 07:25:28.080 UTC [183] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:25:28.080 UTC [183] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:25:28.080 UTC [183] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:25:28.081 UTC [183] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:25:28.082 UTC [183] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:25:28.082 UTC [183] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:25:28.082 UTC [183] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:25:28.083 UTC [183] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:25:28.083 UTC [183] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:25:28.083 UTC [183] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:25:28.085 UTC [183] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:25:28.086 UTC [183] DEBUG:  building index "pg_toast_19597_index" on table "pg_toast_19597" serially
2025-04-19 07:25:28.086 UTC [183] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:25:28.087 UTC [183] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:25:28.087 UTC [183] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:25:28.087 UTC [183] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:25:28.088 UTC [183] DEBUG:  building index "pg_toast_19608_index" on table "pg_toast_19608" serially
2025-04-19 07:25:28.089 UTC [183] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:25:28.089 UTC [183] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:25:28.089 UTC [183] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:25:28.090 UTC [183] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:25:28.091 UTC [183] DEBUG:  building index "pg_toast_19631_index" on table "pg_toast_19631" serially
2025-04-19 07:25:28.092 UTC [183] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:25:28.092 UTC [183] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:25:28.092 UTC [183] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:25:28.093 UTC [183] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:25:28.093 UTC [183] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:25:28.094 UTC [183] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:25:28.094 UTC [183] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:25:28.094 UTC [183] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:25:28.094 UTC [183] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:25:28.095 UTC [183] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:25:28.095 UTC [183] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:25:28.096 UTC [183] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:25:28.096 UTC [183] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:25:28.097 UTC [183] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:25:28.097 UTC [183] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:25:28.098 UTC [183] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:25:28.098 UTC [183] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:25:28.100 UTC [183] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:25:28.100 UTC [183] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:25:28.101 UTC [183] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:25:28.101 UTC [183] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:25:28.102 UTC [183] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:25:28.102 UTC [183] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:25:28.104 UTC [183] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:25:28.104 UTC [183] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:25:28.112 UTC [183] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:25:28.377 UTC [183] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$EGBJ8CxCLzUj6LPykHgTMeaXe/VticJRQWHQmw7SH.a7c2YXv4Hau')
	                RETURNING id, username, email
	                
2025-04-19 07:25:28.380 UTC [183] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:25:28.381 UTC [183] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:25:41.458 UTC [183] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 07:25:41.759 UTC [183] DEBUG:  unexpected EOF on client connection
2025-04-19 07:25:43.722 UTC [199] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:25:43.733 UTC [199] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:25:43.747 UTC [199] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:25:43.747 UTC [199] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:25:43.758 UTC [199] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:25:43.764 UTC [199] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:25:43.768 UTC [199] DEBUG:  building index "pg_toast_19667_index" on table "pg_toast_19667" serially
2025-04-19 07:25:43.770 UTC [199] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:25:43.771 UTC [199] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:25:43.771 UTC [199] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:25:43.772 UTC [199] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:25:43.773 UTC [199] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:25:43.773 UTC [199] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:25:43.775 UTC [199] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:25:43.775 UTC [199] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:25:43.775 UTC [199] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:25:43.776 UTC [199] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:25:43.777 UTC [199] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:25:43.777 UTC [199] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:25:43.777 UTC [199] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:25:43.778 UTC [199] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:25:43.778 UTC [199] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:25:43.778 UTC [199] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:25:43.779 UTC [199] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:25:43.781 UTC [199] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:25:43.781 UTC [199] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:25:43.781 UTC [199] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:25:43.782 UTC [199] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:25:43.782 UTC [199] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:25:43.782 UTC [199] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:25:43.784 UTC [199] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:25:43.784 UTC [199] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:25:43.785 UTC [199] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:25:43.785 UTC [199] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:25:43.786 UTC [199] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:25:43.788 UTC [199] DEBUG:  building index "pg_toast_19728_index" on table "pg_toast_19728" serially
2025-04-19 07:25:43.789 UTC [199] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:25:43.789 UTC [199] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:25:43.789 UTC [199] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:25:43.790 UTC [199] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:25:43.792 UTC [199] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:25:43.792 UTC [199] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:25:43.792 UTC [199] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:25:43.793 UTC [199] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:25:43.793 UTC [199] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:25:43.793 UTC [199] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:25:43.794 UTC [199] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:25:43.795 UTC [199] DEBUG:  building index "pg_toast_19761_index" on table "pg_toast_19761" serially
2025-04-19 07:25:43.796 UTC [199] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:25:43.796 UTC [199] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:25:43.796 UTC [199] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:25:43.797 UTC [199] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:25:43.798 UTC [199] DEBUG:  building index "pg_toast_19772_index" on table "pg_toast_19772" serially
2025-04-19 07:25:43.799 UTC [199] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:25:43.799 UTC [199] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:25:43.799 UTC [199] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:25:43.800 UTC [199] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:25:43.801 UTC [199] DEBUG:  building index "pg_toast_19795_index" on table "pg_toast_19795" serially
2025-04-19 07:25:43.802 UTC [199] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:25:43.802 UTC [199] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:25:43.802 UTC [199] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:25:43.803 UTC [199] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:25:43.803 UTC [199] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:25:43.804 UTC [199] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:25:43.804 UTC [199] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:25:43.805 UTC [199] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:25:43.805 UTC [199] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:25:43.805 UTC [199] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:25:43.805 UTC [199] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:25:43.806 UTC [199] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:25:43.806 UTC [199] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:25:43.807 UTC [199] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:25:43.807 UTC [199] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:25:43.808 UTC [199] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:25:43.808 UTC [199] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:25:43.809 UTC [199] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:25:43.809 UTC [199] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:25:43.809 UTC [199] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:25:43.809 UTC [199] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:25:43.810 UTC [199] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:25:43.810 UTC [199] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:25:43.811 UTC [199] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:25:43.811 UTC [199] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:25:43.851 UTC [199] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:25:44.117 UTC [199] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$/nzDPuIHXCZhinNssx8eF.KVkIpfoyt0q2B6SJn6TCU8wIzd0ZlUy')
	                RETURNING id, username, email
	                
2025-04-19 07:25:44.118 UTC [199] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:25:44.118 UTC [199] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:25:44.119 UTC [199] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 07:25:44.129 UTC [199] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:25:44.131 UTC [199] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:25:44.133 UTC [199] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:25:44.138 UTC [199] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:25:44.138 UTC [199] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:25:44.146 UTC [199] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:25:44.152 UTC [199] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:25:44.153 UTC [199] DEBUG:  building index "pg_toast_19831_index" on table "pg_toast_19831" serially
2025-04-19 07:25:44.154 UTC [199] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:25:44.154 UTC [199] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:25:44.154 UTC [199] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:25:44.155 UTC [199] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:25:44.156 UTC [199] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:25:44.156 UTC [199] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:25:44.156 UTC [199] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:25:44.157 UTC [199] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:25:44.157 UTC [199] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:25:44.158 UTC [199] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:25:44.159 UTC [199] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:25:44.159 UTC [199] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:25:44.159 UTC [199] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:25:44.160 UTC [199] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:25:44.160 UTC [199] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:25:44.160 UTC [199] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:25:44.161 UTC [199] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:25:44.162 UTC [199] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:25:44.163 UTC [199] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:25:44.163 UTC [199] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:25:44.163 UTC [199] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:25:44.164 UTC [199] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:25:44.164 UTC [199] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:25:44.165 UTC [199] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:25:44.166 UTC [199] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:25:44.166 UTC [199] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:25:44.166 UTC [199] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:25:44.168 UTC [199] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:25:44.169 UTC [199] DEBUG:  building index "pg_toast_19892_index" on table "pg_toast_19892" serially
2025-04-19 07:25:44.170 UTC [199] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:25:44.171 UTC [199] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:25:44.171 UTC [199] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:25:44.172 UTC [199] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:25:44.173 UTC [199] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:25:44.173 UTC [199] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:25:44.174 UTC [199] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:25:44.174 UTC [199] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:25:44.175 UTC [199] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:25:44.175 UTC [199] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:25:44.176 UTC [199] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:25:44.178 UTC [199] DEBUG:  building index "pg_toast_19925_index" on table "pg_toast_19925" serially
2025-04-19 07:25:44.178 UTC [199] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:25:44.179 UTC [199] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:25:44.179 UTC [199] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:25:44.179 UTC [199] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:25:44.181 UTC [199] DEBUG:  building index "pg_toast_19936_index" on table "pg_toast_19936" serially
2025-04-19 07:25:44.182 UTC [199] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:25:44.182 UTC [199] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:25:44.182 UTC [199] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:25:44.183 UTC [199] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:25:44.184 UTC [199] DEBUG:  building index "pg_toast_19959_index" on table "pg_toast_19959" serially
2025-04-19 07:25:44.185 UTC [199] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:25:44.185 UTC [199] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:25:44.185 UTC [199] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:25:44.186 UTC [199] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:25:44.186 UTC [199] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:25:44.187 UTC [199] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:25:44.187 UTC [199] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:25:44.188 UTC [199] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:25:44.188 UTC [199] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:25:44.188 UTC [199] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:25:44.188 UTC [199] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:25:44.189 UTC [199] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:25:44.189 UTC [199] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:25:44.190 UTC [199] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:25:44.190 UTC [199] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:25:44.191 UTC [199] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:25:44.191 UTC [199] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:25:44.191 UTC [199] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:25:44.191 UTC [199] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:25:44.192 UTC [199] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:25:44.192 UTC [199] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:25:44.193 UTC [199] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:25:44.193 UTC [199] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:25:44.194 UTC [199] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:25:44.194 UTC [199] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:25:44.199 UTC [199] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:25:44.447 UTC [199] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$S4ShYuwLV7OQDLpDY7n7yeat5hZzEX3vi60w0qq1WSWzBvpeqvH3W')
	                RETURNING id, username, email
	                
2025-04-19 07:25:44.448 UTC [199] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:25:44.449 UTC [199] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:25:50.316 UTC [200] DEBUG:  autovacuum: processing database "powerball"
2025-04-19 07:25:50.582 UTC [200] DEBUG:  rehashing catalog cache id 14 for pg_opclass; 17 tups, 8 buckets
2025-04-19 07:25:57.449 UTC [199] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 07:25:57.755 UTC [199] DEBUG:  unexpected EOF on client connection
2025-04-19 07:25:59.595 UTC [208] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:25:59.602 UTC [208] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:25:59.613 UTC [208] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:25:59.613 UTC [208] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:25:59.620 UTC [208] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:25:59.625 UTC [208] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:25:59.627 UTC [208] DEBUG:  building index "pg_toast_19996_index" on table "pg_toast_19996" serially
2025-04-19 07:25:59.628 UTC [208] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:25:59.629 UTC [208] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:25:59.629 UTC [208] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:25:59.630 UTC [208] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:25:59.630 UTC [208] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:25:59.631 UTC [208] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:25:59.631 UTC [208] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:25:59.631 UTC [208] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:25:59.631 UTC [208] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:25:59.632 UTC [208] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:25:59.633 UTC [208] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:25:59.633 UTC [208] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:25:59.633 UTC [208] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:25:59.634 UTC [208] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:25:59.634 UTC [208] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:25:59.634 UTC [208] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:25:59.635 UTC [208] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:25:59.636 UTC [208] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:25:59.636 UTC [208] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:25:59.636 UTC [208] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:25:59.637 UTC [208] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:25:59.637 UTC [208] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:25:59.637 UTC [208] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:25:59.641 UTC [208] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:25:59.642 UTC [208] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:25:59.642 UTC [208] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:25:59.642 UTC [208] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:25:59.643 UTC [208] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:25:59.645 UTC [208] DEBUG:  building index "pg_toast_20057_index" on table "pg_toast_20057" serially
2025-04-19 07:25:59.645 UTC [208] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:25:59.646 UTC [208] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:25:59.646 UTC [208] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:25:59.647 UTC [208] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:25:59.648 UTC [208] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:25:59.648 UTC [208] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:25:59.648 UTC [208] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:25:59.649 UTC [208] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:25:59.649 UTC [208] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:25:59.649 UTC [208] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:25:59.651 UTC [208] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:25:59.652 UTC [208] DEBUG:  building index "pg_toast_20090_index" on table "pg_toast_20090" serially
2025-04-19 07:25:59.652 UTC [208] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:25:59.652 UTC [208] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:25:59.653 UTC [208] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:25:59.653 UTC [208] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:25:59.654 UTC [208] DEBUG:  building index "pg_toast_20101_index" on table "pg_toast_20101" serially
2025-04-19 07:25:59.655 UTC [208] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:25:59.655 UTC [208] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:25:59.655 UTC [208] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:25:59.656 UTC [208] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:25:59.657 UTC [208] DEBUG:  building index "pg_toast_20124_index" on table "pg_toast_20124" serially
2025-04-19 07:25:59.658 UTC [208] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:25:59.658 UTC [208] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:25:59.658 UTC [208] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:25:59.659 UTC [208] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:25:59.659 UTC [208] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:25:59.660 UTC [208] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:25:59.660 UTC [208] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:25:59.661 UTC [208] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:25:59.661 UTC [208] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:25:59.661 UTC [208] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:25:59.661 UTC [208] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:25:59.662 UTC [208] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:25:59.662 UTC [208] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:25:59.663 UTC [208] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:25:59.663 UTC [208] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:25:59.664 UTC [208] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:25:59.664 UTC [208] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:25:59.665 UTC [208] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:25:59.665 UTC [208] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:25:59.665 UTC [208] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:25:59.665 UTC [208] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:25:59.666 UTC [208] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:25:59.666 UTC [208] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:25:59.667 UTC [208] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:25:59.667 UTC [208] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:25:59.677 UTC [208] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:25:59.957 UTC [208] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$ORrlpib/il775qHVFU7SD.7D1c1BX4aUwThSWgzDnn/EOR4Iiy1cS')
	                RETURNING id, username, email
	                
2025-04-19 07:25:59.958 UTC [208] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:25:59.959 UTC [208] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:25:59.959 UTC [208] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 07:25:59.973 UTC [208] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:25:59.975 UTC [208] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:25:59.978 UTC [208] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:25:59.983 UTC [208] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:25:59.983 UTC [208] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:25:59.987 UTC [208] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:25:59.990 UTC [208] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:25:59.991 UTC [208] DEBUG:  building index "pg_toast_20160_index" on table "pg_toast_20160" serially
2025-04-19 07:25:59.992 UTC [208] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:25:59.992 UTC [208] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:25:59.992 UTC [208] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:25:59.993 UTC [208] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:25:59.993 UTC [208] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:25:59.993 UTC [208] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:25:59.994 UTC [208] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:25:59.994 UTC [208] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:25:59.994 UTC [208] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:25:59.995 UTC [208] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:25:59.996 UTC [208] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:25:59.996 UTC [208] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:25:59.996 UTC [208] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:25:59.997 UTC [208] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:25:59.997 UTC [208] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:25:59.997 UTC [208] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:25:59.998 UTC [208] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:25:59.998 UTC [208] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:25:59.999 UTC [208] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:25:59.999 UTC [208] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:25:59.999 UTC [208] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:26:00.000 UTC [208] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:26:00.000 UTC [208] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:26:00.001 UTC [208] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:26:00.001 UTC [208] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:26:00.002 UTC [208] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:26:00.002 UTC [208] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:26:00.003 UTC [208] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:26:00.005 UTC [208] DEBUG:  building index "pg_toast_20221_index" on table "pg_toast_20221" serially
2025-04-19 07:26:00.006 UTC [208] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:26:00.006 UTC [208] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:26:00.006 UTC [208] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:26:00.008 UTC [208] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:26:00.009 UTC [208] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:26:00.009 UTC [208] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:26:00.009 UTC [208] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:26:00.010 UTC [208] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:26:00.010 UTC [208] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:26:00.010 UTC [208] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:26:00.011 UTC [208] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:26:00.012 UTC [208] DEBUG:  building index "pg_toast_20254_index" on table "pg_toast_20254" serially
2025-04-19 07:26:00.013 UTC [208] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:26:00.013 UTC [208] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:26:00.013 UTC [208] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:26:00.014 UTC [208] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:26:00.015 UTC [208] DEBUG:  building index "pg_toast_20265_index" on table "pg_toast_20265" serially
2025-04-19 07:26:00.015 UTC [208] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:26:00.016 UTC [208] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:26:00.016 UTC [208] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:26:00.017 UTC [208] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:26:00.018 UTC [208] DEBUG:  building index "pg_toast_20288_index" on table "pg_toast_20288" serially
2025-04-19 07:26:00.018 UTC [208] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:26:00.018 UTC [208] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:26:00.018 UTC [208] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:26:00.019 UTC [208] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:26:00.019 UTC [208] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:26:00.020 UTC [208] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:26:00.020 UTC [208] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:26:00.022 UTC [208] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:26:00.022 UTC [208] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:26:00.023 UTC [208] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:26:00.023 UTC [208] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:26:00.026 UTC [208] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:26:00.026 UTC [208] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:26:00.027 UTC [208] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:26:00.027 UTC [208] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:26:00.028 UTC [208] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:26:00.028 UTC [208] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:26:00.029 UTC [208] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:26:00.029 UTC [208] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:26:00.030 UTC [208] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:26:00.030 UTC [208] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:26:00.031 UTC [208] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:26:00.031 UTC [208] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:26:00.032 UTC [208] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:26:00.032 UTC [208] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:26:00.037 UTC [208] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:26:00.289 UTC [208] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$lc4vMryKlHcLs3AvvWm8KuOkGWtNcQvg14Z8wxrODfabhzOlKO1KO')
	                RETURNING id, username, email
	                
2025-04-19 07:26:00.291 UTC [208] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:26:00.292 UTC [208] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:26:13.431 UTC [208] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 07:26:13.744 UTC [208] LOG:  statement: 
	        SELECT * FROM draws 
	        ORDER BY draw_number DESC 
	        LIMIT 20 OFFSET 0
	        
2025-04-19 07:26:13.858 UTC [208] DEBUG:  unexpected EOF on client connection
2025-04-19 07:26:15.995 UTC [223] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:26:16.001 UTC [223] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:26:16.008 UTC [223] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:26:16.008 UTC [223] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:26:16.011 UTC [223] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:26:16.015 UTC [223] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:26:16.018 UTC [223] DEBUG:  building index "pg_toast_20324_index" on table "pg_toast_20324" serially
2025-04-19 07:26:16.020 UTC [223] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:26:16.020 UTC [223] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:26:16.020 UTC [223] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:26:16.021 UTC [223] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:26:16.021 UTC [223] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:26:16.021 UTC [223] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:26:16.022 UTC [223] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:26:16.022 UTC [223] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:26:16.022 UTC [223] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:26:16.023 UTC [223] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:26:16.024 UTC [223] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:26:16.024 UTC [223] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:26:16.024 UTC [223] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:26:16.025 UTC [223] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:26:16.025 UTC [223] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:26:16.025 UTC [223] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:26:16.025 UTC [223] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:26:16.026 UTC [223] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:26:16.026 UTC [223] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:26:16.027 UTC [223] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:26:16.027 UTC [223] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:26:16.027 UTC [223] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:26:16.027 UTC [223] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:26:16.030 UTC [223] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:26:16.033 UTC [223] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:26:16.033 UTC [223] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:26:16.033 UTC [223] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:26:16.035 UTC [223] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:26:16.037 UTC [223] DEBUG:  building index "pg_toast_20385_index" on table "pg_toast_20385" serially
2025-04-19 07:26:16.038 UTC [223] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:26:16.038 UTC [223] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:26:16.038 UTC [223] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:26:16.039 UTC [223] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:26:16.041 UTC [223] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:26:16.041 UTC [223] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:26:16.041 UTC [223] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:26:16.042 UTC [223] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:26:16.042 UTC [223] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:26:16.042 UTC [223] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:26:16.043 UTC [223] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:26:16.044 UTC [223] DEBUG:  building index "pg_toast_20418_index" on table "pg_toast_20418" serially
2025-04-19 07:26:16.045 UTC [223] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:26:16.046 UTC [223] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:26:16.046 UTC [223] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:26:16.046 UTC [223] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:26:16.047 UTC [223] DEBUG:  building index "pg_toast_20429_index" on table "pg_toast_20429" serially
2025-04-19 07:26:16.048 UTC [223] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:26:16.049 UTC [223] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:26:16.049 UTC [223] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:26:16.050 UTC [223] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:26:16.051 UTC [223] DEBUG:  building index "pg_toast_20452_index" on table "pg_toast_20452" serially
2025-04-19 07:26:16.052 UTC [223] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:26:16.052 UTC [223] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:26:16.052 UTC [223] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:26:16.053 UTC [223] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:26:16.053 UTC [223] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:26:16.054 UTC [223] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:26:16.054 UTC [223] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:26:16.055 UTC [223] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:26:16.055 UTC [223] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:26:16.056 UTC [223] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:26:16.056 UTC [223] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:26:16.056 UTC [223] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:26:16.056 UTC [223] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:26:16.057 UTC [223] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:26:16.057 UTC [223] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:26:16.058 UTC [223] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:26:16.058 UTC [223] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:26:16.059 UTC [223] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:26:16.059 UTC [223] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:26:16.061 UTC [223] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:26:16.061 UTC [223] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:26:16.062 UTC [223] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:26:16.062 UTC [223] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:26:16.064 UTC [223] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:26:16.064 UTC [223] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:26:16.074 UTC [223] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:26:16.341 UTC [223] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$kjpMMiYeWcyRiIDwg40ee.Ki6eVsCH0wBEh.LGoAOaOxFcyFrJDhO')
	                RETURNING id, username, email
	                
2025-04-19 07:26:16.342 UTC [223] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:26:16.342 UTC [223] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:26:16.343 UTC [223] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 07:26:16.351 UTC [223] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:26:16.352 UTC [223] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:26:16.354 UTC [223] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:26:16.359 UTC [223] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:26:16.359 UTC [223] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:26:16.363 UTC [223] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:26:16.367 UTC [223] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:26:16.369 UTC [223] DEBUG:  building index "pg_toast_20488_index" on table "pg_toast_20488" serially
2025-04-19 07:26:16.370 UTC [223] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:26:16.370 UTC [223] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:26:16.370 UTC [223] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:26:16.371 UTC [223] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:26:16.371 UTC [223] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:26:16.371 UTC [223] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:26:16.372 UTC [223] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:26:16.372 UTC [223] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:26:16.372 UTC [223] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:26:16.373 UTC [223] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:26:16.374 UTC [223] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:26:16.374 UTC [223] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:26:16.374 UTC [223] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:26:16.375 UTC [223] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:26:16.375 UTC [223] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:26:16.375 UTC [223] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:26:16.376 UTC [223] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:26:16.378 UTC [223] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:26:16.379 UTC [223] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:26:16.379 UTC [223] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:26:16.382 UTC [223] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:26:16.383 UTC [223] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:26:16.383 UTC [223] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:26:16.386 UTC [223] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:26:16.388 UTC [223] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:26:16.388 UTC [223] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:26:16.388 UTC [223] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:26:16.390 UTC [223] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:26:16.391 UTC [223] DEBUG:  building index "pg_toast_20549_index" on table "pg_toast_20549" serially
2025-04-19 07:26:16.391 UTC [223] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:26:16.392 UTC [223] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:26:16.392 UTC [223] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:26:16.393 UTC [223] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:26:16.394 UTC [223] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:26:16.394 UTC [223] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:26:16.394 UTC [223] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:26:16.394 UTC [223] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:26:16.395 UTC [223] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:26:16.395 UTC [223] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:26:16.396 UTC [223] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:26:16.396 UTC [223] DEBUG:  building index "pg_toast_20582_index" on table "pg_toast_20582" serially
2025-04-19 07:26:16.397 UTC [223] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:26:16.397 UTC [223] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:26:16.397 UTC [223] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:26:16.398 UTC [223] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:26:16.399 UTC [223] DEBUG:  building index "pg_toast_20593_index" on table "pg_toast_20593" serially
2025-04-19 07:26:16.400 UTC [223] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:26:16.400 UTC [223] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:26:16.400 UTC [223] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:26:16.402 UTC [223] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:26:16.402 UTC [223] DEBUG:  building index "pg_toast_20616_index" on table "pg_toast_20616" serially
2025-04-19 07:26:16.403 UTC [223] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:26:16.403 UTC [223] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:26:16.403 UTC [223] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:26:16.404 UTC [223] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:26:16.404 UTC [223] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:26:16.405 UTC [223] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:26:16.405 UTC [223] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:26:16.406 UTC [223] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:26:16.406 UTC [223] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:26:16.406 UTC [223] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:26:16.406 UTC [223] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:26:16.407 UTC [223] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:26:16.407 UTC [223] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:26:16.408 UTC [223] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:26:16.408 UTC [223] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:26:16.409 UTC [223] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:26:16.409 UTC [223] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:26:16.410 UTC [223] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:26:16.410 UTC [223] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:26:16.411 UTC [223] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:26:16.411 UTC [223] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:26:16.412 UTC [223] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:26:16.412 UTC [223] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:26:16.412 UTC [223] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:26:16.413 UTC [223] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:26:16.419 UTC [223] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:26:16.669 UTC [223] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$zz50cqUdEygu7dWq1eqgCOcpqBGZY1a0ohXqxz0CWswxHdC.JAby6')
	                RETURNING id, username, email
	                
2025-04-19 07:26:16.670 UTC [223] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:26:16.670 UTC [223] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:26:20.330 UTC [224] DEBUG:  autovacuum: processing database "postgres"
2025-04-19 07:26:27.651 UTC [223] LOG:  statement: 
	        SELECT * FROM draws 
	        ORDER BY draw_number DESC 
	        LIMIT 20 OFFSET 0
	        
2025-04-19 07:26:28.384 UTC [223] LOG:  statement: 
	        SELECT * FROM draws 
	        ORDER BY draw_number DESC 
	        LIMIT 20 OFFSET 0
	        
2025-04-19 07:26:29.611 UTC [223] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 07:26:29.890 UTC [223] DEBUG:  unexpected EOF on client connection
2025-04-19 07:26:32.135 UTC [238] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:26:32.148 UTC [238] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:26:32.154 UTC [238] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:26:32.154 UTC [238] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:26:32.158 UTC [238] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:26:32.162 UTC [238] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:26:32.165 UTC [238] DEBUG:  building index "pg_toast_20652_index" on table "pg_toast_20652" serially
2025-04-19 07:26:32.168 UTC [238] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:26:32.169 UTC [238] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:26:32.169 UTC [238] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:26:32.172 UTC [238] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:26:32.173 UTC [238] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:26:32.173 UTC [238] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:26:32.175 UTC [238] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:26:32.175 UTC [238] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:26:32.175 UTC [238] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:26:32.176 UTC [238] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:26:32.178 UTC [238] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:26:32.178 UTC [238] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:26:32.178 UTC [238] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:26:32.179 UTC [238] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:26:32.179 UTC [238] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:26:32.179 UTC [238] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:26:32.180 UTC [238] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:26:32.181 UTC [238] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:26:32.181 UTC [238] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:26:32.181 UTC [238] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:26:32.182 UTC [238] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:26:32.182 UTC [238] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:26:32.182 UTC [238] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:26:32.184 UTC [238] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:26:32.185 UTC [238] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:26:32.186 UTC [238] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:26:32.186 UTC [238] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:26:32.187 UTC [238] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:26:32.189 UTC [238] DEBUG:  building index "pg_toast_20713_index" on table "pg_toast_20713" serially
2025-04-19 07:26:32.190 UTC [238] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:26:32.190 UTC [238] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:26:32.190 UTC [238] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:26:32.191 UTC [238] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:26:32.193 UTC [238] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:26:32.193 UTC [238] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:26:32.193 UTC [238] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:26:32.194 UTC [238] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:26:32.194 UTC [238] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:26:32.194 UTC [238] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:26:32.195 UTC [238] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:26:32.196 UTC [238] DEBUG:  building index "pg_toast_20746_index" on table "pg_toast_20746" serially
2025-04-19 07:26:32.197 UTC [238] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:26:32.197 UTC [238] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:26:32.197 UTC [238] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:26:32.198 UTC [238] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:26:32.199 UTC [238] DEBUG:  building index "pg_toast_20757_index" on table "pg_toast_20757" serially
2025-04-19 07:26:32.200 UTC [238] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:26:32.200 UTC [238] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:26:32.200 UTC [238] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:26:32.202 UTC [238] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:26:32.203 UTC [238] DEBUG:  building index "pg_toast_20780_index" on table "pg_toast_20780" serially
2025-04-19 07:26:32.204 UTC [238] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:26:32.205 UTC [238] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:26:32.205 UTC [238] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:26:32.207 UTC [238] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:26:32.207 UTC [238] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:26:32.208 UTC [238] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:26:32.208 UTC [238] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:26:32.209 UTC [238] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:26:32.209 UTC [238] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:26:32.210 UTC [238] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:26:32.210 UTC [238] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:26:32.211 UTC [238] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:26:32.211 UTC [238] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:26:32.212 UTC [238] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:26:32.212 UTC [238] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:26:32.213 UTC [238] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:26:32.213 UTC [238] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:26:32.213 UTC [238] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:26:32.214 UTC [238] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:26:32.214 UTC [238] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:26:32.214 UTC [238] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:26:32.215 UTC [238] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:26:32.215 UTC [238] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:26:32.216 UTC [238] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:26:32.216 UTC [238] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:26:32.226 UTC [238] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:26:32.519 UTC [238] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$PtoBLEPlz2Qex7GzD3AKSetI1kRpIplyIDO.vCVCZJIartVzQ6rdG')
	                RETURNING id, username, email
	                
2025-04-19 07:26:32.520 UTC [238] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:26:32.520 UTC [238] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:26:32.522 UTC [238] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 07:26:32.557 UTC [238] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:26:32.559 UTC [238] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:26:32.563 UTC [238] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:26:32.573 UTC [238] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:26:32.573 UTC [238] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:26:32.576 UTC [238] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:26:32.579 UTC [238] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:26:32.580 UTC [238] DEBUG:  building index "pg_toast_20816_index" on table "pg_toast_20816" serially
2025-04-19 07:26:32.581 UTC [238] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:26:32.581 UTC [238] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:26:32.581 UTC [238] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:26:32.582 UTC [238] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:26:32.582 UTC [238] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:26:32.582 UTC [238] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:26:32.583 UTC [238] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:26:32.583 UTC [238] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:26:32.583 UTC [238] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:26:32.584 UTC [238] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:26:32.585 UTC [238] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:26:32.585 UTC [238] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:26:32.585 UTC [238] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:26:32.586 UTC [238] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:26:32.586 UTC [238] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:26:32.586 UTC [238] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:26:32.586 UTC [238] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:26:32.587 UTC [238] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:26:32.588 UTC [238] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:26:32.588 UTC [238] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:26:32.588 UTC [238] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:26:32.588 UTC [238] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:26:32.588 UTC [238] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:26:32.590 UTC [238] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:26:32.591 UTC [238] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:26:32.591 UTC [238] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:26:32.591 UTC [238] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:26:32.592 UTC [238] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:26:32.593 UTC [238] DEBUG:  building index "pg_toast_20877_index" on table "pg_toast_20877" serially
2025-04-19 07:26:32.594 UTC [238] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:26:32.594 UTC [238] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:26:32.594 UTC [238] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:26:32.595 UTC [238] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:26:32.596 UTC [238] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:26:32.596 UTC [238] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:26:32.596 UTC [238] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:26:32.597 UTC [238] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:26:32.597 UTC [238] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:26:32.597 UTC [238] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:26:32.598 UTC [238] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:26:32.599 UTC [238] DEBUG:  building index "pg_toast_20910_index" on table "pg_toast_20910" serially
2025-04-19 07:26:32.600 UTC [238] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:26:32.600 UTC [238] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:26:32.600 UTC [238] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:26:32.601 UTC [238] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:26:32.602 UTC [238] DEBUG:  building index "pg_toast_20921_index" on table "pg_toast_20921" serially
2025-04-19 07:26:32.603 UTC [238] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:26:32.603 UTC [238] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:26:32.603 UTC [238] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:26:32.604 UTC [238] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:26:32.605 UTC [238] DEBUG:  building index "pg_toast_20944_index" on table "pg_toast_20944" serially
2025-04-19 07:26:32.606 UTC [238] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:26:32.606 UTC [238] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:26:32.606 UTC [238] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:26:32.607 UTC [238] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:26:32.607 UTC [238] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:26:32.608 UTC [238] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:26:32.608 UTC [238] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:26:32.609 UTC [238] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:26:32.609 UTC [238] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:26:32.611 UTC [238] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:26:32.611 UTC [238] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:26:32.613 UTC [238] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:26:32.613 UTC [238] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:26:32.614 UTC [238] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:26:32.614 UTC [238] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:26:32.615 UTC [238] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:26:32.615 UTC [238] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:26:32.616 UTC [238] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:26:32.616 UTC [238] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:26:32.618 UTC [238] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:26:32.618 UTC [238] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:26:32.619 UTC [238] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:26:32.619 UTC [238] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:26:32.620 UTC [238] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:26:32.620 UTC [238] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:26:32.626 UTC [238] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:26:32.891 UTC [238] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$dCPUk1IAeDU472TZMF2t7uBnz4400KyX9n/w6hoK4wY9SY4wB4isC')
	                RETURNING id, username, email
	                
2025-04-19 07:26:32.893 UTC [238] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:26:32.893 UTC [238] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:26:45.473 UTC [238] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 07:26:45.780 UTC [238] DEBUG:  unexpected EOF on client connection
2025-04-19 07:26:48.914 UTC [246] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:26:48.934 UTC [246] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:26:48.951 UTC [246] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:26:48.951 UTC [246] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:26:48.959 UTC [246] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:26:48.979 UTC [246] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:26:48.984 UTC [246] DEBUG:  building index "pg_toast_20980_index" on table "pg_toast_20980" serially
2025-04-19 07:26:48.987 UTC [246] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:26:48.988 UTC [246] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:26:48.988 UTC [246] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:26:48.989 UTC [246] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:26:48.989 UTC [246] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:26:48.989 UTC [246] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:26:48.990 UTC [246] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:26:48.990 UTC [246] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:26:48.991 UTC [246] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:26:48.993 UTC [246] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:26:49.000 UTC [246] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:26:49.000 UTC [246] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:26:49.000 UTC [246] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:26:49.002 UTC [246] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:26:49.002 UTC [246] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:26:49.002 UTC [246] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:26:49.005 UTC [246] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:26:49.017 UTC [246] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:26:49.018 UTC [246] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:26:49.018 UTC [246] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:26:49.024 UTC [246] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:26:49.025 UTC [246] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:26:49.025 UTC [246] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:26:49.051 UTC [246] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:26:49.059 UTC [246] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:26:49.071 UTC [246] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:26:49.071 UTC [246] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:26:49.090 UTC [246] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:26:49.095 UTC [246] DEBUG:  building index "pg_toast_21041_index" on table "pg_toast_21041" serially
2025-04-19 07:26:49.097 UTC [246] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:26:49.097 UTC [246] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:26:49.097 UTC [246] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:26:49.099 UTC [246] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:26:49.101 UTC [246] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:26:49.101 UTC [246] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:26:49.101 UTC [246] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:26:49.102 UTC [246] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:26:49.102 UTC [246] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:26:49.102 UTC [246] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:26:49.104 UTC [246] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:26:49.107 UTC [246] DEBUG:  building index "pg_toast_21074_index" on table "pg_toast_21074" serially
2025-04-19 07:26:49.113 UTC [246] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:26:49.116 UTC [246] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:26:49.116 UTC [246] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:26:49.126 UTC [246] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:26:49.132 UTC [246] DEBUG:  building index "pg_toast_21085_index" on table "pg_toast_21085" serially
2025-04-19 07:26:49.136 UTC [246] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:26:49.139 UTC [246] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:26:49.139 UTC [246] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:26:49.143 UTC [246] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:26:49.145 UTC [246] DEBUG:  building index "pg_toast_21108_index" on table "pg_toast_21108" serially
2025-04-19 07:26:49.150 UTC [246] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:26:49.152 UTC [246] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:26:49.152 UTC [246] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:26:49.154 UTC [246] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:26:49.154 UTC [246] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:26:49.155 UTC [246] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:26:49.155 UTC [246] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:26:49.157 UTC [246] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:26:49.157 UTC [246] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:26:49.159 UTC [246] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:26:49.159 UTC [246] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:26:49.160 UTC [246] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:26:49.160 UTC [246] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:26:49.161 UTC [246] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:26:49.162 UTC [246] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:26:49.166 UTC [246] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:26:49.167 UTC [246] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:26:49.174 UTC [246] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:26:49.174 UTC [246] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:26:49.181 UTC [246] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:26:49.181 UTC [246] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:26:49.184 UTC [246] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:26:49.184 UTC [246] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:26:49.197 UTC [246] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:26:49.197 UTC [246] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:26:49.219 UTC [246] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:26:49.603 UTC [246] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$B8F4hxQ8UPZBd.lmKLLIR.hKuves/KIta.yhL8InuW4LEAxAfem6.')
	                RETURNING id, username, email
	                
2025-04-19 07:26:49.606 UTC [246] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:26:49.607 UTC [246] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:26:49.609 UTC [246] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 07:26:49.636 UTC [246] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:26:49.660 UTC [246] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:26:49.671 UTC [246] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:26:49.679 UTC [246] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:26:49.679 UTC [246] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:26:49.684 UTC [246] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:26:49.688 UTC [246] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:26:49.690 UTC [246] DEBUG:  building index "pg_toast_21144_index" on table "pg_toast_21144" serially
2025-04-19 07:26:49.692 UTC [246] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:26:49.692 UTC [246] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:26:49.692 UTC [246] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:26:49.693 UTC [246] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:26:49.693 UTC [246] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:26:49.693 UTC [246] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:26:49.694 UTC [246] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:26:49.694 UTC [246] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:26:49.694 UTC [246] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:26:49.696 UTC [246] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:26:49.698 UTC [246] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:26:49.699 UTC [246] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:26:49.699 UTC [246] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:26:49.700 UTC [246] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:26:49.701 UTC [246] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:26:49.701 UTC [246] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:26:49.702 UTC [246] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:26:49.703 UTC [246] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:26:49.703 UTC [246] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:26:49.703 UTC [246] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:26:49.704 UTC [246] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:26:49.705 UTC [246] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:26:49.705 UTC [246] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:26:49.706 UTC [246] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:26:49.708 UTC [246] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:26:49.708 UTC [246] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:26:49.708 UTC [246] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:26:49.709 UTC [246] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:26:49.711 UTC [246] DEBUG:  building index "pg_toast_21205_index" on table "pg_toast_21205" serially
2025-04-19 07:26:49.712 UTC [246] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:26:49.712 UTC [246] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:26:49.712 UTC [246] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:26:49.713 UTC [246] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:26:49.715 UTC [246] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:26:49.715 UTC [246] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:26:49.715 UTC [246] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:26:49.716 UTC [246] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:26:49.716 UTC [246] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:26:49.716 UTC [246] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:26:49.717 UTC [246] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:26:49.719 UTC [246] DEBUG:  building index "pg_toast_21238_index" on table "pg_toast_21238" serially
2025-04-19 07:26:49.719 UTC [246] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:26:49.719 UTC [246] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:26:49.720 UTC [246] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:26:49.720 UTC [246] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:26:49.722 UTC [246] DEBUG:  building index "pg_toast_21249_index" on table "pg_toast_21249" serially
2025-04-19 07:26:49.722 UTC [246] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:26:49.722 UTC [246] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:26:49.722 UTC [246] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:26:49.725 UTC [246] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:26:49.727 UTC [246] DEBUG:  building index "pg_toast_21272_index" on table "pg_toast_21272" serially
2025-04-19 07:26:49.728 UTC [246] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:26:49.728 UTC [246] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:26:49.728 UTC [246] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:26:49.729 UTC [246] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:26:49.729 UTC [246] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:26:49.730 UTC [246] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:26:49.730 UTC [246] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:26:49.731 UTC [246] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:26:49.731 UTC [246] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:26:49.731 UTC [246] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:26:49.731 UTC [246] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:26:49.732 UTC [246] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:26:49.732 UTC [246] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:26:49.733 UTC [246] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:26:49.733 UTC [246] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:26:49.734 UTC [246] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:26:49.734 UTC [246] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:26:49.735 UTC [246] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:26:49.735 UTC [246] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:26:49.736 UTC [246] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:26:49.736 UTC [246] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:26:49.737 UTC [246] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:26:49.737 UTC [246] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:26:49.738 UTC [246] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:26:49.738 UTC [246] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:26:49.747 UTC [246] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:26:49.997 UTC [246] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$3lmmr87/s7Rx1zyk2ZynjuZgToOw/lQX1F/Y7Ysc25Yy/LYWy/FSC')
	                RETURNING id, username, email
	                
2025-04-19 07:26:49.998 UTC [246] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:26:49.999 UTC [246] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:26:50.309 UTC [247] DEBUG:  autovacuum: processing database "powerball"
2025-04-19 07:26:50.552 UTC [247] DEBUG:  rehashing catalog cache id 14 for pg_opclass; 17 tups, 8 buckets
2025-04-19 07:27:01.498 UTC [246] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 07:27:01.804 UTC [246] DEBUG:  unexpected EOF on client connection
2025-04-19 07:27:04.063 UTC [262] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:27:04.075 UTC [262] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:27:04.081 UTC [262] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:27:04.081 UTC [262] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:27:04.085 UTC [262] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:27:04.092 UTC [262] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:27:04.097 UTC [262] DEBUG:  building index "pg_toast_21309_index" on table "pg_toast_21309" serially
2025-04-19 07:27:04.099 UTC [262] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:27:04.099 UTC [262] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:27:04.099 UTC [262] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:27:04.100 UTC [262] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:27:04.100 UTC [262] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:27:04.100 UTC [262] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:27:04.101 UTC [262] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:27:04.101 UTC [262] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:27:04.101 UTC [262] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:27:04.102 UTC [262] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:27:04.103 UTC [262] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:27:04.104 UTC [262] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:27:04.104 UTC [262] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:27:04.105 UTC [262] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:27:04.105 UTC [262] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:27:04.105 UTC [262] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:27:04.106 UTC [262] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:27:04.107 UTC [262] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:27:04.107 UTC [262] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:27:04.107 UTC [262] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:27:04.108 UTC [262] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:27:04.108 UTC [262] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:27:04.108 UTC [262] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:27:04.110 UTC [262] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:27:04.111 UTC [262] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:27:04.111 UTC [262] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:27:04.111 UTC [262] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:27:04.112 UTC [262] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:27:04.114 UTC [262] DEBUG:  building index "pg_toast_21370_index" on table "pg_toast_21370" serially
2025-04-19 07:27:04.115 UTC [262] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:27:04.115 UTC [262] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:27:04.115 UTC [262] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:27:04.116 UTC [262] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:27:04.117 UTC [262] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:27:04.118 UTC [262] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:27:04.118 UTC [262] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:27:04.118 UTC [262] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:27:04.118 UTC [262] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:27:04.118 UTC [262] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:27:04.119 UTC [262] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:27:04.121 UTC [262] DEBUG:  building index "pg_toast_21403_index" on table "pg_toast_21403" serially
2025-04-19 07:27:04.121 UTC [262] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:27:04.122 UTC [262] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:27:04.122 UTC [262] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:27:04.122 UTC [262] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:27:04.123 UTC [262] DEBUG:  building index "pg_toast_21414_index" on table "pg_toast_21414" serially
2025-04-19 07:27:04.124 UTC [262] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:27:04.125 UTC [262] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:27:04.125 UTC [262] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:27:04.126 UTC [262] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:27:04.127 UTC [262] DEBUG:  building index "pg_toast_21437_index" on table "pg_toast_21437" serially
2025-04-19 07:27:04.128 UTC [262] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:27:04.128 UTC [262] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:27:04.128 UTC [262] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:27:04.129 UTC [262] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:27:04.129 UTC [262] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:27:04.130 UTC [262] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:27:04.130 UTC [262] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:27:04.131 UTC [262] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:27:04.131 UTC [262] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:27:04.132 UTC [262] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:27:04.132 UTC [262] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:27:04.132 UTC [262] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:27:04.132 UTC [262] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:27:04.133 UTC [262] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:27:04.133 UTC [262] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:27:04.134 UTC [262] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:27:04.134 UTC [262] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:27:04.135 UTC [262] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:27:04.135 UTC [262] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:27:04.136 UTC [262] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:27:04.136 UTC [262] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:27:04.136 UTC [262] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:27:04.136 UTC [262] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:27:04.137 UTC [262] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:27:04.137 UTC [262] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:27:04.151 UTC [262] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:27:04.420 UTC [262] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$O0FFN.cQDobc1BKNr2S/CumCTF2TEjgjknP7wo4YUXN41YHQRfKGq')
	                RETURNING id, username, email
	                
2025-04-19 07:27:04.421 UTC [262] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:27:04.421 UTC [262] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:27:04.422 UTC [262] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 07:27:04.430 UTC [262] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:27:04.431 UTC [262] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:27:04.433 UTC [262] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:27:04.438 UTC [262] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:27:04.438 UTC [262] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:27:04.441 UTC [262] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:27:04.443 UTC [262] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:27:04.444 UTC [262] DEBUG:  building index "pg_toast_21473_index" on table "pg_toast_21473" serially
2025-04-19 07:27:04.445 UTC [262] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:27:04.446 UTC [262] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:27:04.446 UTC [262] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:27:04.446 UTC [262] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:27:04.446 UTC [262] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:27:04.446 UTC [262] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:27:04.447 UTC [262] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:27:04.447 UTC [262] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:27:04.447 UTC [262] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:27:04.448 UTC [262] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:27:04.449 UTC [262] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:27:04.449 UTC [262] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:27:04.449 UTC [262] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:27:04.449 UTC [262] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:27:04.450 UTC [262] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:27:04.450 UTC [262] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:27:04.450 UTC [262] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:27:04.451 UTC [262] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:27:04.451 UTC [262] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:27:04.451 UTC [262] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:27:04.452 UTC [262] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:27:04.452 UTC [262] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:27:04.452 UTC [262] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:27:04.453 UTC [262] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:27:04.454 UTC [262] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:27:04.454 UTC [262] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:27:04.454 UTC [262] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:27:04.455 UTC [262] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:27:04.456 UTC [262] DEBUG:  building index "pg_toast_21534_index" on table "pg_toast_21534" serially
2025-04-19 07:27:04.457 UTC [262] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:27:04.457 UTC [262] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:27:04.457 UTC [262] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:27:04.458 UTC [262] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:27:04.458 UTC [262] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:27:04.459 UTC [262] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:27:04.459 UTC [262] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:27:04.459 UTC [262] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:27:04.459 UTC [262] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:27:04.459 UTC [262] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:27:04.460 UTC [262] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:27:04.462 UTC [262] DEBUG:  building index "pg_toast_21567_index" on table "pg_toast_21567" serially
2025-04-19 07:27:04.462 UTC [262] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:27:04.463 UTC [262] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:27:04.463 UTC [262] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:27:04.463 UTC [262] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:27:04.464 UTC [262] DEBUG:  building index "pg_toast_21578_index" on table "pg_toast_21578" serially
2025-04-19 07:27:04.465 UTC [262] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:27:04.465 UTC [262] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:27:04.465 UTC [262] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:27:04.467 UTC [262] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:27:04.469 UTC [262] DEBUG:  building index "pg_toast_21601_index" on table "pg_toast_21601" serially
2025-04-19 07:27:04.470 UTC [262] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:27:04.470 UTC [262] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:27:04.470 UTC [262] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:27:04.471 UTC [262] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:27:04.471 UTC [262] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:27:04.471 UTC [262] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:27:04.471 UTC [262] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:27:04.472 UTC [262] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:27:04.472 UTC [262] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:27:04.473 UTC [262] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:27:04.473 UTC [262] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:27:04.474 UTC [262] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:27:04.474 UTC [262] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:27:04.474 UTC [262] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:27:04.474 UTC [262] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:27:04.475 UTC [262] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:27:04.475 UTC [262] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:27:04.476 UTC [262] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:27:04.476 UTC [262] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:27:04.477 UTC [262] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:27:04.477 UTC [262] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:27:04.477 UTC [262] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:27:04.477 UTC [262] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:27:04.478 UTC [262] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:27:04.478 UTC [262] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:27:04.484 UTC [262] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:27:04.729 UTC [262] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$MzwukmZMira0eC2mYBSC6.ZkRFjX8WGkKsYfDypfmnPtRvjOmuo6O')
	                RETURNING id, username, email
	                
2025-04-19 07:27:04.730 UTC [262] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:27:04.730 UTC [262] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:27:17.428 UTC [262] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 07:27:17.738 UTC [262] DEBUG:  unexpected EOF on client connection
2025-04-19 07:27:19.613 UTC [270] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:27:19.620 UTC [270] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:27:19.627 UTC [270] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:27:19.627 UTC [270] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:27:19.632 UTC [270] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:27:19.636 UTC [270] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:27:19.639 UTC [270] DEBUG:  building index "pg_toast_21637_index" on table "pg_toast_21637" serially
2025-04-19 07:27:19.640 UTC [270] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:27:19.641 UTC [270] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:27:19.641 UTC [270] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:27:19.642 UTC [270] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:27:19.642 UTC [270] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:27:19.642 UTC [270] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:27:19.643 UTC [270] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:27:19.643 UTC [270] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:27:19.643 UTC [270] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:27:19.644 UTC [270] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:27:19.645 UTC [270] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:27:19.645 UTC [270] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:27:19.645 UTC [270] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:27:19.646 UTC [270] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:27:19.646 UTC [270] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:27:19.646 UTC [270] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:27:19.646 UTC [270] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:27:19.647 UTC [270] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:27:19.648 UTC [270] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:27:19.648 UTC [270] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:27:19.648 UTC [270] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:27:19.649 UTC [270] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:27:19.649 UTC [270] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:27:19.651 UTC [270] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:27:19.652 UTC [270] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:27:19.652 UTC [270] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:27:19.652 UTC [270] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:27:19.653 UTC [270] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:27:19.655 UTC [270] DEBUG:  building index "pg_toast_21698_index" on table "pg_toast_21698" serially
2025-04-19 07:27:19.656 UTC [270] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:27:19.656 UTC [270] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:27:19.656 UTC [270] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:27:19.657 UTC [270] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:27:19.658 UTC [270] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:27:19.659 UTC [270] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:27:19.659 UTC [270] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:27:19.659 UTC [270] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:27:19.660 UTC [270] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:27:19.660 UTC [270] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:27:19.661 UTC [270] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:27:19.662 UTC [270] DEBUG:  building index "pg_toast_21731_index" on table "pg_toast_21731" serially
2025-04-19 07:27:19.663 UTC [270] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:27:19.663 UTC [270] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:27:19.663 UTC [270] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:27:19.664 UTC [270] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:27:19.664 UTC [270] DEBUG:  building index "pg_toast_21742_index" on table "pg_toast_21742" serially
2025-04-19 07:27:19.665 UTC [270] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:27:19.665 UTC [270] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:27:19.665 UTC [270] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:27:19.667 UTC [270] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:27:19.668 UTC [270] DEBUG:  building index "pg_toast_21765_index" on table "pg_toast_21765" serially
2025-04-19 07:27:19.669 UTC [270] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:27:19.669 UTC [270] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:27:19.669 UTC [270] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:27:19.670 UTC [270] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:27:19.670 UTC [270] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:27:19.671 UTC [270] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:27:19.671 UTC [270] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:27:19.672 UTC [270] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:27:19.672 UTC [270] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:27:19.672 UTC [270] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:27:19.672 UTC [270] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:27:19.673 UTC [270] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:27:19.673 UTC [270] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:27:19.674 UTC [270] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:27:19.674 UTC [270] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:27:19.675 UTC [270] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:27:19.675 UTC [270] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:27:19.676 UTC [270] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:27:19.676 UTC [270] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:27:19.676 UTC [270] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:27:19.676 UTC [270] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:27:19.677 UTC [270] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:27:19.677 UTC [270] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:27:19.678 UTC [270] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:27:19.678 UTC [270] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:27:19.688 UTC [270] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:27:19.965 UTC [270] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$X1fUkVOAXEe8ekmxkE3MN.LcnTphyqNLtcpPfRBVmWi8xX/8WJRpm')
	                RETURNING id, username, email
	                
2025-04-19 07:27:19.966 UTC [270] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:27:19.966 UTC [270] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:27:19.967 UTC [270] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 07:27:19.975 UTC [270] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:27:19.976 UTC [270] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:27:19.978 UTC [270] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:27:19.983 UTC [270] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:27:19.983 UTC [270] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:27:19.986 UTC [270] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:27:19.990 UTC [270] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:27:19.991 UTC [270] DEBUG:  building index "pg_toast_21801_index" on table "pg_toast_21801" serially
2025-04-19 07:27:19.992 UTC [270] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:27:19.992 UTC [270] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:27:19.992 UTC [270] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:27:19.993 UTC [270] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:27:19.993 UTC [270] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:27:19.993 UTC [270] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:27:19.994 UTC [270] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:27:19.994 UTC [270] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:27:19.994 UTC [270] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:27:19.995 UTC [270] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:27:19.996 UTC [270] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:27:19.996 UTC [270] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:27:19.996 UTC [270] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:27:19.997 UTC [270] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:27:19.997 UTC [270] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:27:19.997 UTC [270] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:27:19.997 UTC [270] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:27:19.998 UTC [270] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:27:19.998 UTC [270] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:27:19.998 UTC [270] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:27:19.999 UTC [270] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:27:19.999 UTC [270] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:27:19.999 UTC [270] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:27:20.000 UTC [270] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:27:20.001 UTC [270] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:27:20.001 UTC [270] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:27:20.001 UTC [270] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:27:20.002 UTC [270] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:27:20.003 UTC [270] DEBUG:  building index "pg_toast_21862_index" on table "pg_toast_21862" serially
2025-04-19 07:27:20.004 UTC [270] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:27:20.004 UTC [270] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:27:20.004 UTC [270] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:27:20.005 UTC [270] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:27:20.006 UTC [270] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:27:20.006 UTC [270] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:27:20.006 UTC [270] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:27:20.007 UTC [270] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:27:20.007 UTC [270] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:27:20.007 UTC [270] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:27:20.008 UTC [270] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:27:20.009 UTC [270] DEBUG:  building index "pg_toast_21895_index" on table "pg_toast_21895" serially
2025-04-19 07:27:20.010 UTC [270] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:27:20.010 UTC [270] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:27:20.010 UTC [270] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:27:20.011 UTC [270] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:27:20.012 UTC [270] DEBUG:  building index "pg_toast_21906_index" on table "pg_toast_21906" serially
2025-04-19 07:27:20.012 UTC [270] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:27:20.012 UTC [270] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:27:20.012 UTC [270] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:27:20.014 UTC [270] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:27:20.014 UTC [270] DEBUG:  building index "pg_toast_21929_index" on table "pg_toast_21929" serially
2025-04-19 07:27:20.015 UTC [270] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:27:20.015 UTC [270] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:27:20.015 UTC [270] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:27:20.016 UTC [270] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:27:20.016 UTC [270] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:27:20.017 UTC [270] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:27:20.017 UTC [270] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:27:20.017 UTC [270] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:27:20.017 UTC [270] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:27:20.018 UTC [270] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:27:20.018 UTC [270] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:27:20.019 UTC [270] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:27:20.019 UTC [270] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:27:20.020 UTC [270] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:27:20.020 UTC [270] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:27:20.020 UTC [270] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:27:20.020 UTC [270] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:27:20.021 UTC [270] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:27:20.021 UTC [270] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:27:20.022 UTC [270] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:27:20.022 UTC [270] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:27:20.023 UTC [270] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:27:20.023 UTC [270] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:27:20.024 UTC [270] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:27:20.024 UTC [270] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:27:20.031 UTC [270] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:27:20.276 UTC [270] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$uzFNJu6FGIAghXD4wnRVx.dqCRWWAOtgzHT6sij0gewCAtkQdrSM.')
	                RETURNING id, username, email
	                
2025-04-19 07:27:20.277 UTC [270] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:27:20.278 UTC [270] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:27:20.304 UTC [271] DEBUG:  autovacuum: processing database "postgres"
2025-04-19 07:27:33.342 UTC [270] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 07:27:33.640 UTC [270] DEBUG:  unexpected EOF on client connection
2025-04-19 07:27:36.441 UTC [286] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:27:36.454 UTC [286] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:27:36.461 UTC [286] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:27:36.461 UTC [286] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:27:36.464 UTC [286] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:27:36.467 UTC [286] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:27:36.470 UTC [286] DEBUG:  building index "pg_toast_21965_index" on table "pg_toast_21965" serially
2025-04-19 07:27:36.472 UTC [286] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:27:36.472 UTC [286] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:27:36.473 UTC [286] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:27:36.474 UTC [286] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:27:36.475 UTC [286] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:27:36.475 UTC [286] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:27:36.476 UTC [286] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:27:36.476 UTC [286] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:27:36.476 UTC [286] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:27:36.478 UTC [286] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:27:36.479 UTC [286] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:27:36.479 UTC [286] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:27:36.479 UTC [286] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:27:36.480 UTC [286] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:27:36.480 UTC [286] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:27:36.480 UTC [286] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:27:36.481 UTC [286] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:27:36.482 UTC [286] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:27:36.482 UTC [286] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:27:36.482 UTC [286] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:27:36.483 UTC [286] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:27:36.483 UTC [286] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:27:36.483 UTC [286] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:27:36.485 UTC [286] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:27:36.486 UTC [286] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:27:36.486 UTC [286] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:27:36.486 UTC [286] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:27:36.488 UTC [286] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:27:36.489 UTC [286] DEBUG:  building index "pg_toast_22026_index" on table "pg_toast_22026" serially
2025-04-19 07:27:36.490 UTC [286] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:27:36.491 UTC [286] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:27:36.491 UTC [286] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:27:36.493 UTC [286] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:27:36.494 UTC [286] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:27:36.494 UTC [286] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:27:36.494 UTC [286] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:27:36.495 UTC [286] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:27:36.495 UTC [286] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:27:36.495 UTC [286] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:27:36.496 UTC [286] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:27:36.498 UTC [286] DEBUG:  building index "pg_toast_22059_index" on table "pg_toast_22059" serially
2025-04-19 07:27:36.498 UTC [286] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:27:36.499 UTC [286] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:27:36.499 UTC [286] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:27:36.499 UTC [286] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:27:36.500 UTC [286] DEBUG:  building index "pg_toast_22070_index" on table "pg_toast_22070" serially
2025-04-19 07:27:36.501 UTC [286] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:27:36.501 UTC [286] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:27:36.501 UTC [286] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:27:36.503 UTC [286] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:27:36.504 UTC [286] DEBUG:  building index "pg_toast_22093_index" on table "pg_toast_22093" serially
2025-04-19 07:27:36.505 UTC [286] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:27:36.505 UTC [286] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:27:36.505 UTC [286] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:27:36.506 UTC [286] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:27:36.506 UTC [286] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:27:36.508 UTC [286] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:27:36.508 UTC [286] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:27:36.510 UTC [286] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:27:36.510 UTC [286] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:27:36.511 UTC [286] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:27:36.511 UTC [286] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:27:36.512 UTC [286] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:27:36.512 UTC [286] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:27:36.513 UTC [286] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:27:36.513 UTC [286] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:27:36.514 UTC [286] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:27:36.514 UTC [286] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:27:36.515 UTC [286] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:27:36.516 UTC [286] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:27:36.519 UTC [286] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:27:36.519 UTC [286] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:27:36.520 UTC [286] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:27:36.520 UTC [286] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:27:36.521 UTC [286] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:27:36.521 UTC [286] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:27:36.535 UTC [286] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:27:36.811 UTC [286] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$gWL/is2cecfMFLFPQaILpOLUTZbdd.35SHyUr2kmpdcwXmv9CXgDG')
	                RETURNING id, username, email
	                
2025-04-19 07:27:36.812 UTC [286] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:27:36.812 UTC [286] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:27:36.813 UTC [286] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 07:27:36.825 UTC [286] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:27:36.826 UTC [286] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:27:36.829 UTC [286] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:27:36.833 UTC [286] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:27:36.833 UTC [286] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:27:36.837 UTC [286] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:27:36.840 UTC [286] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:27:36.841 UTC [286] DEBUG:  building index "pg_toast_22129_index" on table "pg_toast_22129" serially
2025-04-19 07:27:36.843 UTC [286] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:27:36.843 UTC [286] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:27:36.843 UTC [286] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:27:36.844 UTC [286] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:27:36.844 UTC [286] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:27:36.844 UTC [286] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:27:36.845 UTC [286] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:27:36.845 UTC [286] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:27:36.845 UTC [286] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:27:36.845 UTC [286] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:27:36.846 UTC [286] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:27:36.846 UTC [286] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:27:36.846 UTC [286] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:27:36.847 UTC [286] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:27:36.847 UTC [286] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:27:36.847 UTC [286] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:27:36.848 UTC [286] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:27:36.849 UTC [286] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:27:36.850 UTC [286] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:27:36.850 UTC [286] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:27:36.850 UTC [286] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:27:36.851 UTC [286] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:27:36.851 UTC [286] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:27:36.852 UTC [286] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:27:36.853 UTC [286] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:27:36.853 UTC [286] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:27:36.853 UTC [286] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:27:36.854 UTC [286] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:27:36.855 UTC [286] DEBUG:  building index "pg_toast_22190_index" on table "pg_toast_22190" serially
2025-04-19 07:27:36.856 UTC [286] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:27:36.856 UTC [286] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:27:36.856 UTC [286] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:27:36.857 UTC [286] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:27:36.858 UTC [286] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:27:36.858 UTC [286] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:27:36.858 UTC [286] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:27:36.859 UTC [286] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:27:36.859 UTC [286] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:27:36.859 UTC [286] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:27:36.860 UTC [286] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:27:36.861 UTC [286] DEBUG:  building index "pg_toast_22223_index" on table "pg_toast_22223" serially
2025-04-19 07:27:36.862 UTC [286] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:27:36.862 UTC [286] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:27:36.862 UTC [286] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:27:36.863 UTC [286] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:27:36.864 UTC [286] DEBUG:  building index "pg_toast_22234_index" on table "pg_toast_22234" serially
2025-04-19 07:27:36.865 UTC [286] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:27:36.865 UTC [286] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:27:36.865 UTC [286] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:27:36.867 UTC [286] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:27:36.868 UTC [286] DEBUG:  building index "pg_toast_22257_index" on table "pg_toast_22257" serially
2025-04-19 07:27:36.868 UTC [286] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:27:36.869 UTC [286] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:27:36.869 UTC [286] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:27:36.869 UTC [286] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:27:36.869 UTC [286] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:27:36.870 UTC [286] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:27:36.870 UTC [286] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:27:36.871 UTC [286] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:27:36.871 UTC [286] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:27:36.872 UTC [286] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:27:36.872 UTC [286] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:27:36.872 UTC [286] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:27:36.872 UTC [286] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:27:36.873 UTC [286] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:27:36.873 UTC [286] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:27:36.874 UTC [286] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:27:36.874 UTC [286] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:27:36.874 UTC [286] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:27:36.874 UTC [286] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:27:36.875 UTC [286] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:27:36.875 UTC [286] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:27:36.876 UTC [286] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:27:36.876 UTC [286] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:27:36.877 UTC [286] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:27:36.877 UTC [286] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:27:36.883 UTC [286] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:27:37.143 UTC [286] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$SVR/hAQ26LaScax9i1YBgOlI2WGdgqS9x6TVpwQxpbND0dRZnJHVK')
	                RETURNING id, username, email
	                
2025-04-19 07:27:37.144 UTC [286] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:27:37.144 UTC [286] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:27:49.282 UTC [286] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 07:27:49.579 UTC [286] DEBUG:  unexpected EOF on client connection
2025-04-19 07:27:50.241 UTC [59] DEBUG:  performing replication slot checkpoint
2025-04-19 07:27:50.300 UTC [300] DEBUG:  autovacuum: processing database "powerball"
2025-04-19 07:27:50.537 UTC [300] DEBUG:  rehashing catalog cache id 14 for pg_opclass; 17 tups, 8 buckets
2025-04-19 07:27:51.527 UTC [301] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:27:51.532 UTC [301] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:27:51.542 UTC [301] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:27:51.542 UTC [301] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:27:51.545 UTC [301] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:27:51.548 UTC [301] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:27:51.551 UTC [301] DEBUG:  building index "pg_toast_22294_index" on table "pg_toast_22294" serially
2025-04-19 07:27:51.553 UTC [301] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:27:51.553 UTC [301] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:27:51.553 UTC [301] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:27:51.554 UTC [301] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:27:51.554 UTC [301] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:27:51.554 UTC [301] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:27:51.555 UTC [301] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:27:51.555 UTC [301] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:27:51.555 UTC [301] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:27:51.556 UTC [301] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:27:51.557 UTC [301] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:27:51.557 UTC [301] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:27:51.557 UTC [301] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:27:51.557 UTC [301] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:27:51.558 UTC [301] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:27:51.558 UTC [301] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:27:51.558 UTC [301] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:27:51.559 UTC [301] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:27:51.559 UTC [301] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:27:51.559 UTC [301] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:27:51.560 UTC [301] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:27:51.560 UTC [301] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:27:51.560 UTC [301] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:27:51.562 UTC [301] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:27:51.562 UTC [301] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:27:51.563 UTC [301] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:27:51.563 UTC [301] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:27:51.564 UTC [301] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:27:51.565 UTC [301] DEBUG:  building index "pg_toast_22355_index" on table "pg_toast_22355" serially
2025-04-19 07:27:51.566 UTC [301] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:27:51.566 UTC [301] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:27:51.566 UTC [301] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:27:51.567 UTC [301] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:27:51.568 UTC [301] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:27:51.568 UTC [301] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:27:51.568 UTC [301] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:27:51.569 UTC [301] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:27:51.569 UTC [301] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:27:51.569 UTC [301] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:27:51.570 UTC [301] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:27:51.571 UTC [301] DEBUG:  building index "pg_toast_22388_index" on table "pg_toast_22388" serially
2025-04-19 07:27:51.572 UTC [301] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:27:51.572 UTC [301] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:27:51.572 UTC [301] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:27:51.573 UTC [301] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:27:51.574 UTC [301] DEBUG:  building index "pg_toast_22399_index" on table "pg_toast_22399" serially
2025-04-19 07:27:51.575 UTC [301] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:27:51.575 UTC [301] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:27:51.575 UTC [301] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:27:51.576 UTC [301] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:27:51.577 UTC [301] DEBUG:  building index "pg_toast_22422_index" on table "pg_toast_22422" serially
2025-04-19 07:27:51.578 UTC [301] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:27:51.578 UTC [301] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:27:51.578 UTC [301] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:27:51.579 UTC [301] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:27:51.579 UTC [301] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:27:51.580 UTC [301] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:27:51.580 UTC [301] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:27:51.581 UTC [301] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:27:51.581 UTC [301] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:27:51.581 UTC [301] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:27:51.581 UTC [301] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:27:51.582 UTC [301] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:27:51.582 UTC [301] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:27:51.583 UTC [301] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:27:51.583 UTC [301] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:27:51.584 UTC [301] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:27:51.584 UTC [301] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:27:51.586 UTC [301] DEBUG:  rehashing catalog cache id 32 for pg_index; 129 tups, 64 buckets
2025-04-19 07:27:51.586 UTC [301] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:27:51.586 UTC [301] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:27:51.587 UTC [301] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:27:51.587 UTC [301] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:27:51.588 UTC [301] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:27:51.588 UTC [301] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:27:51.588 UTC [301] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:27:51.588 UTC [301] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:27:51.597 UTC [301] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:27:51.862 UTC [301] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$C3nAQ.WFQzqOcDQNddAqG.mUyvbqBPWFc76MfOvgII/iiQPXacfJC')
	                RETURNING id, username, email
	                
2025-04-19 07:27:51.863 UTC [301] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:27:51.863 UTC [301] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:27:51.864 UTC [301] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 07:27:51.868 UTC [301] DEBUG:  rehashing catalog cache id 7 for pg_attribute; 257 tups, 128 buckets
2025-04-19 07:27:51.868 UTC [301] CONTEXT:  SQL expression "NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        )"
	PL/pgSQL function inline_code_block line 3 at IF
2025-04-19 07:27:51.873 UTC [301] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:27:51.875 UTC [301] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:27:51.877 UTC [301] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:27:51.883 UTC [301] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:27:51.883 UTC [301] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:27:51.887 UTC [301] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:27:51.891 UTC [301] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:27:51.892 UTC [301] DEBUG:  building index "pg_toast_22458_index" on table "pg_toast_22458" serially
2025-04-19 07:27:51.893 UTC [301] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:27:51.893 UTC [301] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:27:51.893 UTC [301] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:27:51.894 UTC [301] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:27:51.894 UTC [301] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:27:51.894 UTC [301] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:27:51.895 UTC [301] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:27:51.895 UTC [301] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:27:51.895 UTC [301] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:27:51.896 UTC [301] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:27:51.897 UTC [301] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:27:51.897 UTC [301] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:27:51.897 UTC [301] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:27:51.897 UTC [301] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:27:51.898 UTC [301] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:27:51.898 UTC [301] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:27:51.898 UTC [301] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:27:51.899 UTC [301] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:27:51.899 UTC [301] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:27:51.899 UTC [301] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:27:51.900 UTC [301] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:27:51.900 UTC [301] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:27:51.900 UTC [301] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:27:51.901 UTC [301] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:27:51.902 UTC [301] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:27:51.902 UTC [301] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:27:51.902 UTC [301] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:27:51.903 UTC [301] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:27:51.904 UTC [301] DEBUG:  building index "pg_toast_22519_index" on table "pg_toast_22519" serially
2025-04-19 07:27:51.905 UTC [301] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:27:51.905 UTC [301] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:27:51.905 UTC [301] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:27:51.906 UTC [301] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:27:51.907 UTC [301] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:27:51.907 UTC [301] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:27:51.907 UTC [301] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:27:51.908 UTC [301] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:27:51.908 UTC [301] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:27:51.908 UTC [301] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:27:51.909 UTC [301] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:27:51.911 UTC [301] DEBUG:  building index "pg_toast_22552_index" on table "pg_toast_22552" serially
2025-04-19 07:27:51.912 UTC [301] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:27:51.913 UTC [301] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:27:51.913 UTC [301] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:27:51.915 UTC [301] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:27:51.917 UTC [301] DEBUG:  building index "pg_toast_22563_index" on table "pg_toast_22563" serially
2025-04-19 07:27:51.919 UTC [301] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:27:51.919 UTC [301] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:27:51.919 UTC [301] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:27:51.922 UTC [301] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:27:51.923 UTC [301] DEBUG:  building index "pg_toast_22586_index" on table "pg_toast_22586" serially
2025-04-19 07:27:51.924 UTC [301] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:27:51.925 UTC [301] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:27:51.925 UTC [301] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:27:51.928 UTC [301] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:27:51.928 UTC [301] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:27:51.929 UTC [301] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:27:51.929 UTC [301] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:27:51.931 UTC [301] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:27:51.931 UTC [301] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:27:51.932 UTC [301] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:27:51.932 UTC [301] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:27:51.933 UTC [301] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:27:51.933 UTC [301] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:27:51.934 UTC [301] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:27:51.934 UTC [301] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:27:51.934 UTC [301] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:27:51.934 UTC [301] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:27:51.935 UTC [301] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:27:51.935 UTC [301] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:27:51.936 UTC [301] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:27:51.936 UTC [301] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:27:51.937 UTC [301] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:27:51.937 UTC [301] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:27:51.938 UTC [301] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:27:51.938 UTC [301] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:27:51.944 UTC [301] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:27:52.193 UTC [301] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$t.v0Hg16sAgTZLJJ3vthGuTxHz4p6WHkBZf6DM5r/6UH3Ha.jl3s6')
	                RETURNING id, username, email
	                
2025-04-19 07:27:52.196 UTC [301] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:27:52.196 UTC [301] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:28:05.215 UTC [301] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 07:28:05.502 UTC [301] DEBUG:  unexpected EOF on client connection
2025-04-19 07:28:07.260 UTC [316] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:28:07.267 UTC [316] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:28:07.278 UTC [316] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:28:07.278 UTC [316] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:28:07.281 UTC [316] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:28:07.285 UTC [316] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:28:07.289 UTC [316] DEBUG:  building index "pg_toast_22622_index" on table "pg_toast_22622" serially
2025-04-19 07:28:07.291 UTC [316] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:28:07.292 UTC [316] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:28:07.292 UTC [316] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:28:07.293 UTC [316] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:28:07.294 UTC [316] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:28:07.294 UTC [316] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:28:07.295 UTC [316] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:28:07.295 UTC [316] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:28:07.295 UTC [316] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:28:07.296 UTC [316] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:28:07.298 UTC [316] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:28:07.298 UTC [316] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:28:07.298 UTC [316] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:28:07.299 UTC [316] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:28:07.299 UTC [316] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:28:07.299 UTC [316] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:28:07.299 UTC [316] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:28:07.301 UTC [316] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:28:07.301 UTC [316] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:28:07.301 UTC [316] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:28:07.302 UTC [316] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:28:07.302 UTC [316] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:28:07.302 UTC [316] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:28:07.304 UTC [316] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:28:07.305 UTC [316] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:28:07.306 UTC [316] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:28:07.306 UTC [316] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:28:07.307 UTC [316] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:28:07.309 UTC [316] DEBUG:  building index "pg_toast_22683_index" on table "pg_toast_22683" serially
2025-04-19 07:28:07.310 UTC [316] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:28:07.310 UTC [316] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:28:07.310 UTC [316] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:28:07.311 UTC [316] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:28:07.313 UTC [316] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:28:07.313 UTC [316] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:28:07.313 UTC [316] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:28:07.314 UTC [316] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:28:07.315 UTC [316] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:28:07.315 UTC [316] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:28:07.317 UTC [316] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:28:07.319 UTC [316] DEBUG:  building index "pg_toast_22716_index" on table "pg_toast_22716" serially
2025-04-19 07:28:07.320 UTC [316] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:28:07.321 UTC [316] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:28:07.321 UTC [316] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:28:07.322 UTC [316] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:28:07.323 UTC [316] DEBUG:  building index "pg_toast_22727_index" on table "pg_toast_22727" serially
2025-04-19 07:28:07.324 UTC [316] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:28:07.324 UTC [316] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:28:07.324 UTC [316] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:28:07.325 UTC [316] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:28:07.326 UTC [316] DEBUG:  building index "pg_toast_22750_index" on table "pg_toast_22750" serially
2025-04-19 07:28:07.327 UTC [316] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:28:07.327 UTC [316] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:28:07.327 UTC [316] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:28:07.328 UTC [316] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:28:07.328 UTC [316] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:28:07.328 UTC [316] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:28:07.328 UTC [316] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:28:07.329 UTC [316] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:28:07.329 UTC [316] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:28:07.330 UTC [316] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:28:07.330 UTC [316] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:28:07.331 UTC [316] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:28:07.331 UTC [316] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:28:07.332 UTC [316] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:28:07.332 UTC [316] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:28:07.333 UTC [316] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:28:07.333 UTC [316] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:28:07.334 UTC [316] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:28:07.334 UTC [316] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:28:07.334 UTC [316] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:28:07.334 UTC [316] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:28:07.335 UTC [316] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:28:07.335 UTC [316] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:28:07.336 UTC [316] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:28:07.336 UTC [316] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:28:07.344 UTC [316] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:28:07.612 UTC [316] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$oIk4tulYZ/7nCYKeIAnfkeTvBG1q4a/tApZGWKjD8L0pbdAzfkINa')
	                RETURNING id, username, email
	                
2025-04-19 07:28:07.613 UTC [316] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:28:07.613 UTC [316] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:28:07.614 UTC [316] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 07:28:07.628 UTC [316] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:28:07.629 UTC [316] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:28:07.631 UTC [316] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:28:07.636 UTC [316] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:28:07.636 UTC [316] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:28:07.639 UTC [316] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:28:07.642 UTC [316] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:28:07.643 UTC [316] DEBUG:  building index "pg_toast_22786_index" on table "pg_toast_22786" serially
2025-04-19 07:28:07.644 UTC [316] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:28:07.644 UTC [316] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:28:07.644 UTC [316] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:28:07.646 UTC [316] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:28:07.646 UTC [316] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:28:07.646 UTC [316] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:28:07.646 UTC [316] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:28:07.647 UTC [316] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:28:07.647 UTC [316] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:28:07.647 UTC [316] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:28:07.648 UTC [316] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:28:07.648 UTC [316] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:28:07.648 UTC [316] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:28:07.649 UTC [316] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:28:07.650 UTC [316] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:28:07.650 UTC [316] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:28:07.651 UTC [316] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:28:07.652 UTC [316] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:28:07.652 UTC [316] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:28:07.652 UTC [316] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:28:07.653 UTC [316] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:28:07.653 UTC [316] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:28:07.653 UTC [316] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:28:07.654 UTC [316] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:28:07.655 UTC [316] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:28:07.655 UTC [316] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:28:07.655 UTC [316] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:28:07.656 UTC [316] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:28:07.657 UTC [316] DEBUG:  building index "pg_toast_22847_index" on table "pg_toast_22847" serially
2025-04-19 07:28:07.658 UTC [316] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:28:07.658 UTC [316] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:28:07.658 UTC [316] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:28:07.659 UTC [316] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:28:07.660 UTC [316] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:28:07.660 UTC [316] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:28:07.660 UTC [316] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:28:07.661 UTC [316] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:28:07.661 UTC [316] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:28:07.661 UTC [316] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:28:07.662 UTC [316] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:28:07.663 UTC [316] DEBUG:  building index "pg_toast_22880_index" on table "pg_toast_22880" serially
2025-04-19 07:28:07.664 UTC [316] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:28:07.664 UTC [316] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:28:07.664 UTC [316] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:28:07.665 UTC [316] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:28:07.666 UTC [316] DEBUG:  building index "pg_toast_22891_index" on table "pg_toast_22891" serially
2025-04-19 07:28:07.667 UTC [316] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:28:07.667 UTC [316] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:28:07.667 UTC [316] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:28:07.668 UTC [316] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:28:07.669 UTC [316] DEBUG:  building index "pg_toast_22914_index" on table "pg_toast_22914" serially
2025-04-19 07:28:07.670 UTC [316] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:28:07.670 UTC [316] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:28:07.670 UTC [316] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:28:07.671 UTC [316] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:28:07.671 UTC [316] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:28:07.672 UTC [316] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:28:07.672 UTC [316] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:28:07.672 UTC [316] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:28:07.672 UTC [316] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:28:07.673 UTC [316] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:28:07.673 UTC [316] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:28:07.674 UTC [316] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:28:07.674 UTC [316] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:28:07.675 UTC [316] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:28:07.675 UTC [316] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:28:07.676 UTC [316] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:28:07.676 UTC [316] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:28:07.677 UTC [316] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:28:07.677 UTC [316] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:28:07.678 UTC [316] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:28:07.678 UTC [316] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:28:07.679 UTC [316] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:28:07.679 UTC [316] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:28:07.680 UTC [316] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:28:07.680 UTC [316] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:28:07.686 UTC [316] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:28:07.928 UTC [316] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$dg93fAJf0/TwyBhmMRZSt.1XaaGtj/3qAy3Ovoxl2cX9nl1enLZky')
	                RETURNING id, username, email
	                
2025-04-19 07:28:07.929 UTC [316] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:28:07.929 UTC [316] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:28:19.450 UTC [330] LOG:  statement: SELECT c.oid,
	  n.nspname,
	  c.relname
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relname OPERATOR(pg_catalog.~) '^(draws)$' COLLATE pg_catalog.default
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 2, 3;
2025-04-19 07:28:19.456 UTC [330] LOG:  statement: SELECT c.relchecks, c.relkind, c.relhasindex, c.relhasrules, c.relhastriggers, c.relrowsecurity, c.relforcerowsecurity, false AS relhasoids, c.relispartition, '', c.reltablespace, CASE WHEN c.reloftype = 0 THEN '' ELSE c.reloftype::pg_catalog.regtype::pg_catalog.text END, c.relpersistence, c.relreplident, am.amname
	FROM pg_catalog.pg_class c
	 LEFT JOIN pg_catalog.pg_class tc ON (c.reltoastrelid = tc.oid)
	LEFT JOIN pg_catalog.pg_am am ON (c.relam = am.oid)
	WHERE c.oid = '22800';
2025-04-19 07:28:19.459 UTC [330] LOG:  statement: SELECT a.attname,
	  pg_catalog.format_type(a.atttypid, a.atttypmod),
	  (SELECT pg_catalog.pg_get_expr(d.adbin, d.adrelid, true)
	   FROM pg_catalog.pg_attrdef d
	   WHERE d.adrelid = a.attrelid AND d.adnum = a.attnum AND a.atthasdef),
	  a.attnotnull,
	  (SELECT c.collname FROM pg_catalog.pg_collation c, pg_catalog.pg_type t
	   WHERE c.oid = a.attcollation AND t.oid = a.atttypid AND a.attcollation <> t.typcollation) AS attcollation,
	  a.attidentity,
	  a.attgenerated
	FROM pg_catalog.pg_attribute a
	WHERE a.attrelid = '22800' AND a.attnum > 0 AND NOT a.attisdropped
	ORDER BY a.attnum;
2025-04-19 07:28:19.464 UTC [330] LOG:  statement: SELECT c2.relname, i.indisprimary, i.indisunique, i.indisclustered, i.indisvalid, pg_catalog.pg_get_indexdef(i.indexrelid, 0, true),
	  pg_catalog.pg_get_constraintdef(con.oid, true), contype, condeferrable, condeferred, i.indisreplident, c2.reltablespace
	FROM pg_catalog.pg_class c, pg_catalog.pg_class c2, pg_catalog.pg_index i
	  LEFT JOIN pg_catalog.pg_constraint con ON (conrelid = i.indrelid AND conindid = i.indexrelid AND contype IN ('p','u','x'))
	WHERE c.oid = '22800' AND c.oid = i.indrelid AND i.indexrelid = c2.oid
	ORDER BY i.indisprimary DESC, c2.relname;
2025-04-19 07:28:19.467 UTC [330] LOG:  statement: SELECT true as sametable, conname,
	  pg_catalog.pg_get_constraintdef(r.oid, true) as condef,
	  conrelid::pg_catalog.regclass AS ontable
	FROM pg_catalog.pg_constraint r
	WHERE r.conrelid = '22800' AND r.contype = 'f'
	     AND conparentid = 0
	ORDER BY conname
2025-04-19 07:28:19.467 UTC [330] LOG:  statement: SELECT conname, conrelid::pg_catalog.regclass AS ontable,
	       pg_catalog.pg_get_constraintdef(oid, true) AS condef
	  FROM pg_catalog.pg_constraint c
	 WHERE confrelid IN (SELECT pg_catalog.pg_partition_ancestors('22800')
	                     UNION ALL VALUES ('22800'::pg_catalog.regclass))
	       AND contype = 'f' AND conparentid = 0
	ORDER BY conname;
2025-04-19 07:28:19.468 UTC [330] LOG:  statement: SELECT pol.polname, pol.polpermissive,
	  CASE WHEN pol.polroles = '{0}' THEN NULL ELSE pg_catalog.array_to_string(array(select rolname from pg_catalog.pg_roles where oid = any (pol.polroles) order by 1),',') END,
	  pg_catalog.pg_get_expr(pol.polqual, pol.polrelid),
	  pg_catalog.pg_get_expr(pol.polwithcheck, pol.polrelid),
	  CASE pol.polcmd
	    WHEN 'r' THEN 'SELECT'
	    WHEN 'a' THEN 'INSERT'
	    WHEN 'w' THEN 'UPDATE'
	    WHEN 'd' THEN 'DELETE'
	    END AS cmd
	FROM pg_catalog.pg_policy pol
	WHERE pol.polrelid = '22800' ORDER BY 1;
2025-04-19 07:28:19.470 UTC [330] LOG:  statement: SELECT oid, stxrelid::pg_catalog.regclass, stxnamespace::pg_catalog.regnamespace::pg_catalog.text AS nsp, stxname,
	pg_catalog.pg_get_statisticsobjdef_columns(oid) AS columns,
	  'd' = any(stxkind) AS ndist_enabled,
	  'f' = any(stxkind) AS deps_enabled,
	  'm' = any(stxkind) AS mcv_enabled,
	stxstattarget
	FROM pg_catalog.pg_statistic_ext
	WHERE stxrelid = '22800'
	ORDER BY nsp, stxname;
2025-04-19 07:28:19.471 UTC [330] LOG:  statement: SELECT pubname
	FROM pg_catalog.pg_publication p
	JOIN pg_catalog.pg_publication_rel pr ON p.oid = pr.prpubid
	WHERE pr.prrelid = '22800'
	UNION ALL
	SELECT pubname
	FROM pg_catalog.pg_publication p
	WHERE p.puballtables AND pg_catalog.pg_relation_is_publishable('22800')
	ORDER BY 1;
2025-04-19 07:28:19.472 UTC [330] LOG:  statement: SELECT t.tgname, pg_catalog.pg_get_triggerdef(t.oid, true), t.tgenabled, t.tgisinternal,
	  CASE WHEN t.tgparentid != 0 THEN
	    (SELECT u.tgrelid::pg_catalog.regclass
	     FROM pg_catalog.pg_trigger AS u,
	          pg_catalog.pg_partition_ancestors(t.tgrelid) WITH ORDINALITY AS a(relid, depth)
	     WHERE u.tgname = t.tgname AND u.tgrelid = a.relid
	           AND u.tgparentid = 0
	     ORDER BY a.depth LIMIT 1)
	  END AS parent
	FROM pg_catalog.pg_trigger t
	WHERE t.tgrelid = '22800' AND (NOT t.tgisinternal OR (t.tgisinternal AND t.tgenabled = 'D') 
	    OR EXISTS (SELECT 1 FROM pg_catalog.pg_depend WHERE objid = t.oid 
	        AND refclassid = 'pg_catalog.pg_trigger'::pg_catalog.regclass))
	ORDER BY 1;
2025-04-19 07:28:19.473 UTC [330] LOG:  statement: SELECT c.oid::pg_catalog.regclass
	FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i
	WHERE c.oid = i.inhparent AND i.inhrelid = '22800'
	  AND c.relkind != 'p' AND c.relkind != 'I'
	ORDER BY inhseqno;
2025-04-19 07:28:19.474 UTC [330] LOG:  statement: SELECT c.oid::pg_catalog.regclass, c.relkind, inhdetachpending, pg_catalog.pg_get_expr(c.relpartbound, c.oid)
	FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i
	WHERE c.oid = i.inhrelid AND i.inhparent = '22800'
	ORDER BY pg_catalog.pg_get_expr(c.relpartbound, c.oid) = 'DEFAULT', c.oid::pg_catalog.regclass::pg_catalog.text;
2025-04-19 07:28:20.314 UTC [331] DEBUG:  autovacuum: processing database "postgres"
2025-04-19 07:28:21.118 UTC [316] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 07:28:21.409 UTC [316] DEBUG:  unexpected EOF on client connection
2025-04-19 07:28:23.080 UTC [339] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:28:23.089 UTC [339] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:28:23.096 UTC [339] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:28:23.096 UTC [339] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:28:23.100 UTC [339] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:28:23.103 UTC [339] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:28:23.106 UTC [339] DEBUG:  building index "pg_toast_22950_index" on table "pg_toast_22950" serially
2025-04-19 07:28:23.107 UTC [339] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:28:23.107 UTC [339] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:28:23.107 UTC [339] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:28:23.108 UTC [339] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:28:23.108 UTC [339] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:28:23.108 UTC [339] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:28:23.109 UTC [339] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:28:23.109 UTC [339] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:28:23.109 UTC [339] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:28:23.110 UTC [339] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:28:23.111 UTC [339] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:28:23.111 UTC [339] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:28:23.111 UTC [339] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:28:23.112 UTC [339] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:28:23.112 UTC [339] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:28:23.112 UTC [339] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:28:23.113 UTC [339] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:28:23.115 UTC [339] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:28:23.115 UTC [339] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:28:23.115 UTC [339] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:28:23.116 UTC [339] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:28:23.116 UTC [339] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:28:23.116 UTC [339] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:28:23.119 UTC [339] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:28:23.121 UTC [339] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:28:23.121 UTC [339] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:28:23.121 UTC [339] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:28:23.122 UTC [339] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:28:23.124 UTC [339] DEBUG:  building index "pg_toast_23011_index" on table "pg_toast_23011" serially
2025-04-19 07:28:23.125 UTC [339] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:28:23.125 UTC [339] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:28:23.125 UTC [339] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:28:23.126 UTC [339] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:28:23.127 UTC [339] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:28:23.127 UTC [339] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:28:23.127 UTC [339] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:28:23.128 UTC [339] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:28:23.128 UTC [339] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:28:23.128 UTC [339] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:28:23.130 UTC [339] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:28:23.131 UTC [339] DEBUG:  building index "pg_toast_23044_index" on table "pg_toast_23044" serially
2025-04-19 07:28:23.132 UTC [339] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:28:23.132 UTC [339] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:28:23.132 UTC [339] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:28:23.133 UTC [339] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:28:23.134 UTC [339] DEBUG:  building index "pg_toast_23055_index" on table "pg_toast_23055" serially
2025-04-19 07:28:23.135 UTC [339] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:28:23.135 UTC [339] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:28:23.135 UTC [339] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:28:23.137 UTC [339] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:28:23.138 UTC [339] DEBUG:  building index "pg_toast_23078_index" on table "pg_toast_23078" serially
2025-04-19 07:28:23.138 UTC [339] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:28:23.138 UTC [339] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:28:23.138 UTC [339] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:28:23.139 UTC [339] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:28:23.139 UTC [339] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:28:23.140 UTC [339] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:28:23.140 UTC [339] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:28:23.141 UTC [339] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:28:23.141 UTC [339] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:28:23.142 UTC [339] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:28:23.142 UTC [339] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:28:23.143 UTC [339] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:28:23.143 UTC [339] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:28:23.143 UTC [339] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:28:23.143 UTC [339] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:28:23.144 UTC [339] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:28:23.144 UTC [339] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:28:23.145 UTC [339] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:28:23.145 UTC [339] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:28:23.145 UTC [339] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:28:23.145 UTC [339] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:28:23.146 UTC [339] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:28:23.146 UTC [339] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:28:23.147 UTC [339] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:28:23.147 UTC [339] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:28:23.158 UTC [339] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:28:23.428 UTC [339] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$KGPU8TB533E/AqIZzB/pVuTWRA3yl7YDxFMYNYklpGBCeIFkTshuC')
	                RETURNING id, username, email
	                
2025-04-19 07:28:23.429 UTC [339] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:28:23.430 UTC [339] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:28:23.431 UTC [339] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 07:28:23.438 UTC [339] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:28:23.439 UTC [339] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:28:23.442 UTC [339] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:28:23.446 UTC [339] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:28:23.446 UTC [339] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:28:23.449 UTC [339] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:28:23.451 UTC [339] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:28:23.452 UTC [339] DEBUG:  building index "pg_toast_23114_index" on table "pg_toast_23114" serially
2025-04-19 07:28:23.453 UTC [339] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:28:23.454 UTC [339] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:28:23.454 UTC [339] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:28:23.454 UTC [339] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:28:23.455 UTC [339] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:28:23.455 UTC [339] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:28:23.455 UTC [339] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:28:23.456 UTC [339] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:28:23.456 UTC [339] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:28:23.456 UTC [339] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:28:23.457 UTC [339] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:28:23.457 UTC [339] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:28:23.457 UTC [339] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:28:23.458 UTC [339] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:28:23.458 UTC [339] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:28:23.458 UTC [339] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:28:23.459 UTC [339] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:28:23.460 UTC [339] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:28:23.460 UTC [339] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:28:23.460 UTC [339] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:28:23.461 UTC [339] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:28:23.461 UTC [339] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:28:23.461 UTC [339] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:28:23.462 UTC [339] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:28:23.463 UTC [339] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:28:23.463 UTC [339] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:28:23.463 UTC [339] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:28:23.464 UTC [339] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:28:23.465 UTC [339] DEBUG:  building index "pg_toast_23175_index" on table "pg_toast_23175" serially
2025-04-19 07:28:23.466 UTC [339] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:28:23.466 UTC [339] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:28:23.466 UTC [339] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:28:23.467 UTC [339] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:28:23.468 UTC [339] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:28:23.468 UTC [339] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:28:23.469 UTC [339] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:28:23.469 UTC [339] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:28:23.470 UTC [339] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:28:23.470 UTC [339] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:28:23.471 UTC [339] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:28:23.472 UTC [339] DEBUG:  building index "pg_toast_23208_index" on table "pg_toast_23208" serially
2025-04-19 07:28:23.473 UTC [339] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:28:23.474 UTC [339] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:28:23.474 UTC [339] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:28:23.474 UTC [339] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:28:23.475 UTC [339] DEBUG:  building index "pg_toast_23219_index" on table "pg_toast_23219" serially
2025-04-19 07:28:23.476 UTC [339] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:28:23.476 UTC [339] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:28:23.476 UTC [339] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:28:23.477 UTC [339] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:28:23.478 UTC [339] DEBUG:  building index "pg_toast_23242_index" on table "pg_toast_23242" serially
2025-04-19 07:28:23.479 UTC [339] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:28:23.479 UTC [339] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:28:23.479 UTC [339] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:28:23.480 UTC [339] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:28:23.480 UTC [339] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:28:23.481 UTC [339] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:28:23.481 UTC [339] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:28:23.481 UTC [339] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:28:23.481 UTC [339] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:28:23.482 UTC [339] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:28:23.482 UTC [339] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:28:23.483 UTC [339] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:28:23.483 UTC [339] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:28:23.484 UTC [339] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:28:23.484 UTC [339] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:28:23.484 UTC [339] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:28:23.484 UTC [339] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:28:23.485 UTC [339] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:28:23.485 UTC [339] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:28:23.486 UTC [339] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:28:23.486 UTC [339] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:28:23.487 UTC [339] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:28:23.487 UTC [339] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:28:23.487 UTC [339] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:28:23.487 UTC [339] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:28:23.493 UTC [339] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:28:23.738 UTC [339] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$OtzNr3Mrs3jfr86kGTd8w.RUkGtZx..FjJdNNNrnS/Mr8SvhMLDLK')
	                RETURNING id, username, email
	                
2025-04-19 07:28:23.739 UTC [339] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:28:23.739 UTC [339] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:28:36.957 UTC [339] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 07:28:37.238 UTC [339] DEBUG:  unexpected EOF on client connection
2025-04-19 07:28:38.973 UTC [355] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:28:38.983 UTC [355] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:28:38.989 UTC [355] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:28:38.989 UTC [355] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:28:38.992 UTC [355] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:28:38.996 UTC [355] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:28:39.000 UTC [355] DEBUG:  building index "pg_toast_23278_index" on table "pg_toast_23278" serially
2025-04-19 07:28:39.001 UTC [355] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:28:39.002 UTC [355] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:28:39.002 UTC [355] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:28:39.003 UTC [355] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:28:39.003 UTC [355] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:28:39.003 UTC [355] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:28:39.003 UTC [355] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:28:39.004 UTC [355] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:28:39.004 UTC [355] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:28:39.004 UTC [355] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:28:39.005 UTC [355] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:28:39.006 UTC [355] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:28:39.006 UTC [355] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:28:39.006 UTC [355] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:28:39.007 UTC [355] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:28:39.007 UTC [355] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:28:39.007 UTC [355] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:28:39.008 UTC [355] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:28:39.008 UTC [355] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:28:39.008 UTC [355] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:28:39.010 UTC [355] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:28:39.010 UTC [355] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:28:39.010 UTC [355] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:28:39.012 UTC [355] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:28:39.013 UTC [355] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:28:39.013 UTC [355] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:28:39.013 UTC [355] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:28:39.014 UTC [355] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:28:39.016 UTC [355] DEBUG:  building index "pg_toast_23339_index" on table "pg_toast_23339" serially
2025-04-19 07:28:39.017 UTC [355] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:28:39.017 UTC [355] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:28:39.017 UTC [355] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:28:39.018 UTC [355] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:28:39.020 UTC [355] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:28:39.020 UTC [355] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:28:39.020 UTC [355] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:28:39.021 UTC [355] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:28:39.021 UTC [355] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:28:39.021 UTC [355] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:28:39.022 UTC [355] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:28:39.023 UTC [355] DEBUG:  building index "pg_toast_23372_index" on table "pg_toast_23372" serially
2025-04-19 07:28:39.024 UTC [355] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:28:39.024 UTC [355] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:28:39.024 UTC [355] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:28:39.025 UTC [355] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:28:39.026 UTC [355] DEBUG:  building index "pg_toast_23383_index" on table "pg_toast_23383" serially
2025-04-19 07:28:39.027 UTC [355] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:28:39.027 UTC [355] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:28:39.027 UTC [355] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:28:39.028 UTC [355] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:28:39.029 UTC [355] DEBUG:  building index "pg_toast_23406_index" on table "pg_toast_23406" serially
2025-04-19 07:28:39.030 UTC [355] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:28:39.030 UTC [355] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:28:39.030 UTC [355] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:28:39.031 UTC [355] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:28:39.031 UTC [355] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:28:39.031 UTC [355] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:28:39.031 UTC [355] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:28:39.032 UTC [355] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:28:39.032 UTC [355] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:28:39.033 UTC [355] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:28:39.033 UTC [355] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:28:39.034 UTC [355] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:28:39.034 UTC [355] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:28:39.035 UTC [355] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:28:39.035 UTC [355] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:28:39.035 UTC [355] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:28:39.035 UTC [355] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:28:39.036 UTC [355] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:28:39.036 UTC [355] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:28:39.038 UTC [355] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:28:39.038 UTC [355] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:28:39.039 UTC [355] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:28:39.039 UTC [355] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:28:39.040 UTC [355] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:28:39.040 UTC [355] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:28:39.049 UTC [355] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:28:39.315 UTC [355] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$y2C88T4wG9EamILvCBE0jOOrX/u7Tm4lWUuUjQ5tKQKEmPcC541bq')
	                RETURNING id, username, email
	                
2025-04-19 07:28:39.316 UTC [355] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:28:39.317 UTC [355] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:28:39.317 UTC [355] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 07:28:39.327 UTC [355] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:28:39.328 UTC [355] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:28:39.333 UTC [355] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:28:39.338 UTC [355] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:28:39.338 UTC [355] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:28:39.342 UTC [355] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:28:39.345 UTC [355] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:28:39.346 UTC [355] DEBUG:  building index "pg_toast_23442_index" on table "pg_toast_23442" serially
2025-04-19 07:28:39.347 UTC [355] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:28:39.347 UTC [355] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:28:39.347 UTC [355] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:28:39.348 UTC [355] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:28:39.348 UTC [355] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:28:39.348 UTC [355] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:28:39.349 UTC [355] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:28:39.349 UTC [355] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:28:39.349 UTC [355] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:28:39.350 UTC [355] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:28:39.350 UTC [355] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:28:39.351 UTC [355] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:28:39.351 UTC [355] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:28:39.351 UTC [355] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:28:39.351 UTC [355] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:28:39.351 UTC [355] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:28:39.352 UTC [355] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:28:39.353 UTC [355] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:28:39.353 UTC [355] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:28:39.353 UTC [355] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:28:39.354 UTC [355] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:28:39.354 UTC [355] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:28:39.354 UTC [355] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:28:39.355 UTC [355] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:28:39.356 UTC [355] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:28:39.356 UTC [355] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:28:39.356 UTC [355] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:28:39.357 UTC [355] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:28:39.358 UTC [355] DEBUG:  building index "pg_toast_23503_index" on table "pg_toast_23503" serially
2025-04-19 07:28:39.359 UTC [355] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:28:39.359 UTC [355] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:28:39.359 UTC [355] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:28:39.360 UTC [355] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:28:39.361 UTC [355] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:28:39.361 UTC [355] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:28:39.361 UTC [355] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:28:39.362 UTC [355] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:28:39.362 UTC [355] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:28:39.362 UTC [355] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:28:39.363 UTC [355] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:28:39.364 UTC [355] DEBUG:  building index "pg_toast_23536_index" on table "pg_toast_23536" serially
2025-04-19 07:28:39.365 UTC [355] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:28:39.366 UTC [355] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:28:39.366 UTC [355] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:28:39.367 UTC [355] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:28:39.369 UTC [355] DEBUG:  building index "pg_toast_23547_index" on table "pg_toast_23547" serially
2025-04-19 07:28:39.370 UTC [355] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:28:39.371 UTC [355] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:28:39.371 UTC [355] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:28:39.372 UTC [355] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:28:39.373 UTC [355] DEBUG:  building index "pg_toast_23570_index" on table "pg_toast_23570" serially
2025-04-19 07:28:39.374 UTC [355] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:28:39.374 UTC [355] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:28:39.374 UTC [355] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:28:39.375 UTC [355] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:28:39.375 UTC [355] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:28:39.376 UTC [355] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:28:39.376 UTC [355] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:28:39.377 UTC [355] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:28:39.377 UTC [355] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:28:39.377 UTC [355] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:28:39.377 UTC [355] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:28:39.378 UTC [355] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:28:39.378 UTC [355] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:28:39.379 UTC [355] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:28:39.379 UTC [355] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:28:39.380 UTC [355] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:28:39.380 UTC [355] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:28:39.381 UTC [355] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:28:39.381 UTC [355] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:28:39.381 UTC [355] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:28:39.381 UTC [355] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:28:39.382 UTC [355] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:28:39.382 UTC [355] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:28:39.383 UTC [355] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:28:39.383 UTC [355] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:28:39.390 UTC [355] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:28:39.636 UTC [355] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$ZtCZ.C7qhT7N4Rf7XjLK0.CgKtuTq/RK.9MXb.1aa/EET25pB86FS')
	                RETURNING id, username, email
	                
2025-04-19 07:28:39.637 UTC [355] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:28:39.637 UTC [355] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:28:43.388 UTC [354] LOG:  statement: SELECT * FROM draws;
2025-04-19 07:28:50.316 UTC [363] DEBUG:  autovacuum: processing database "powerball"
2025-04-19 07:28:50.728 UTC [363] DEBUG:  rehashing catalog cache id 14 for pg_opclass; 17 tups, 8 buckets
2025-04-19 07:28:52.862 UTC [355] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 07:28:53.141 UTC [355] DEBUG:  unexpected EOF on client connection
2025-04-19 07:28:54.910 UTC [371] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:28:54.916 UTC [371] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:28:54.922 UTC [371] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:28:54.922 UTC [371] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:28:54.926 UTC [371] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:28:54.934 UTC [371] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:28:54.938 UTC [371] DEBUG:  building index "pg_toast_23607_index" on table "pg_toast_23607" serially
2025-04-19 07:28:54.939 UTC [371] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:28:54.940 UTC [371] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:28:54.940 UTC [371] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:28:54.941 UTC [371] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:28:54.941 UTC [371] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:28:54.941 UTC [371] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:28:54.942 UTC [371] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:28:54.942 UTC [371] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:28:54.942 UTC [371] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:28:54.943 UTC [371] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:28:54.944 UTC [371] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:28:54.944 UTC [371] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:28:54.944 UTC [371] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:28:54.945 UTC [371] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:28:54.945 UTC [371] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:28:54.945 UTC [371] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:28:54.946 UTC [371] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:28:54.947 UTC [371] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:28:54.947 UTC [371] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:28:54.947 UTC [371] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:28:54.948 UTC [371] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:28:54.948 UTC [371] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:28:54.948 UTC [371] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:28:54.950 UTC [371] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:28:54.951 UTC [371] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:28:54.951 UTC [371] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:28:54.951 UTC [371] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:28:54.952 UTC [371] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:28:54.954 UTC [371] DEBUG:  building index "pg_toast_23668_index" on table "pg_toast_23668" serially
2025-04-19 07:28:54.955 UTC [371] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:28:54.955 UTC [371] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:28:54.955 UTC [371] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:28:54.956 UTC [371] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:28:54.957 UTC [371] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:28:54.958 UTC [371] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:28:54.958 UTC [371] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:28:54.958 UTC [371] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:28:54.959 UTC [371] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:28:54.959 UTC [371] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:28:54.960 UTC [371] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:28:54.960 UTC [371] DEBUG:  building index "pg_toast_23701_index" on table "pg_toast_23701" serially
2025-04-19 07:28:54.961 UTC [371] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:28:54.961 UTC [371] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:28:54.961 UTC [371] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:28:54.962 UTC [371] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:28:54.963 UTC [371] DEBUG:  building index "pg_toast_23712_index" on table "pg_toast_23712" serially
2025-04-19 07:28:54.964 UTC [371] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:28:54.964 UTC [371] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:28:54.964 UTC [371] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:28:54.966 UTC [371] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:28:54.966 UTC [371] DEBUG:  building index "pg_toast_23735_index" on table "pg_toast_23735" serially
2025-04-19 07:28:54.967 UTC [371] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:28:54.967 UTC [371] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:28:54.967 UTC [371] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:28:54.968 UTC [371] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:28:54.968 UTC [371] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:28:54.969 UTC [371] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:28:54.969 UTC [371] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:28:54.970 UTC [371] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:28:54.970 UTC [371] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:28:54.971 UTC [371] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:28:54.971 UTC [371] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:28:54.972 UTC [371] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:28:54.972 UTC [371] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:28:54.973 UTC [371] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:28:54.973 UTC [371] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:28:54.974 UTC [371] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:28:54.974 UTC [371] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:28:54.974 UTC [371] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:28:54.974 UTC [371] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:28:54.975 UTC [371] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:28:54.975 UTC [371] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:28:54.976 UTC [371] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:28:54.976 UTC [371] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:28:54.977 UTC [371] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:28:54.977 UTC [371] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:28:54.987 UTC [371] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:28:55.257 UTC [371] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$Y22Ls58I3NAIWBhZ0eeTI.hs4RcwYFK6xX6L0wCptrMXosPoGteJK')
	                RETURNING id, username, email
	                
2025-04-19 07:28:55.258 UTC [371] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:28:55.259 UTC [371] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:28:55.259 UTC [371] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 07:28:55.269 UTC [371] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:28:55.272 UTC [371] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:28:55.276 UTC [371] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:28:55.280 UTC [371] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:28:55.280 UTC [371] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:28:55.284 UTC [371] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:28:55.289 UTC [371] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:28:55.291 UTC [371] DEBUG:  building index "pg_toast_23771_index" on table "pg_toast_23771" serially
2025-04-19 07:28:55.292 UTC [371] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:28:55.292 UTC [371] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:28:55.292 UTC [371] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:28:55.293 UTC [371] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:28:55.293 UTC [371] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:28:55.293 UTC [371] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:28:55.293 UTC [371] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:28:55.294 UTC [371] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:28:55.294 UTC [371] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:28:55.294 UTC [371] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:28:55.295 UTC [371] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:28:55.295 UTC [371] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:28:55.295 UTC [371] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:28:55.296 UTC [371] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:28:55.296 UTC [371] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:28:55.296 UTC [371] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:28:55.297 UTC [371] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:28:55.297 UTC [371] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:28:55.298 UTC [371] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:28:55.298 UTC [371] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:28:55.298 UTC [371] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:28:55.299 UTC [371] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:28:55.299 UTC [371] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:28:55.300 UTC [371] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:28:55.301 UTC [371] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:28:55.301 UTC [371] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:28:55.301 UTC [371] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:28:55.302 UTC [371] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:28:55.303 UTC [371] DEBUG:  building index "pg_toast_23832_index" on table "pg_toast_23832" serially
2025-04-19 07:28:55.304 UTC [371] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:28:55.304 UTC [371] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:28:55.304 UTC [371] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:28:55.305 UTC [371] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:28:55.306 UTC [371] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:28:55.307 UTC [371] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:28:55.307 UTC [371] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:28:55.307 UTC [371] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:28:55.308 UTC [371] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:28:55.308 UTC [371] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:28:55.309 UTC [371] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:28:55.310 UTC [371] DEBUG:  building index "pg_toast_23865_index" on table "pg_toast_23865" serially
2025-04-19 07:28:55.311 UTC [371] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:28:55.311 UTC [371] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:28:55.311 UTC [371] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:28:55.311 UTC [371] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:28:55.313 UTC [371] DEBUG:  building index "pg_toast_23876_index" on table "pg_toast_23876" serially
2025-04-19 07:28:55.313 UTC [371] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:28:55.314 UTC [371] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:28:55.314 UTC [371] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:28:55.315 UTC [371] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:28:55.316 UTC [371] DEBUG:  building index "pg_toast_23899_index" on table "pg_toast_23899" serially
2025-04-19 07:28:55.317 UTC [371] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:28:55.317 UTC [371] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:28:55.317 UTC [371] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:28:55.318 UTC [371] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:28:55.318 UTC [371] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:28:55.319 UTC [371] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:28:55.319 UTC [371] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:28:55.320 UTC [371] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:28:55.320 UTC [371] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:28:55.320 UTC [371] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:28:55.320 UTC [371] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:28:55.321 UTC [371] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:28:55.321 UTC [371] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:28:55.322 UTC [371] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:28:55.322 UTC [371] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:28:55.323 UTC [371] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:28:55.323 UTC [371] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:28:55.324 UTC [371] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:28:55.324 UTC [371] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:28:55.325 UTC [371] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:28:55.325 UTC [371] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:28:55.325 UTC [371] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:28:55.325 UTC [371] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:28:55.326 UTC [371] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:28:55.326 UTC [371] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:28:55.331 UTC [371] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:28:55.579 UTC [371] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$X8G9Ko1RtZ1DIZGgqM77UOQjd6pR2Om8HX8Q5vWmpEZQzVMbu8rE.')
	                RETURNING id, username, email
	                
2025-04-19 07:28:55.580 UTC [371] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:28:55.580 UTC [371] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:29:09.063 UTC [371] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 07:29:09.497 UTC [371] DEBUG:  unexpected EOF on client connection
2025-04-19 07:29:14.315 UTC [386] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:29:14.345 UTC [386] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:29:14.368 UTC [386] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:29:14.368 UTC [386] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:29:14.379 UTC [386] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:29:14.387 UTC [386] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:29:14.399 UTC [386] DEBUG:  building index "pg_toast_23935_index" on table "pg_toast_23935" serially
2025-04-19 07:29:14.402 UTC [386] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:29:14.404 UTC [386] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:29:14.404 UTC [386] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:29:14.405 UTC [386] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:29:14.405 UTC [386] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:29:14.405 UTC [386] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:29:14.406 UTC [386] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:29:14.407 UTC [386] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:29:14.407 UTC [386] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:29:14.408 UTC [386] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:29:14.409 UTC [386] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:29:14.409 UTC [386] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:29:14.409 UTC [386] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:29:14.411 UTC [386] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:29:14.411 UTC [386] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:29:14.411 UTC [386] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:29:14.412 UTC [386] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:29:14.414 UTC [386] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:29:14.414 UTC [386] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:29:14.414 UTC [386] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:29:14.416 UTC [386] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:29:14.416 UTC [386] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:29:14.416 UTC [386] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:29:14.419 UTC [386] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:29:14.420 UTC [386] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:29:14.421 UTC [386] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:29:14.421 UTC [386] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:29:14.422 UTC [386] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:29:14.426 UTC [386] DEBUG:  building index "pg_toast_23996_index" on table "pg_toast_23996" serially
2025-04-19 07:29:14.427 UTC [386] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:29:14.428 UTC [386] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:29:14.428 UTC [386] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:29:14.430 UTC [386] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:29:14.435 UTC [386] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:29:14.436 UTC [386] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:29:14.436 UTC [386] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:29:14.438 UTC [386] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:29:14.438 UTC [386] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:29:14.438 UTC [386] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:29:14.440 UTC [386] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:29:14.443 UTC [386] DEBUG:  building index "pg_toast_24029_index" on table "pg_toast_24029" serially
2025-04-19 07:29:14.444 UTC [386] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:29:14.445 UTC [386] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:29:14.445 UTC [386] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:29:14.447 UTC [386] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:29:14.448 UTC [386] DEBUG:  building index "pg_toast_24040_index" on table "pg_toast_24040" serially
2025-04-19 07:29:14.450 UTC [386] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:29:14.450 UTC [386] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:29:14.450 UTC [386] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:29:14.452 UTC [386] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:29:14.454 UTC [386] DEBUG:  building index "pg_toast_24063_index" on table "pg_toast_24063" serially
2025-04-19 07:29:14.455 UTC [386] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:29:14.455 UTC [386] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:29:14.455 UTC [386] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:29:14.457 UTC [386] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:29:14.457 UTC [386] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:29:14.458 UTC [386] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:29:14.459 UTC [386] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:29:14.460 UTC [386] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:29:14.460 UTC [386] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:29:14.462 UTC [386] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:29:14.462 UTC [386] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:29:14.463 UTC [386] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:29:14.463 UTC [386] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:29:14.464 UTC [386] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:29:14.464 UTC [386] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:29:14.465 UTC [386] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:29:14.465 UTC [386] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:29:14.465 UTC [386] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:29:14.465 UTC [386] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:29:14.467 UTC [386] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:29:14.467 UTC [386] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:29:14.469 UTC [386] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:29:14.469 UTC [386] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:29:14.470 UTC [386] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:29:14.470 UTC [386] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:29:14.490 UTC [386] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:29:14.880 UTC [386] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$WKhYwh5lnUjiq2Vkbv1TEO.E7l3as0GAwgi/X1I7s6HbdzkUeeM7W')
	                RETURNING id, username, email
	                
2025-04-19 07:29:14.882 UTC [386] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:29:14.882 UTC [386] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:29:14.884 UTC [386] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 07:29:14.932 UTC [386] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:29:14.944 UTC [386] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:29:14.952 UTC [386] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:29:14.981 UTC [386] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:29:14.981 UTC [386] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:29:15.005 UTC [386] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:29:15.027 UTC [386] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:29:15.041 UTC [386] DEBUG:  building index "pg_toast_24099_index" on table "pg_toast_24099" serially
2025-04-19 07:29:15.054 UTC [386] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:29:15.054 UTC [386] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:29:15.054 UTC [386] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:29:15.058 UTC [386] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:29:15.059 UTC [386] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:29:15.059 UTC [386] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:29:15.062 UTC [386] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:29:15.062 UTC [386] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:29:15.062 UTC [386] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:29:15.070 UTC [386] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:29:15.077 UTC [386] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:29:15.078 UTC [386] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:29:15.078 UTC [386] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:29:15.080 UTC [386] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:29:15.080 UTC [386] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:29:15.080 UTC [386] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:29:15.083 UTC [386] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:29:15.088 UTC [386] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:29:15.088 UTC [386] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:29:15.088 UTC [386] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:29:15.090 UTC [386] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:29:15.091 UTC [386] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:29:15.091 UTC [386] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:29:15.095 UTC [386] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:29:15.099 UTC [386] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:29:15.099 UTC [386] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:29:15.099 UTC [386] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:29:15.104 UTC [386] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:29:15.113 UTC [386] DEBUG:  building index "pg_toast_24160_index" on table "pg_toast_24160" serially
2025-04-19 07:29:15.114 UTC [386] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:29:15.115 UTC [386] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:29:15.115 UTC [386] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:29:15.119 UTC [386] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:29:15.120 UTC [386] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:29:15.121 UTC [386] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:29:15.121 UTC [386] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:29:15.131 UTC [386] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:29:15.132 UTC [386] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:29:15.132 UTC [386] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:29:15.140 UTC [386] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:29:15.144 UTC [386] DEBUG:  building index "pg_toast_24193_index" on table "pg_toast_24193" serially
2025-04-19 07:29:15.148 UTC [386] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:29:15.149 UTC [386] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:29:15.149 UTC [386] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:29:15.154 UTC [386] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:29:15.162 UTC [386] DEBUG:  building index "pg_toast_24204_index" on table "pg_toast_24204" serially
2025-04-19 07:29:15.168 UTC [386] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:29:15.170 UTC [386] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:29:15.170 UTC [386] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:29:15.211 UTC [386] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:29:15.213 UTC [386] DEBUG:  building index "pg_toast_24227_index" on table "pg_toast_24227" serially
2025-04-19 07:29:15.215 UTC [386] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:29:15.217 UTC [386] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:29:15.217 UTC [386] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:29:15.220 UTC [386] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:29:15.220 UTC [386] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:29:15.225 UTC [386] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:29:15.225 UTC [386] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:29:15.230 UTC [386] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:29:15.230 UTC [386] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:29:15.235 UTC [386] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:29:15.235 UTC [386] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:29:15.238 UTC [386] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:29:15.238 UTC [386] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:29:15.242 UTC [386] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:29:15.242 UTC [386] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:29:15.244 UTC [386] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:29:15.244 UTC [386] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:29:15.247 UTC [386] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:29:15.247 UTC [386] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:29:15.252 UTC [386] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:29:15.252 UTC [386] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:29:15.255 UTC [386] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:29:15.255 UTC [386] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:29:15.257 UTC [386] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:29:15.257 UTC [386] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:29:15.287 UTC [386] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:29:15.730 UTC [386] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$eFWFcQlSr4HVD/BCzjzl1.rBD2qeCqF3DEFre3piId0XqPOq9HaRy')
	                RETURNING id, username, email
	                
2025-04-19 07:29:15.732 UTC [386] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:29:15.733 UTC [386] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:29:20.342 UTC [387] DEBUG:  autovacuum: processing database "postgres"
2025-04-19 07:29:25.728 UTC [386] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 07:29:26.015 UTC [386] DEBUG:  unexpected EOF on client connection
2025-04-19 07:29:27.930 UTC [395] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:29:27.937 UTC [395] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:29:27.947 UTC [395] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:29:27.947 UTC [395] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:29:27.951 UTC [395] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:29:27.955 UTC [395] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:29:27.958 UTC [395] DEBUG:  building index "pg_toast_24263_index" on table "pg_toast_24263" serially
2025-04-19 07:29:27.959 UTC [395] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:29:27.960 UTC [395] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:29:27.960 UTC [395] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:29:27.961 UTC [395] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:29:27.961 UTC [395] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:29:27.961 UTC [395] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:29:27.962 UTC [395] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:29:27.962 UTC [395] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:29:27.962 UTC [395] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:29:27.964 UTC [395] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:29:27.965 UTC [395] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:29:27.965 UTC [395] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:29:27.965 UTC [395] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:29:27.966 UTC [395] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:29:27.966 UTC [395] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:29:27.966 UTC [395] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:29:27.967 UTC [395] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:29:27.968 UTC [395] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:29:27.968 UTC [395] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:29:27.968 UTC [395] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:29:27.969 UTC [395] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:29:27.969 UTC [395] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:29:27.969 UTC [395] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:29:27.970 UTC [395] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:29:27.971 UTC [395] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:29:27.972 UTC [395] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:29:27.972 UTC [395] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:29:27.973 UTC [395] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:29:27.975 UTC [395] DEBUG:  building index "pg_toast_24324_index" on table "pg_toast_24324" serially
2025-04-19 07:29:27.977 UTC [395] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:29:27.977 UTC [395] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:29:27.977 UTC [395] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:29:27.979 UTC [395] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:29:27.981 UTC [395] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:29:27.981 UTC [395] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:29:27.981 UTC [395] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:29:27.982 UTC [395] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:29:27.982 UTC [395] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:29:27.982 UTC [395] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:29:27.983 UTC [395] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:29:27.984 UTC [395] DEBUG:  building index "pg_toast_24357_index" on table "pg_toast_24357" serially
2025-04-19 07:29:27.985 UTC [395] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:29:27.985 UTC [395] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:29:27.985 UTC [395] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:29:27.986 UTC [395] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:29:27.988 UTC [395] DEBUG:  building index "pg_toast_24368_index" on table "pg_toast_24368" serially
2025-04-19 07:29:27.989 UTC [395] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:29:27.989 UTC [395] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:29:27.989 UTC [395] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:29:27.990 UTC [395] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:29:27.991 UTC [395] DEBUG:  building index "pg_toast_24391_index" on table "pg_toast_24391" serially
2025-04-19 07:29:27.992 UTC [395] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:29:27.992 UTC [395] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:29:27.992 UTC [395] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:29:27.993 UTC [395] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:29:27.993 UTC [395] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:29:27.994 UTC [395] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:29:27.994 UTC [395] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:29:27.995 UTC [395] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:29:27.995 UTC [395] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:29:27.996 UTC [395] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:29:27.996 UTC [395] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:29:27.997 UTC [395] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:29:27.997 UTC [395] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:29:27.997 UTC [395] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:29:27.997 UTC [395] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:29:27.998 UTC [395] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:29:27.998 UTC [395] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:29:27.999 UTC [395] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:29:27.999 UTC [395] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:29:28.000 UTC [395] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:29:28.000 UTC [395] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:29:28.001 UTC [395] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:29:28.001 UTC [395] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:29:28.002 UTC [395] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:29:28.002 UTC [395] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:29:28.010 UTC [395] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:29:28.291 UTC [395] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$Ndf8l6UfhXHsEW28qDx8oucf.eq1TVUNy/Jtu8/f2I5WdKjTIP5oW')
	                RETURNING id, username, email
	                
2025-04-19 07:29:28.291 UTC [395] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:29:28.292 UTC [395] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:29:28.293 UTC [395] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 07:29:28.316 UTC [395] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:29:28.321 UTC [395] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:29:28.328 UTC [395] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:29:28.344 UTC [395] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:29:28.344 UTC [395] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:29:28.348 UTC [395] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:29:28.352 UTC [395] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:29:28.353 UTC [395] DEBUG:  building index "pg_toast_24427_index" on table "pg_toast_24427" serially
2025-04-19 07:29:28.355 UTC [395] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:29:28.355 UTC [395] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:29:28.355 UTC [395] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:29:28.356 UTC [395] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:29:28.356 UTC [395] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:29:28.356 UTC [395] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:29:28.357 UTC [395] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:29:28.357 UTC [395] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:29:28.358 UTC [395] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:29:28.358 UTC [395] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:29:28.359 UTC [395] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:29:28.359 UTC [395] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:29:28.359 UTC [395] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:29:28.360 UTC [395] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:29:28.360 UTC [395] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:29:28.361 UTC [395] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:29:28.361 UTC [395] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:29:28.362 UTC [395] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:29:28.362 UTC [395] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:29:28.362 UTC [395] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:29:28.363 UTC [395] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:29:28.363 UTC [395] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:29:28.363 UTC [395] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:29:28.364 UTC [395] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:29:28.365 UTC [395] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:29:28.366 UTC [395] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:29:28.366 UTC [395] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:29:28.367 UTC [395] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:29:28.368 UTC [395] DEBUG:  building index "pg_toast_24488_index" on table "pg_toast_24488" serially
2025-04-19 07:29:28.369 UTC [395] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:29:28.369 UTC [395] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:29:28.369 UTC [395] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:29:28.370 UTC [395] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:29:28.371 UTC [395] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:29:28.371 UTC [395] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:29:28.371 UTC [395] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:29:28.372 UTC [395] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:29:28.372 UTC [395] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:29:28.372 UTC [395] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:29:28.373 UTC [395] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:29:28.374 UTC [395] DEBUG:  building index "pg_toast_24521_index" on table "pg_toast_24521" serially
2025-04-19 07:29:28.376 UTC [395] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:29:28.376 UTC [395] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:29:28.376 UTC [395] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:29:28.379 UTC [395] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:29:28.381 UTC [395] DEBUG:  building index "pg_toast_24532_index" on table "pg_toast_24532" serially
2025-04-19 07:29:28.384 UTC [395] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:29:28.385 UTC [395] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:29:28.385 UTC [395] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:29:28.387 UTC [395] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:29:28.388 UTC [395] DEBUG:  building index "pg_toast_24555_index" on table "pg_toast_24555" serially
2025-04-19 07:29:28.391 UTC [395] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:29:28.393 UTC [395] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:29:28.393 UTC [395] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:29:28.397 UTC [395] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:29:28.397 UTC [395] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:29:28.401 UTC [395] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:29:28.401 UTC [395] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:29:28.403 UTC [395] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:29:28.403 UTC [395] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:29:28.406 UTC [395] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:29:28.407 UTC [395] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:29:28.410 UTC [395] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:29:28.410 UTC [395] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:29:28.422 UTC [395] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:29:28.422 UTC [395] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:29:28.431 UTC [395] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:29:28.431 UTC [395] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:29:28.438 UTC [395] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:29:28.438 UTC [395] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:29:28.443 UTC [395] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:29:28.443 UTC [395] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:29:28.448 UTC [395] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:29:28.448 UTC [395] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:29:28.449 UTC [395] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:29:28.449 UTC [395] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:29:28.462 UTC [395] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:29:28.722 UTC [395] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$M.ZVJhi4chQLcSHaTuD24uWFPEgo3q1Uw.ryp69e1U9wMr0t884wO')
	                RETURNING id, username, email
	                
2025-04-19 07:29:28.723 UTC [395] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:29:28.723 UTC [395] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:29:42.311 UTC [395] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 07:29:42.749 UTC [395] DEBUG:  unexpected EOF on client connection
2025-04-19 07:29:46.646 UTC [411] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:29:46.659 UTC [411] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:29:46.671 UTC [411] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:29:46.671 UTC [411] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:29:46.681 UTC [411] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:29:46.687 UTC [411] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:29:46.693 UTC [411] DEBUG:  building index "pg_toast_24591_index" on table "pg_toast_24591" serially
2025-04-19 07:29:46.695 UTC [411] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:29:46.695 UTC [411] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:29:46.695 UTC [411] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:29:46.696 UTC [411] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:29:46.696 UTC [411] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:29:46.696 UTC [411] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:29:46.697 UTC [411] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:29:46.698 UTC [411] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:29:46.698 UTC [411] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:29:46.699 UTC [411] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:29:46.700 UTC [411] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:29:46.700 UTC [411] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:29:46.700 UTC [411] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:29:46.701 UTC [411] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:29:46.701 UTC [411] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:29:46.701 UTC [411] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:29:46.702 UTC [411] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:29:46.704 UTC [411] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:29:46.704 UTC [411] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:29:46.704 UTC [411] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:29:46.706 UTC [411] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:29:46.706 UTC [411] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:29:46.706 UTC [411] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:29:46.708 UTC [411] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:29:46.709 UTC [411] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:29:46.709 UTC [411] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:29:46.710 UTC [411] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:29:46.712 UTC [411] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:29:46.715 UTC [411] DEBUG:  building index "pg_toast_24652_index" on table "pg_toast_24652" serially
2025-04-19 07:29:46.716 UTC [411] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:29:46.716 UTC [411] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:29:46.716 UTC [411] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:29:46.717 UTC [411] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:29:46.719 UTC [411] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:29:46.720 UTC [411] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:29:46.720 UTC [411] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:29:46.720 UTC [411] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:29:46.721 UTC [411] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:29:46.721 UTC [411] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:29:46.723 UTC [411] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:29:46.724 UTC [411] DEBUG:  building index "pg_toast_24685_index" on table "pg_toast_24685" serially
2025-04-19 07:29:46.725 UTC [411] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:29:46.726 UTC [411] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:29:46.726 UTC [411] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:29:46.727 UTC [411] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:29:46.729 UTC [411] DEBUG:  building index "pg_toast_24696_index" on table "pg_toast_24696" serially
2025-04-19 07:29:46.730 UTC [411] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:29:46.730 UTC [411] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:29:46.730 UTC [411] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:29:46.732 UTC [411] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:29:46.733 UTC [411] DEBUG:  building index "pg_toast_24719_index" on table "pg_toast_24719" serially
2025-04-19 07:29:46.734 UTC [411] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:29:46.734 UTC [411] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:29:46.734 UTC [411] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:29:46.736 UTC [411] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:29:46.736 UTC [411] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:29:46.737 UTC [411] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:29:46.737 UTC [411] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:29:46.738 UTC [411] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:29:46.738 UTC [411] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:29:46.739 UTC [411] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:29:46.739 UTC [411] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:29:46.740 UTC [411] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:29:46.740 UTC [411] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:29:46.741 UTC [411] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:29:46.741 UTC [411] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:29:46.741 UTC [411] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:29:46.742 UTC [411] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:29:46.742 UTC [411] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:29:46.742 UTC [411] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:29:46.743 UTC [411] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:29:46.743 UTC [411] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:29:46.745 UTC [411] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:29:46.745 UTC [411] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:29:46.747 UTC [411] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:29:46.747 UTC [411] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:29:46.762 UTC [411] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:29:47.042 UTC [411] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$AHKbU1FUMqw7aCLn.hy3vuGjh0zVUiwlcjjrBv3/0vNBP1yYzOPrG')
	                RETURNING id, username, email
	                
2025-04-19 07:29:47.043 UTC [411] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:29:47.044 UTC [411] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:29:47.045 UTC [411] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 07:29:47.063 UTC [411] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:29:47.064 UTC [411] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:29:47.069 UTC [411] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:29:47.078 UTC [411] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:29:47.078 UTC [411] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:29:47.089 UTC [411] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:29:47.101 UTC [411] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:29:47.102 UTC [411] DEBUG:  building index "pg_toast_24755_index" on table "pg_toast_24755" serially
2025-04-19 07:29:47.104 UTC [411] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:29:47.104 UTC [411] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:29:47.104 UTC [411] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:29:47.105 UTC [411] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:29:47.105 UTC [411] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:29:47.105 UTC [411] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:29:47.106 UTC [411] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:29:47.106 UTC [411] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:29:47.106 UTC [411] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:29:47.107 UTC [411] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:29:47.111 UTC [411] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:29:47.111 UTC [411] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:29:47.111 UTC [411] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:29:47.112 UTC [411] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:29:47.112 UTC [411] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:29:47.113 UTC [411] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:29:47.113 UTC [411] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:29:47.114 UTC [411] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:29:47.115 UTC [411] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:29:47.115 UTC [411] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:29:47.115 UTC [411] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:29:47.116 UTC [411] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:29:47.116 UTC [411] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:29:47.117 UTC [411] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:29:47.118 UTC [411] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:29:47.119 UTC [411] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:29:47.119 UTC [411] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:29:47.121 UTC [411] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:29:47.122 UTC [411] DEBUG:  building index "pg_toast_24816_index" on table "pg_toast_24816" serially
2025-04-19 07:29:47.123 UTC [411] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:29:47.124 UTC [411] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:29:47.124 UTC [411] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:29:47.125 UTC [411] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:29:47.126 UTC [411] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:29:47.126 UTC [411] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:29:47.126 UTC [411] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:29:47.127 UTC [411] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:29:47.127 UTC [411] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:29:47.127 UTC [411] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:29:47.128 UTC [411] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:29:47.130 UTC [411] DEBUG:  building index "pg_toast_24849_index" on table "pg_toast_24849" serially
2025-04-19 07:29:47.130 UTC [411] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:29:47.131 UTC [411] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:29:47.131 UTC [411] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:29:47.132 UTC [411] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:29:47.133 UTC [411] DEBUG:  building index "pg_toast_24860_index" on table "pg_toast_24860" serially
2025-04-19 07:29:47.134 UTC [411] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:29:47.134 UTC [411] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:29:47.134 UTC [411] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:29:47.136 UTC [411] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:29:47.137 UTC [411] DEBUG:  building index "pg_toast_24883_index" on table "pg_toast_24883" serially
2025-04-19 07:29:47.138 UTC [411] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:29:47.139 UTC [411] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:29:47.139 UTC [411] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:29:47.140 UTC [411] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:29:47.140 UTC [411] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:29:47.140 UTC [411] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:29:47.140 UTC [411] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:29:47.141 UTC [411] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:29:47.141 UTC [411] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:29:47.142 UTC [411] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:29:47.142 UTC [411] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:29:47.143 UTC [411] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:29:47.143 UTC [411] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:29:47.144 UTC [411] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:29:47.144 UTC [411] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:29:47.144 UTC [411] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:29:47.144 UTC [411] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:29:47.145 UTC [411] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:29:47.145 UTC [411] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:29:47.146 UTC [411] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:29:47.146 UTC [411] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:29:47.147 UTC [411] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:29:47.147 UTC [411] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:29:47.148 UTC [411] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:29:47.148 UTC [411] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:29:47.157 UTC [411] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:29:47.417 UTC [411] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$b6PylHFbxGuZgZWT5x6tseVG9vxPIkI2EQYxX9vYpXSfobZb8Dlz.')
	                RETURNING id, username, email
	                
2025-04-19 07:29:47.417 UTC [411] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:29:47.418 UTC [411] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:29:50.340 UTC [412] DEBUG:  autovacuum: processing database "powerball"
2025-04-19 07:29:50.590 UTC [412] DEBUG:  rehashing catalog cache id 14 for pg_opclass; 17 tups, 8 buckets
2025-04-19 07:29:59.651 UTC [411] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 07:30:00.150 UTC [411] DEBUG:  unexpected EOF on client connection
2025-04-19 07:30:04.518 UTC [427] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:30:04.545 UTC [427] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:30:04.561 UTC [427] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:30:04.561 UTC [427] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:30:04.567 UTC [427] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:30:04.573 UTC [427] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:30:04.586 UTC [427] DEBUG:  building index "pg_toast_24920_index" on table "pg_toast_24920" serially
2025-04-19 07:30:04.589 UTC [427] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:30:04.590 UTC [427] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:30:04.590 UTC [427] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:30:04.591 UTC [427] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:30:04.592 UTC [427] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:30:04.592 UTC [427] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:30:04.593 UTC [427] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:30:04.593 UTC [427] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:30:04.593 UTC [427] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:30:04.595 UTC [427] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:30:04.596 UTC [427] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:30:04.596 UTC [427] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:30:04.596 UTC [427] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:30:04.599 UTC [427] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:30:04.600 UTC [427] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:30:04.600 UTC [427] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:30:04.601 UTC [427] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:30:04.602 UTC [427] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:30:04.603 UTC [427] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:30:04.603 UTC [427] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:30:04.603 UTC [427] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:30:04.604 UTC [427] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:30:04.604 UTC [427] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:30:04.606 UTC [427] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:30:04.608 UTC [427] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:30:04.608 UTC [427] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:30:04.608 UTC [427] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:30:04.610 UTC [427] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:30:04.613 UTC [427] DEBUG:  building index "pg_toast_24981_index" on table "pg_toast_24981" serially
2025-04-19 07:30:04.614 UTC [427] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:30:04.614 UTC [427] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:30:04.614 UTC [427] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:30:04.616 UTC [427] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:30:04.618 UTC [427] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:30:04.619 UTC [427] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:30:04.620 UTC [427] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:30:04.622 UTC [427] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:30:04.622 UTC [427] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:30:04.622 UTC [427] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:30:04.625 UTC [427] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:30:04.628 UTC [427] DEBUG:  building index "pg_toast_25014_index" on table "pg_toast_25014" serially
2025-04-19 07:30:04.630 UTC [427] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:30:04.630 UTC [427] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:30:04.630 UTC [427] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:30:04.632 UTC [427] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:30:04.633 UTC [427] DEBUG:  building index "pg_toast_25025_index" on table "pg_toast_25025" serially
2025-04-19 07:30:04.635 UTC [427] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:30:04.636 UTC [427] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:30:04.636 UTC [427] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:30:04.638 UTC [427] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:30:04.640 UTC [427] DEBUG:  building index "pg_toast_25048_index" on table "pg_toast_25048" serially
2025-04-19 07:30:04.641 UTC [427] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:30:04.641 UTC [427] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:30:04.641 UTC [427] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:30:04.642 UTC [427] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:30:04.642 UTC [427] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:30:04.644 UTC [427] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:30:04.644 UTC [427] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:30:04.645 UTC [427] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:30:04.645 UTC [427] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:30:04.646 UTC [427] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:30:04.646 UTC [427] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:30:04.647 UTC [427] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:30:04.647 UTC [427] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:30:04.650 UTC [427] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:30:04.650 UTC [427] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:30:04.652 UTC [427] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:30:04.652 UTC [427] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:30:04.653 UTC [427] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:30:04.653 UTC [427] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:30:04.655 UTC [427] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:30:04.655 UTC [427] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:30:04.656 UTC [427] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:30:04.656 UTC [427] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:30:04.657 UTC [427] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:30:04.657 UTC [427] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:30:04.698 UTC [427] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:30:05.091 UTC [427] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$cqsJGER0sSndD77APzoLPOKs5HtmxyZKMzQ/Jp6zzhoXGWph8yMAe')
	                RETURNING id, username, email
	                
2025-04-19 07:30:05.094 UTC [427] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:30:05.096 UTC [427] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:30:05.098 UTC [427] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 07:30:05.139 UTC [427] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:30:05.145 UTC [427] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:30:05.154 UTC [427] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:30:05.163 UTC [427] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:30:05.163 UTC [427] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:30:05.171 UTC [427] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:30:05.183 UTC [427] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:30:05.186 UTC [427] DEBUG:  building index "pg_toast_25084_index" on table "pg_toast_25084" serially
2025-04-19 07:30:05.193 UTC [427] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:30:05.194 UTC [427] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:30:05.194 UTC [427] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:30:05.196 UTC [427] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:30:05.197 UTC [427] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:30:05.197 UTC [427] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:30:05.199 UTC [427] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:30:05.199 UTC [427] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:30:05.199 UTC [427] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:30:05.201 UTC [427] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:30:05.207 UTC [427] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:30:05.208 UTC [427] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:30:05.208 UTC [427] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:30:05.210 UTC [427] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:30:05.210 UTC [427] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:30:05.210 UTC [427] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:30:05.213 UTC [427] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:30:05.214 UTC [427] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:30:05.215 UTC [427] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:30:05.215 UTC [427] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:30:05.216 UTC [427] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:30:05.216 UTC [427] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:30:05.216 UTC [427] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:30:05.218 UTC [427] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:30:05.219 UTC [427] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:30:05.220 UTC [427] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:30:05.220 UTC [427] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:30:05.221 UTC [427] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:30:05.224 UTC [427] DEBUG:  building index "pg_toast_25145_index" on table "pg_toast_25145" serially
2025-04-19 07:30:05.226 UTC [427] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:30:05.226 UTC [427] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:30:05.226 UTC [427] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:30:05.228 UTC [427] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:30:05.233 UTC [427] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:30:05.233 UTC [427] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:30:05.233 UTC [427] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:30:05.236 UTC [427] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:30:05.237 UTC [427] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:30:05.237 UTC [427] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:30:05.240 UTC [427] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:30:05.242 UTC [427] DEBUG:  building index "pg_toast_25178_index" on table "pg_toast_25178" serially
2025-04-19 07:30:05.243 UTC [427] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:30:05.243 UTC [427] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:30:05.243 UTC [427] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:30:05.244 UTC [427] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:30:05.246 UTC [427] DEBUG:  building index "pg_toast_25189_index" on table "pg_toast_25189" serially
2025-04-19 07:30:05.249 UTC [427] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:30:05.249 UTC [427] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:30:05.249 UTC [427] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:30:05.252 UTC [427] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:30:05.253 UTC [427] DEBUG:  building index "pg_toast_25212_index" on table "pg_toast_25212" serially
2025-04-19 07:30:05.254 UTC [427] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:30:05.255 UTC [427] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:30:05.255 UTC [427] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:30:05.257 UTC [427] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:30:05.257 UTC [427] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:30:05.258 UTC [427] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:30:05.258 UTC [427] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:30:05.259 UTC [427] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:30:05.259 UTC [427] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:30:05.260 UTC [427] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:30:05.260 UTC [427] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:30:05.262 UTC [427] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:30:05.262 UTC [427] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:30:05.263 UTC [427] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:30:05.263 UTC [427] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:30:05.264 UTC [427] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:30:05.265 UTC [427] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:30:05.266 UTC [427] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:30:05.266 UTC [427] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:30:05.267 UTC [427] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:30:05.267 UTC [427] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:30:05.268 UTC [427] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:30:05.268 UTC [427] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:30:05.270 UTC [427] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:30:05.270 UTC [427] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:30:05.281 UTC [427] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:30:05.553 UTC [427] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$bVzxMXCFet.akkX2jozc/OqWJHyWRea6jyqEHkhIOjgirwHUw3osi')
	                RETURNING id, username, email
	                
2025-04-19 07:30:05.554 UTC [427] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:30:05.555 UTC [427] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:30:16.346 UTC [427] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 07:30:16.661 UTC [427] DEBUG:  unexpected EOF on client connection
2025-04-19 07:30:18.769 UTC [434] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:30:18.781 UTC [434] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:30:18.789 UTC [434] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:30:18.789 UTC [434] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:30:18.794 UTC [434] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:30:18.799 UTC [434] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:30:18.803 UTC [434] DEBUG:  building index "pg_toast_25248_index" on table "pg_toast_25248" serially
2025-04-19 07:30:18.804 UTC [434] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:30:18.805 UTC [434] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:30:18.805 UTC [434] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:30:18.806 UTC [434] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:30:18.806 UTC [434] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:30:18.806 UTC [434] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:30:18.807 UTC [434] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:30:18.807 UTC [434] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:30:18.807 UTC [434] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:30:18.808 UTC [434] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:30:18.809 UTC [434] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:30:18.810 UTC [434] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:30:18.810 UTC [434] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:30:18.811 UTC [434] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:30:18.811 UTC [434] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:30:18.811 UTC [434] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:30:18.811 UTC [434] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:30:18.813 UTC [434] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:30:18.813 UTC [434] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:30:18.813 UTC [434] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:30:18.814 UTC [434] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:30:18.814 UTC [434] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:30:18.814 UTC [434] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:30:18.816 UTC [434] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:30:18.818 UTC [434] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:30:18.818 UTC [434] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:30:18.818 UTC [434] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:30:18.820 UTC [434] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:30:18.823 UTC [434] DEBUG:  building index "pg_toast_25309_index" on table "pg_toast_25309" serially
2025-04-19 07:30:18.824 UTC [434] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:30:18.825 UTC [434] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:30:18.825 UTC [434] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:30:18.827 UTC [434] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:30:18.829 UTC [434] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:30:18.829 UTC [434] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:30:18.829 UTC [434] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:30:18.830 UTC [434] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:30:18.830 UTC [434] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:30:18.830 UTC [434] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:30:18.831 UTC [434] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:30:18.833 UTC [434] DEBUG:  building index "pg_toast_25342_index" on table "pg_toast_25342" serially
2025-04-19 07:30:18.833 UTC [434] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:30:18.834 UTC [434] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:30:18.834 UTC [434] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:30:18.835 UTC [434] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:30:18.836 UTC [434] DEBUG:  building index "pg_toast_25353_index" on table "pg_toast_25353" serially
2025-04-19 07:30:18.837 UTC [434] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:30:18.837 UTC [434] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:30:18.837 UTC [434] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:30:18.839 UTC [434] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:30:18.840 UTC [434] DEBUG:  building index "pg_toast_25376_index" on table "pg_toast_25376" serially
2025-04-19 07:30:18.841 UTC [434] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:30:18.841 UTC [434] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:30:18.841 UTC [434] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:30:18.843 UTC [434] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:30:18.843 UTC [434] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:30:18.844 UTC [434] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:30:18.844 UTC [434] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:30:18.845 UTC [434] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:30:18.845 UTC [434] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:30:18.845 UTC [434] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:30:18.845 UTC [434] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:30:18.846 UTC [434] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:30:18.846 UTC [434] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:30:18.847 UTC [434] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:30:18.847 UTC [434] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:30:18.848 UTC [434] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:30:18.848 UTC [434] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:30:18.849 UTC [434] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:30:18.849 UTC [434] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:30:18.850 UTC [434] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:30:18.850 UTC [434] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:30:18.851 UTC [434] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:30:18.851 UTC [434] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:30:18.852 UTC [434] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:30:18.852 UTC [434] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:30:18.860 UTC [434] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:30:19.128 UTC [434] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$oK2ZfEemBfc5FNM.vpWz9.H7FmEROQznEsgn5XnMkmX5Ia6Qp.fR.')
	                RETURNING id, username, email
	                
2025-04-19 07:30:19.129 UTC [434] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:30:19.130 UTC [434] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:30:19.130 UTC [434] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 07:30:19.139 UTC [434] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:30:19.140 UTC [434] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:30:19.143 UTC [434] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:30:19.147 UTC [434] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:30:19.147 UTC [434] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:30:19.150 UTC [434] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:30:19.153 UTC [434] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:30:19.154 UTC [434] DEBUG:  building index "pg_toast_25412_index" on table "pg_toast_25412" serially
2025-04-19 07:30:19.155 UTC [434] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:30:19.155 UTC [434] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:30:19.155 UTC [434] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:30:19.156 UTC [434] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:30:19.156 UTC [434] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:30:19.156 UTC [434] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:30:19.157 UTC [434] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:30:19.157 UTC [434] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:30:19.157 UTC [434] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:30:19.158 UTC [434] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:30:19.159 UTC [434] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:30:19.159 UTC [434] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:30:19.159 UTC [434] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:30:19.160 UTC [434] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:30:19.160 UTC [434] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:30:19.160 UTC [434] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:30:19.161 UTC [434] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:30:19.162 UTC [434] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:30:19.162 UTC [434] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:30:19.162 UTC [434] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:30:19.163 UTC [434] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:30:19.163 UTC [434] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:30:19.164 UTC [434] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:30:19.165 UTC [434] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:30:19.166 UTC [434] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:30:19.166 UTC [434] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:30:19.166 UTC [434] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:30:19.167 UTC [434] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:30:19.168 UTC [434] DEBUG:  building index "pg_toast_25473_index" on table "pg_toast_25473" serially
2025-04-19 07:30:19.169 UTC [434] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:30:19.169 UTC [434] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:30:19.169 UTC [434] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:30:19.170 UTC [434] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:30:19.171 UTC [434] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:30:19.172 UTC [434] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:30:19.172 UTC [434] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:30:19.173 UTC [434] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:30:19.173 UTC [434] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:30:19.173 UTC [434] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:30:19.174 UTC [434] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:30:19.175 UTC [434] DEBUG:  building index "pg_toast_25506_index" on table "pg_toast_25506" serially
2025-04-19 07:30:19.176 UTC [434] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:30:19.176 UTC [434] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:30:19.176 UTC [434] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:30:19.177 UTC [434] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:30:19.178 UTC [434] DEBUG:  building index "pg_toast_25517_index" on table "pg_toast_25517" serially
2025-04-19 07:30:19.178 UTC [434] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:30:19.179 UTC [434] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:30:19.179 UTC [434] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:30:19.180 UTC [434] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:30:19.181 UTC [434] DEBUG:  building index "pg_toast_25540_index" on table "pg_toast_25540" serially
2025-04-19 07:30:19.182 UTC [434] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:30:19.182 UTC [434] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:30:19.182 UTC [434] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:30:19.183 UTC [434] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:30:19.183 UTC [434] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:30:19.183 UTC [434] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:30:19.183 UTC [434] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:30:19.185 UTC [434] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:30:19.185 UTC [434] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:30:19.185 UTC [434] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:30:19.185 UTC [434] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:30:19.186 UTC [434] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:30:19.186 UTC [434] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:30:19.187 UTC [434] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:30:19.187 UTC [434] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:30:19.188 UTC [434] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:30:19.188 UTC [434] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:30:19.189 UTC [434] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:30:19.189 UTC [434] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:30:19.189 UTC [434] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:30:19.189 UTC [434] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:30:19.190 UTC [434] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:30:19.190 UTC [434] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:30:19.191 UTC [434] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:30:19.191 UTC [434] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:30:19.200 UTC [434] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:30:19.464 UTC [434] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$krl4VT1ir1UkbDtRFaMuruWUfm.ARDCYoG5wDFJTTnGiyzbwdQoMG')
	                RETURNING id, username, email
	                
2025-04-19 07:30:19.466 UTC [434] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:30:19.466 UTC [434] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:30:20.333 UTC [435] DEBUG:  autovacuum: processing database "postgres"
2025-04-19 07:30:32.359 UTC [434] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 07:30:32.654 UTC [434] DEBUG:  unexpected EOF on client connection
2025-04-19 07:30:34.708 UTC [450] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:30:34.717 UTC [450] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:30:34.727 UTC [450] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:30:34.727 UTC [450] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:30:34.731 UTC [450] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:30:34.735 UTC [450] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:30:34.738 UTC [450] DEBUG:  building index "pg_toast_25576_index" on table "pg_toast_25576" serially
2025-04-19 07:30:34.739 UTC [450] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:30:34.740 UTC [450] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:30:34.740 UTC [450] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:30:34.741 UTC [450] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:30:34.741 UTC [450] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:30:34.741 UTC [450] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:30:34.742 UTC [450] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:30:34.742 UTC [450] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:30:34.742 UTC [450] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:30:34.743 UTC [450] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:30:34.744 UTC [450] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:30:34.744 UTC [450] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:30:34.744 UTC [450] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:30:34.745 UTC [450] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:30:34.745 UTC [450] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:30:34.745 UTC [450] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:30:34.746 UTC [450] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:30:34.747 UTC [450] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:30:34.748 UTC [450] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:30:34.748 UTC [450] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:30:34.749 UTC [450] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:30:34.749 UTC [450] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:30:34.749 UTC [450] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:30:34.750 UTC [450] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:30:34.751 UTC [450] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:30:34.752 UTC [450] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:30:34.752 UTC [450] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:30:34.753 UTC [450] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:30:34.755 UTC [450] DEBUG:  building index "pg_toast_25637_index" on table "pg_toast_25637" serially
2025-04-19 07:30:34.756 UTC [450] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:30:34.756 UTC [450] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:30:34.756 UTC [450] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:30:34.757 UTC [450] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:30:34.758 UTC [450] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:30:34.758 UTC [450] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:30:34.758 UTC [450] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:30:34.759 UTC [450] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:30:34.759 UTC [450] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:30:34.759 UTC [450] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:30:34.761 UTC [450] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:30:34.762 UTC [450] DEBUG:  building index "pg_toast_25670_index" on table "pg_toast_25670" serially
2025-04-19 07:30:34.763 UTC [450] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:30:34.763 UTC [450] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:30:34.763 UTC [450] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:30:34.764 UTC [450] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:30:34.766 UTC [450] DEBUG:  building index "pg_toast_25681_index" on table "pg_toast_25681" serially
2025-04-19 07:30:34.766 UTC [450] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:30:34.767 UTC [450] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:30:34.767 UTC [450] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:30:34.768 UTC [450] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:30:34.769 UTC [450] DEBUG:  building index "pg_toast_25704_index" on table "pg_toast_25704" serially
2025-04-19 07:30:34.770 UTC [450] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:30:34.770 UTC [450] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:30:34.770 UTC [450] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:30:34.771 UTC [450] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:30:34.772 UTC [450] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:30:34.773 UTC [450] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:30:34.773 UTC [450] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:30:34.773 UTC [450] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:30:34.774 UTC [450] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:30:34.775 UTC [450] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:30:34.775 UTC [450] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:30:34.775 UTC [450] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:30:34.775 UTC [450] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:30:34.776 UTC [450] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:30:34.776 UTC [450] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:30:34.777 UTC [450] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:30:34.777 UTC [450] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:30:34.778 UTC [450] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:30:34.778 UTC [450] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:30:34.779 UTC [450] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:30:34.779 UTC [450] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:30:34.779 UTC [450] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:30:34.779 UTC [450] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:30:34.780 UTC [450] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:30:34.780 UTC [450] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:30:34.794 UTC [450] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:30:35.062 UTC [450] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$WiVlv2DBAdu9JyVJ1M010.qzpkcz5GhcITSaB6AdKjr1moJYqA/Mu')
	                RETURNING id, username, email
	                
2025-04-19 07:30:35.063 UTC [450] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:30:35.063 UTC [450] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:30:35.064 UTC [450] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 07:30:35.072 UTC [450] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:30:35.073 UTC [450] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:30:35.076 UTC [450] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:30:35.081 UTC [450] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:30:35.081 UTC [450] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:30:35.084 UTC [450] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:30:35.088 UTC [450] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:30:35.089 UTC [450] DEBUG:  building index "pg_toast_25740_index" on table "pg_toast_25740" serially
2025-04-19 07:30:35.090 UTC [450] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:30:35.090 UTC [450] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:30:35.090 UTC [450] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:30:35.091 UTC [450] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:30:35.091 UTC [450] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:30:35.091 UTC [450] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:30:35.092 UTC [450] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:30:35.092 UTC [450] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:30:35.092 UTC [450] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:30:35.093 UTC [450] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:30:35.094 UTC [450] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:30:35.094 UTC [450] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:30:35.094 UTC [450] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:30:35.095 UTC [450] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:30:35.095 UTC [450] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:30:35.095 UTC [450] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:30:35.095 UTC [450] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:30:35.096 UTC [450] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:30:35.096 UTC [450] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:30:35.096 UTC [450] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:30:35.097 UTC [450] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:30:35.097 UTC [450] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:30:35.097 UTC [450] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:30:35.098 UTC [450] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:30:35.100 UTC [450] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:30:35.100 UTC [450] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:30:35.100 UTC [450] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:30:35.101 UTC [450] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:30:35.103 UTC [450] DEBUG:  building index "pg_toast_25801_index" on table "pg_toast_25801" serially
2025-04-19 07:30:35.104 UTC [450] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:30:35.104 UTC [450] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:30:35.104 UTC [450] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:30:35.105 UTC [450] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:30:35.106 UTC [450] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:30:35.106 UTC [450] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:30:35.106 UTC [450] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:30:35.107 UTC [450] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:30:35.107 UTC [450] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:30:35.107 UTC [450] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:30:35.108 UTC [450] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:30:35.109 UTC [450] DEBUG:  building index "pg_toast_25834_index" on table "pg_toast_25834" serially
2025-04-19 07:30:35.110 UTC [450] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:30:35.110 UTC [450] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:30:35.110 UTC [450] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:30:35.111 UTC [450] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:30:35.112 UTC [450] DEBUG:  building index "pg_toast_25845_index" on table "pg_toast_25845" serially
2025-04-19 07:30:35.113 UTC [450] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:30:35.113 UTC [450] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:30:35.113 UTC [450] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:30:35.114 UTC [450] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:30:35.115 UTC [450] DEBUG:  building index "pg_toast_25868_index" on table "pg_toast_25868" serially
2025-04-19 07:30:35.116 UTC [450] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:30:35.116 UTC [450] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:30:35.116 UTC [450] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:30:35.117 UTC [450] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:30:35.117 UTC [450] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:30:35.118 UTC [450] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:30:35.118 UTC [450] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:30:35.119 UTC [450] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:30:35.119 UTC [450] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:30:35.120 UTC [450] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:30:35.120 UTC [450] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:30:35.121 UTC [450] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:30:35.121 UTC [450] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:30:35.122 UTC [450] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:30:35.122 UTC [450] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:30:35.123 UTC [450] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:30:35.123 UTC [450] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:30:35.123 UTC [450] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:30:35.123 UTC [450] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:30:35.124 UTC [450] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:30:35.124 UTC [450] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:30:35.125 UTC [450] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:30:35.125 UTC [450] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:30:35.126 UTC [450] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:30:35.126 UTC [450] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:30:35.133 UTC [450] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:30:35.380 UTC [450] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$Ibr4GpA4OqC33YhI7myhF.vHo84XzDQKrxVlEytqKnakJhjeD0uGu')
	                RETURNING id, username, email
	                
2025-04-19 07:30:35.381 UTC [450] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:30:35.381 UTC [450] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:30:48.345 UTC [450] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 07:30:48.660 UTC [450] DEBUG:  unexpected EOF on client connection
2025-04-19 07:30:50.333 UTC [458] DEBUG:  autovacuum: processing database "powerball"
2025-04-19 07:30:50.425 UTC [459] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:30:50.431 UTC [459] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:30:50.438 UTC [459] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:30:50.438 UTC [459] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:30:50.441 UTC [459] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:30:50.446 UTC [459] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:30:50.448 UTC [459] DEBUG:  building index "pg_toast_25905_index" on table "pg_toast_25905" serially
2025-04-19 07:30:50.450 UTC [459] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:30:50.451 UTC [459] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:30:50.451 UTC [459] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:30:50.453 UTC [459] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:30:50.453 UTC [459] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:30:50.453 UTC [459] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:30:50.454 UTC [459] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:30:50.454 UTC [459] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:30:50.454 UTC [459] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:30:50.455 UTC [459] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:30:50.456 UTC [459] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:30:50.457 UTC [459] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:30:50.457 UTC [459] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:30:50.458 UTC [459] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:30:50.458 UTC [459] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:30:50.458 UTC [459] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:30:50.459 UTC [459] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:30:50.460 UTC [459] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:30:50.460 UTC [459] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:30:50.460 UTC [459] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:30:50.461 UTC [459] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:30:50.461 UTC [459] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:30:50.461 UTC [459] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:30:50.463 UTC [459] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:30:50.464 UTC [459] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:30:50.464 UTC [459] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:30:50.464 UTC [459] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:30:50.465 UTC [459] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:30:50.467 UTC [459] DEBUG:  building index "pg_toast_25966_index" on table "pg_toast_25966" serially
2025-04-19 07:30:50.467 UTC [459] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:30:50.468 UTC [459] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:30:50.468 UTC [459] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:30:50.469 UTC [459] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:30:50.470 UTC [459] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:30:50.470 UTC [459] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:30:50.470 UTC [459] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:30:50.471 UTC [459] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:30:50.472 UTC [459] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:30:50.472 UTC [459] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:30:50.473 UTC [459] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:30:50.475 UTC [459] DEBUG:  building index "pg_toast_25999_index" on table "pg_toast_25999" serially
2025-04-19 07:30:50.475 UTC [459] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:30:50.476 UTC [459] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:30:50.476 UTC [459] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:30:50.476 UTC [459] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:30:50.478 UTC [459] DEBUG:  building index "pg_toast_26010_index" on table "pg_toast_26010" serially
2025-04-19 07:30:50.479 UTC [459] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:30:50.479 UTC [459] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:30:50.479 UTC [459] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:30:50.482 UTC [459] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:30:50.483 UTC [459] DEBUG:  building index "pg_toast_26033_index" on table "pg_toast_26033" serially
2025-04-19 07:30:50.485 UTC [459] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:30:50.486 UTC [459] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:30:50.486 UTC [459] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:30:50.489 UTC [459] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:30:50.489 UTC [459] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:30:50.495 UTC [459] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:30:50.495 UTC [459] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:30:50.498 UTC [459] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:30:50.498 UTC [459] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:30:50.499 UTC [459] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:30:50.499 UTC [459] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:30:50.502 UTC [459] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:30:50.502 UTC [459] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:30:50.503 UTC [459] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:30:50.503 UTC [459] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:30:50.505 UTC [459] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:30:50.505 UTC [459] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:30:50.506 UTC [459] DEBUG:  rehashing catalog cache id 32 for pg_index; 129 tups, 64 buckets
2025-04-19 07:30:50.506 UTC [459] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:30:50.506 UTC [459] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:30:50.509 UTC [459] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:30:50.509 UTC [459] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:30:50.510 UTC [459] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:30:50.510 UTC [459] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:30:50.512 UTC [459] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:30:50.512 UTC [459] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:30:50.520 UTC [459] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:30:50.542 UTC [458] DEBUG:  rehashing catalog cache id 14 for pg_opclass; 17 tups, 8 buckets
2025-04-19 07:30:50.791 UTC [459] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$/0.nyYurKkTUGS/lpF6YDuCwsQpDYr2rJ5tf8BdIlGJfSXEwp93vC')
	                RETURNING id, username, email
	                
2025-04-19 07:30:50.792 UTC [459] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:30:50.793 UTC [459] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:30:50.793 UTC [459] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 07:30:50.797 UTC [459] DEBUG:  rehashing catalog cache id 7 for pg_attribute; 257 tups, 128 buckets
2025-04-19 07:30:50.797 UTC [459] CONTEXT:  SQL expression "NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        )"
	PL/pgSQL function inline_code_block line 3 at IF
2025-04-19 07:30:50.803 UTC [459] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:30:50.804 UTC [459] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:30:50.807 UTC [459] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:30:50.812 UTC [459] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:30:50.812 UTC [459] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:30:50.816 UTC [459] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:30:50.820 UTC [459] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:30:50.821 UTC [459] DEBUG:  building index "pg_toast_26069_index" on table "pg_toast_26069" serially
2025-04-19 07:30:50.822 UTC [459] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:30:50.823 UTC [459] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:30:50.823 UTC [459] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:30:50.823 UTC [459] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:30:50.823 UTC [459] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:30:50.823 UTC [459] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:30:50.824 UTC [459] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:30:50.824 UTC [459] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:30:50.824 UTC [459] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:30:50.825 UTC [459] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:30:50.826 UTC [459] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:30:50.826 UTC [459] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:30:50.826 UTC [459] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:30:50.827 UTC [459] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:30:50.827 UTC [459] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:30:50.827 UTC [459] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:30:50.828 UTC [459] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:30:50.829 UTC [459] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:30:50.829 UTC [459] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:30:50.829 UTC [459] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:30:50.830 UTC [459] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:30:50.830 UTC [459] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:30:50.830 UTC [459] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:30:50.831 UTC [459] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:30:50.832 UTC [459] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:30:50.832 UTC [459] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:30:50.833 UTC [459] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:30:50.833 UTC [459] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:30:50.834 UTC [459] DEBUG:  building index "pg_toast_26130_index" on table "pg_toast_26130" serially
2025-04-19 07:30:50.835 UTC [459] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:30:50.835 UTC [459] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:30:50.835 UTC [459] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:30:50.836 UTC [459] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:30:50.838 UTC [459] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:30:50.839 UTC [459] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:30:50.839 UTC [459] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:30:50.840 UTC [459] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:30:50.840 UTC [459] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:30:50.841 UTC [459] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:30:50.842 UTC [459] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:30:50.845 UTC [459] DEBUG:  building index "pg_toast_26163_index" on table "pg_toast_26163" serially
2025-04-19 07:30:50.847 UTC [459] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:30:50.847 UTC [459] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:30:50.848 UTC [459] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:30:50.848 UTC [459] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:30:50.850 UTC [459] DEBUG:  building index "pg_toast_26174_index" on table "pg_toast_26174" serially
2025-04-19 07:30:50.852 UTC [459] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:30:50.853 UTC [459] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:30:50.853 UTC [459] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:30:50.855 UTC [459] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:30:50.856 UTC [459] DEBUG:  building index "pg_toast_26197_index" on table "pg_toast_26197" serially
2025-04-19 07:30:50.857 UTC [459] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:30:50.858 UTC [459] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:30:50.858 UTC [459] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:30:50.858 UTC [459] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:30:50.858 UTC [459] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:30:50.860 UTC [459] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:30:50.860 UTC [459] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:30:50.861 UTC [459] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:30:50.861 UTC [459] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:30:50.862 UTC [459] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:30:50.862 UTC [459] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:30:50.863 UTC [459] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:30:50.863 UTC [459] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:30:50.864 UTC [459] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:30:50.864 UTC [459] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:30:50.864 UTC [459] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:30:50.865 UTC [459] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:30:50.865 UTC [459] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:30:50.865 UTC [459] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:30:50.866 UTC [459] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:30:50.866 UTC [459] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:30:50.867 UTC [459] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:30:50.867 UTC [459] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:30:50.868 UTC [459] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:30:50.868 UTC [459] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:30:50.877 UTC [459] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:30:51.151 UTC [459] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$Yzlrhu/BC3s.nVmjtb6y6O2IYKnApCZewcujoxdMgPolZIKaQGj2W')
	                RETURNING id, username, email
	                
2025-04-19 07:30:51.152 UTC [459] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:30:51.152 UTC [459] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:31:04.493 UTC [459] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 07:31:05.169 UTC [459] DEBUG:  unexpected EOF on client connection
2025-04-19 07:31:07.725 UTC [473] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:31:07.736 UTC [473] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:31:07.743 UTC [473] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:31:07.743 UTC [473] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:31:07.747 UTC [473] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:31:07.751 UTC [473] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:31:07.754 UTC [473] DEBUG:  building index "pg_toast_26233_index" on table "pg_toast_26233" serially
2025-04-19 07:31:07.755 UTC [473] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:31:07.756 UTC [473] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:31:07.756 UTC [473] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:31:07.757 UTC [473] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:31:07.757 UTC [473] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:31:07.757 UTC [473] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:31:07.758 UTC [473] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:31:07.758 UTC [473] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:31:07.758 UTC [473] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:31:07.759 UTC [473] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:31:07.762 UTC [473] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:31:07.762 UTC [473] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:31:07.763 UTC [473] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:31:07.764 UTC [473] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:31:07.764 UTC [473] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:31:07.764 UTC [473] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:31:07.766 UTC [473] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:31:07.767 UTC [473] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:31:07.767 UTC [473] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:31:07.767 UTC [473] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:31:07.768 UTC [473] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:31:07.768 UTC [473] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:31:07.768 UTC [473] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:31:07.770 UTC [473] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:31:07.772 UTC [473] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:31:07.773 UTC [473] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:31:07.773 UTC [473] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:31:07.774 UTC [473] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:31:07.777 UTC [473] DEBUG:  building index "pg_toast_26294_index" on table "pg_toast_26294" serially
2025-04-19 07:31:07.778 UTC [473] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:31:07.778 UTC [473] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:31:07.778 UTC [473] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:31:07.779 UTC [473] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:31:07.781 UTC [473] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:31:07.781 UTC [473] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:31:07.781 UTC [473] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:31:07.782 UTC [473] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:31:07.783 UTC [473] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:31:07.783 UTC [473] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:31:07.784 UTC [473] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:31:07.785 UTC [473] DEBUG:  building index "pg_toast_26327_index" on table "pg_toast_26327" serially
2025-04-19 07:31:07.786 UTC [473] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:31:07.786 UTC [473] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:31:07.786 UTC [473] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:31:07.787 UTC [473] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:31:07.788 UTC [473] DEBUG:  building index "pg_toast_26338_index" on table "pg_toast_26338" serially
2025-04-19 07:31:07.789 UTC [473] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:31:07.789 UTC [473] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:31:07.789 UTC [473] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:31:07.790 UTC [473] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:31:07.791 UTC [473] DEBUG:  building index "pg_toast_26361_index" on table "pg_toast_26361" serially
2025-04-19 07:31:07.792 UTC [473] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:31:07.792 UTC [473] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:31:07.792 UTC [473] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:31:07.793 UTC [473] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:31:07.793 UTC [473] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:31:07.794 UTC [473] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:31:07.794 UTC [473] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:31:07.794 UTC [473] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:31:07.794 UTC [473] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:31:07.795 UTC [473] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:31:07.795 UTC [473] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:31:07.796 UTC [473] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:31:07.796 UTC [473] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:31:07.797 UTC [473] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:31:07.797 UTC [473] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:31:07.798 UTC [473] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:31:07.798 UTC [473] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:31:07.799 UTC [473] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:31:07.799 UTC [473] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:31:07.799 UTC [473] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:31:07.799 UTC [473] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:31:07.800 UTC [473] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:31:07.800 UTC [473] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:31:07.801 UTC [473] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:31:07.801 UTC [473] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:31:07.810 UTC [473] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:31:08.077 UTC [473] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$x242.iAueBD606bO3ysR8Oh.AcG9l/zsIEr5qBXkH1C3LiHtQjc5G')
	                RETURNING id, username, email
	                
2025-04-19 07:31:08.077 UTC [473] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:31:08.078 UTC [473] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:31:08.078 UTC [473] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 07:31:08.097 UTC [473] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:31:08.098 UTC [473] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:31:08.101 UTC [473] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:31:08.106 UTC [473] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:31:08.106 UTC [473] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:31:08.112 UTC [473] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:31:08.116 UTC [473] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:31:08.117 UTC [473] DEBUG:  building index "pg_toast_26397_index" on table "pg_toast_26397" serially
2025-04-19 07:31:08.118 UTC [473] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:31:08.119 UTC [473] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:31:08.119 UTC [473] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:31:08.119 UTC [473] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:31:08.120 UTC [473] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:31:08.120 UTC [473] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:31:08.121 UTC [473] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:31:08.121 UTC [473] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:31:08.121 UTC [473] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:31:08.122 UTC [473] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:31:08.123 UTC [473] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:31:08.123 UTC [473] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:31:08.123 UTC [473] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:31:08.124 UTC [473] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:31:08.124 UTC [473] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:31:08.124 UTC [473] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:31:08.125 UTC [473] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:31:08.126 UTC [473] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:31:08.126 UTC [473] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:31:08.126 UTC [473] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:31:08.126 UTC [473] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:31:08.127 UTC [473] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:31:08.127 UTC [473] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:31:08.128 UTC [473] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:31:08.129 UTC [473] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:31:08.129 UTC [473] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:31:08.129 UTC [473] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:31:08.130 UTC [473] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:31:08.132 UTC [473] DEBUG:  building index "pg_toast_26458_index" on table "pg_toast_26458" serially
2025-04-19 07:31:08.133 UTC [473] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:31:08.133 UTC [473] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:31:08.133 UTC [473] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:31:08.134 UTC [473] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:31:08.135 UTC [473] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:31:08.135 UTC [473] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:31:08.136 UTC [473] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:31:08.136 UTC [473] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:31:08.137 UTC [473] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:31:08.137 UTC [473] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:31:08.139 UTC [473] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:31:08.140 UTC [473] DEBUG:  building index "pg_toast_26491_index" on table "pg_toast_26491" serially
2025-04-19 07:31:08.142 UTC [473] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:31:08.142 UTC [473] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:31:08.142 UTC [473] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:31:08.143 UTC [473] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:31:08.144 UTC [473] DEBUG:  building index "pg_toast_26502_index" on table "pg_toast_26502" serially
2025-04-19 07:31:08.144 UTC [473] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:31:08.145 UTC [473] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:31:08.145 UTC [473] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:31:08.146 UTC [473] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:31:08.147 UTC [473] DEBUG:  building index "pg_toast_26525_index" on table "pg_toast_26525" serially
2025-04-19 07:31:08.148 UTC [473] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:31:08.148 UTC [473] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:31:08.148 UTC [473] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:31:08.149 UTC [473] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:31:08.149 UTC [473] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:31:08.149 UTC [473] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:31:08.149 UTC [473] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:31:08.150 UTC [473] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:31:08.150 UTC [473] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:31:08.151 UTC [473] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:31:08.151 UTC [473] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:31:08.152 UTC [473] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:31:08.152 UTC [473] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:31:08.153 UTC [473] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:31:08.153 UTC [473] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:31:08.153 UTC [473] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:31:08.153 UTC [473] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:31:08.154 UTC [473] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:31:08.154 UTC [473] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:31:08.155 UTC [473] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:31:08.155 UTC [473] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:31:08.156 UTC [473] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:31:08.156 UTC [473] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:31:08.157 UTC [473] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:31:08.157 UTC [473] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:31:08.163 UTC [473] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:31:08.413 UTC [473] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$6Mls2x.zCLM2WDJt9oOFE.n3dK3KWHA7.Glv6X0uinVaZUdqqljXC')
	                RETURNING id, username, email
	                
2025-04-19 07:31:08.414 UTC [473] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:31:08.415 UTC [473] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:31:20.360 UTC [481] DEBUG:  autovacuum: processing database "postgres"
2025-04-19 07:31:20.818 UTC [473] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 07:31:21.136 UTC [473] DEBUG:  unexpected EOF on client connection
2025-04-19 07:31:22.827 UTC [482] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:31:22.833 UTC [482] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:31:22.839 UTC [482] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:31:22.839 UTC [482] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:31:22.844 UTC [482] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:31:22.847 UTC [482] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:31:22.850 UTC [482] DEBUG:  building index "pg_toast_26561_index" on table "pg_toast_26561" serially
2025-04-19 07:31:22.852 UTC [482] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:31:22.852 UTC [482] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:31:22.852 UTC [482] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:31:22.853 UTC [482] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:31:22.853 UTC [482] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:31:22.853 UTC [482] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:31:22.854 UTC [482] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:31:22.854 UTC [482] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:31:22.854 UTC [482] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:31:22.855 UTC [482] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:31:22.857 UTC [482] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:31:22.857 UTC [482] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:31:22.857 UTC [482] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:31:22.858 UTC [482] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:31:22.858 UTC [482] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:31:22.858 UTC [482] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:31:22.859 UTC [482] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:31:22.860 UTC [482] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:31:22.860 UTC [482] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:31:22.860 UTC [482] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:31:22.861 UTC [482] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:31:22.861 UTC [482] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:31:22.861 UTC [482] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:31:22.863 UTC [482] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:31:22.864 UTC [482] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:31:22.864 UTC [482] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:31:22.864 UTC [482] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:31:22.865 UTC [482] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:31:22.868 UTC [482] DEBUG:  building index "pg_toast_26622_index" on table "pg_toast_26622" serially
2025-04-19 07:31:22.869 UTC [482] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:31:22.870 UTC [482] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:31:22.870 UTC [482] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:31:22.871 UTC [482] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:31:22.872 UTC [482] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:31:22.872 UTC [482] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:31:22.872 UTC [482] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:31:22.873 UTC [482] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:31:22.873 UTC [482] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:31:22.873 UTC [482] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:31:22.874 UTC [482] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:31:22.876 UTC [482] DEBUG:  building index "pg_toast_26655_index" on table "pg_toast_26655" serially
2025-04-19 07:31:22.876 UTC [482] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:31:22.876 UTC [482] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:31:22.876 UTC [482] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:31:22.877 UTC [482] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:31:22.878 UTC [482] DEBUG:  building index "pg_toast_26666_index" on table "pg_toast_26666" serially
2025-04-19 07:31:22.879 UTC [482] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:31:22.879 UTC [482] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:31:22.879 UTC [482] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:31:22.881 UTC [482] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:31:22.882 UTC [482] DEBUG:  building index "pg_toast_26689_index" on table "pg_toast_26689" serially
2025-04-19 07:31:22.882 UTC [482] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:31:22.883 UTC [482] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:31:22.883 UTC [482] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:31:22.884 UTC [482] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:31:22.884 UTC [482] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:31:22.885 UTC [482] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:31:22.885 UTC [482] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:31:22.886 UTC [482] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:31:22.886 UTC [482] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:31:22.887 UTC [482] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:31:22.887 UTC [482] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:31:22.887 UTC [482] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:31:22.887 UTC [482] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:31:22.888 UTC [482] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:31:22.888 UTC [482] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:31:22.889 UTC [482] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:31:22.889 UTC [482] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:31:22.890 UTC [482] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:31:22.890 UTC [482] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:31:22.891 UTC [482] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:31:22.891 UTC [482] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:31:22.892 UTC [482] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:31:22.892 UTC [482] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:31:22.893 UTC [482] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:31:22.893 UTC [482] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:31:22.903 UTC [482] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:31:23.168 UTC [482] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$P4Gj190MEnoGMECIl4AbxeN6v0EyTGTJYUknRSACocxRTOSKfAIWq')
	                RETURNING id, username, email
	                
2025-04-19 07:31:23.170 UTC [482] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:31:23.170 UTC [482] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:31:23.171 UTC [482] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 07:31:23.183 UTC [482] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:31:23.184 UTC [482] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:31:23.186 UTC [482] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:31:23.190 UTC [482] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:31:23.190 UTC [482] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:31:23.194 UTC [482] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:31:23.198 UTC [482] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:31:23.200 UTC [482] DEBUG:  building index "pg_toast_26725_index" on table "pg_toast_26725" serially
2025-04-19 07:31:23.201 UTC [482] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:31:23.201 UTC [482] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:31:23.201 UTC [482] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:31:23.202 UTC [482] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:31:23.202 UTC [482] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:31:23.202 UTC [482] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:31:23.202 UTC [482] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:31:23.203 UTC [482] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:31:23.203 UTC [482] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:31:23.203 UTC [482] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:31:23.204 UTC [482] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:31:23.204 UTC [482] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:31:23.204 UTC [482] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:31:23.205 UTC [482] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:31:23.205 UTC [482] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:31:23.205 UTC [482] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:31:23.206 UTC [482] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:31:23.207 UTC [482] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:31:23.207 UTC [482] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:31:23.207 UTC [482] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:31:23.208 UTC [482] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:31:23.208 UTC [482] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:31:23.208 UTC [482] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:31:23.209 UTC [482] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:31:23.210 UTC [482] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:31:23.210 UTC [482] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:31:23.210 UTC [482] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:31:23.211 UTC [482] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:31:23.212 UTC [482] DEBUG:  building index "pg_toast_26786_index" on table "pg_toast_26786" serially
2025-04-19 07:31:23.213 UTC [482] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:31:23.213 UTC [482] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:31:23.213 UTC [482] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:31:23.214 UTC [482] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:31:23.215 UTC [482] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:31:23.215 UTC [482] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:31:23.215 UTC [482] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:31:23.216 UTC [482] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:31:23.217 UTC [482] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:31:23.217 UTC [482] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:31:23.218 UTC [482] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:31:23.219 UTC [482] DEBUG:  building index "pg_toast_26819_index" on table "pg_toast_26819" serially
2025-04-19 07:31:23.219 UTC [482] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:31:23.220 UTC [482] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:31:23.220 UTC [482] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:31:23.220 UTC [482] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:31:23.221 UTC [482] DEBUG:  building index "pg_toast_26830_index" on table "pg_toast_26830" serially
2025-04-19 07:31:23.222 UTC [482] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:31:23.222 UTC [482] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:31:23.222 UTC [482] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:31:23.223 UTC [482] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:31:23.224 UTC [482] DEBUG:  building index "pg_toast_26853_index" on table "pg_toast_26853" serially
2025-04-19 07:31:23.225 UTC [482] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:31:23.225 UTC [482] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:31:23.225 UTC [482] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:31:23.226 UTC [482] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:31:23.226 UTC [482] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:31:23.227 UTC [482] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:31:23.227 UTC [482] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:31:23.228 UTC [482] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:31:23.228 UTC [482] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:31:23.229 UTC [482] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:31:23.229 UTC [482] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:31:23.230 UTC [482] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:31:23.230 UTC [482] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:31:23.231 UTC [482] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:31:23.231 UTC [482] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:31:23.232 UTC [482] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:31:23.232 UTC [482] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:31:23.233 UTC [482] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:31:23.233 UTC [482] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:31:23.234 UTC [482] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:31:23.234 UTC [482] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:31:23.235 UTC [482] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:31:23.235 UTC [482] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:31:23.236 UTC [482] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:31:23.236 UTC [482] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:31:23.243 UTC [482] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:31:23.523 UTC [482] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$DeptJLTRU/XszDtS4ZQqceYiDbNLp8X7/RTX8kFgrPVEry3X5bnA6')
	                RETURNING id, username, email
	                
2025-04-19 07:31:23.524 UTC [482] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:31:23.525 UTC [482] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:31:36.711 UTC [482] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 07:31:37.032 UTC [482] DEBUG:  unexpected EOF on client connection
2025-04-19 07:31:39.134 UTC [497] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:31:39.145 UTC [497] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:31:39.151 UTC [497] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:31:39.151 UTC [497] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:31:39.155 UTC [497] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:31:39.160 UTC [497] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:31:39.170 UTC [497] DEBUG:  building index "pg_toast_26889_index" on table "pg_toast_26889" serially
2025-04-19 07:31:39.173 UTC [497] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:31:39.174 UTC [497] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:31:39.174 UTC [497] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:31:39.176 UTC [497] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:31:39.176 UTC [497] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:31:39.176 UTC [497] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:31:39.177 UTC [497] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:31:39.177 UTC [497] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:31:39.177 UTC [497] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:31:39.178 UTC [497] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:31:39.179 UTC [497] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:31:39.179 UTC [497] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:31:39.179 UTC [497] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:31:39.180 UTC [497] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:31:39.180 UTC [497] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:31:39.180 UTC [497] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:31:39.181 UTC [497] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:31:39.184 UTC [497] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:31:39.184 UTC [497] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:31:39.184 UTC [497] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:31:39.186 UTC [497] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:31:39.186 UTC [497] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:31:39.187 UTC [497] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:31:39.189 UTC [497] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:31:39.191 UTC [497] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:31:39.191 UTC [497] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:31:39.191 UTC [497] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:31:39.192 UTC [497] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:31:39.194 UTC [497] DEBUG:  building index "pg_toast_26950_index" on table "pg_toast_26950" serially
2025-04-19 07:31:39.195 UTC [497] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:31:39.195 UTC [497] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:31:39.195 UTC [497] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:31:39.197 UTC [497] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:31:39.198 UTC [497] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:31:39.199 UTC [497] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:31:39.199 UTC [497] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:31:39.199 UTC [497] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:31:39.199 UTC [497] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:31:39.199 UTC [497] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:31:39.201 UTC [497] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:31:39.202 UTC [497] DEBUG:  building index "pg_toast_26983_index" on table "pg_toast_26983" serially
2025-04-19 07:31:39.203 UTC [497] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:31:39.203 UTC [497] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:31:39.203 UTC [497] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:31:39.204 UTC [497] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:31:39.205 UTC [497] DEBUG:  building index "pg_toast_26994_index" on table "pg_toast_26994" serially
2025-04-19 07:31:39.206 UTC [497] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:31:39.206 UTC [497] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:31:39.206 UTC [497] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:31:39.207 UTC [497] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:31:39.208 UTC [497] DEBUG:  building index "pg_toast_27017_index" on table "pg_toast_27017" serially
2025-04-19 07:31:39.209 UTC [497] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:31:39.209 UTC [497] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:31:39.209 UTC [497] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:31:39.210 UTC [497] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:31:39.210 UTC [497] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:31:39.211 UTC [497] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:31:39.211 UTC [497] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:31:39.212 UTC [497] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:31:39.212 UTC [497] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:31:39.213 UTC [497] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:31:39.213 UTC [497] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:31:39.214 UTC [497] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:31:39.214 UTC [497] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:31:39.215 UTC [497] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:31:39.215 UTC [497] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:31:39.216 UTC [497] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:31:39.216 UTC [497] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:31:39.217 UTC [497] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:31:39.217 UTC [497] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:31:39.219 UTC [497] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:31:39.219 UTC [497] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:31:39.221 UTC [497] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:31:39.221 UTC [497] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:31:39.222 UTC [497] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:31:39.222 UTC [497] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:31:39.238 UTC [497] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:31:39.508 UTC [497] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$jw0zLyzOm18I.7kTbDANJOmFIn2nX3jlV/WjO0CU9Flz.Yuyrj2Vq')
	                RETURNING id, username, email
	                
2025-04-19 07:31:39.508 UTC [497] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:31:39.509 UTC [497] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:31:39.510 UTC [497] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 07:31:39.529 UTC [497] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:31:39.530 UTC [497] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:31:39.534 UTC [497] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:31:39.538 UTC [497] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:31:39.538 UTC [497] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:31:39.542 UTC [497] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:31:39.545 UTC [497] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:31:39.546 UTC [497] DEBUG:  building index "pg_toast_27053_index" on table "pg_toast_27053" serially
2025-04-19 07:31:39.547 UTC [497] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:31:39.547 UTC [497] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:31:39.547 UTC [497] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:31:39.548 UTC [497] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:31:39.548 UTC [497] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:31:39.548 UTC [497] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:31:39.549 UTC [497] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:31:39.549 UTC [497] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:31:39.549 UTC [497] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:31:39.550 UTC [497] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:31:39.552 UTC [497] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:31:39.552 UTC [497] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:31:39.552 UTC [497] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:31:39.553 UTC [497] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:31:39.554 UTC [497] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:31:39.554 UTC [497] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:31:39.562 UTC [497] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:31:39.565 UTC [497] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:31:39.565 UTC [497] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:31:39.565 UTC [497] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:31:39.568 UTC [497] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:31:39.568 UTC [497] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:31:39.568 UTC [497] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:31:39.570 UTC [497] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:31:39.571 UTC [497] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:31:39.572 UTC [497] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:31:39.572 UTC [497] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:31:39.573 UTC [497] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:31:39.575 UTC [497] DEBUG:  building index "pg_toast_27114_index" on table "pg_toast_27114" serially
2025-04-19 07:31:39.575 UTC [497] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:31:39.576 UTC [497] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:31:39.576 UTC [497] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:31:39.577 UTC [497] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:31:39.578 UTC [497] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:31:39.578 UTC [497] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:31:39.578 UTC [497] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:31:39.579 UTC [497] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:31:39.579 UTC [497] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:31:39.579 UTC [497] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:31:39.581 UTC [497] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:31:39.582 UTC [497] DEBUG:  building index "pg_toast_27147_index" on table "pg_toast_27147" serially
2025-04-19 07:31:39.583 UTC [497] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:31:39.583 UTC [497] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:31:39.583 UTC [497] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:31:39.584 UTC [497] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:31:39.586 UTC [497] DEBUG:  building index "pg_toast_27158_index" on table "pg_toast_27158" serially
2025-04-19 07:31:39.586 UTC [497] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:31:39.587 UTC [497] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:31:39.587 UTC [497] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:31:39.588 UTC [497] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:31:39.589 UTC [497] DEBUG:  building index "pg_toast_27181_index" on table "pg_toast_27181" serially
2025-04-19 07:31:39.590 UTC [497] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:31:39.590 UTC [497] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:31:39.590 UTC [497] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:31:39.591 UTC [497] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:31:39.591 UTC [497] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:31:39.592 UTC [497] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:31:39.592 UTC [497] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:31:39.593 UTC [497] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:31:39.593 UTC [497] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:31:39.593 UTC [497] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:31:39.593 UTC [497] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:31:39.594 UTC [497] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:31:39.594 UTC [497] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:31:39.595 UTC [497] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:31:39.595 UTC [497] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:31:39.596 UTC [497] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:31:39.596 UTC [497] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:31:39.597 UTC [497] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:31:39.597 UTC [497] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:31:39.597 UTC [497] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:31:39.597 UTC [497] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:31:39.598 UTC [497] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:31:39.598 UTC [497] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:31:39.599 UTC [497] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:31:39.599 UTC [497] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:31:39.608 UTC [497] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:31:39.853 UTC [497] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$.jgoIHuFCPW8iU.xENrkyOQfOYhEX9sJoGLmwYB4WtBjhdqIQxZAC')
	                RETURNING id, username, email
	                
2025-04-19 07:31:39.854 UTC [497] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:31:39.854 UTC [497] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:31:50.366 UTC [505] DEBUG:  autovacuum: processing database "powerball"
2025-04-19 07:31:50.612 UTC [505] DEBUG:  rehashing catalog cache id 14 for pg_opclass; 17 tups, 8 buckets
2025-04-19 07:31:52.668 UTC [497] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 07:31:52.962 UTC [497] DEBUG:  unexpected EOF on client connection
2025-04-19 07:31:55.011 UTC [506] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:31:55.022 UTC [506] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:31:55.035 UTC [506] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:31:55.035 UTC [506] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:31:55.048 UTC [506] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:31:55.056 UTC [506] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:31:55.060 UTC [506] DEBUG:  building index "pg_toast_27218_index" on table "pg_toast_27218" serially
2025-04-19 07:31:55.063 UTC [506] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:31:55.065 UTC [506] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:31:55.065 UTC [506] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:31:55.068 UTC [506] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:31:55.068 UTC [506] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:31:55.069 UTC [506] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:31:55.069 UTC [506] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:31:55.069 UTC [506] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:31:55.069 UTC [506] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:31:55.070 UTC [506] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:31:55.072 UTC [506] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:31:55.072 UTC [506] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:31:55.072 UTC [506] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:31:55.073 UTC [506] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:31:55.073 UTC [506] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:31:55.073 UTC [506] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:31:55.074 UTC [506] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:31:55.075 UTC [506] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:31:55.075 UTC [506] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:31:55.075 UTC [506] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:31:55.076 UTC [506] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:31:55.076 UTC [506] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:31:55.076 UTC [506] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:31:55.078 UTC [506] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:31:55.079 UTC [506] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:31:55.079 UTC [506] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:31:55.079 UTC [506] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:31:55.080 UTC [506] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:31:55.082 UTC [506] DEBUG:  building index "pg_toast_27279_index" on table "pg_toast_27279" serially
2025-04-19 07:31:55.083 UTC [506] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:31:55.083 UTC [506] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:31:55.083 UTC [506] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:31:55.084 UTC [506] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:31:55.085 UTC [506] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:31:55.085 UTC [506] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:31:55.085 UTC [506] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:31:55.086 UTC [506] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:31:55.087 UTC [506] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:31:55.087 UTC [506] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:31:55.087 UTC [506] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:31:55.089 UTC [506] DEBUG:  building index "pg_toast_27312_index" on table "pg_toast_27312" serially
2025-04-19 07:31:55.090 UTC [506] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:31:55.090 UTC [506] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:31:55.090 UTC [506] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:31:55.091 UTC [506] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:31:55.094 UTC [506] DEBUG:  building index "pg_toast_27323_index" on table "pg_toast_27323" serially
2025-04-19 07:31:55.095 UTC [506] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:31:55.095 UTC [506] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:31:55.095 UTC [506] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:31:55.097 UTC [506] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:31:55.098 UTC [506] DEBUG:  building index "pg_toast_27346_index" on table "pg_toast_27346" serially
2025-04-19 07:31:55.100 UTC [506] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:31:55.100 UTC [506] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:31:55.100 UTC [506] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:31:55.101 UTC [506] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:31:55.101 UTC [506] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:31:55.102 UTC [506] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:31:55.102 UTC [506] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:31:55.103 UTC [506] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:31:55.103 UTC [506] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:31:55.104 UTC [506] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:31:55.104 UTC [506] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:31:55.105 UTC [506] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:31:55.105 UTC [506] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:31:55.106 UTC [506] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:31:55.106 UTC [506] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:31:55.107 UTC [506] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:31:55.107 UTC [506] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:31:55.108 UTC [506] DEBUG:  rehashing catalog cache id 32 for pg_index; 129 tups, 64 buckets
2025-04-19 07:31:55.108 UTC [506] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:31:55.108 UTC [506] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:31:55.108 UTC [506] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:31:55.108 UTC [506] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:31:55.109 UTC [506] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:31:55.109 UTC [506] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:31:55.110 UTC [506] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:31:55.110 UTC [506] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:31:55.127 UTC [506] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:31:55.413 UTC [506] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$jGtsh6E3ZcTmnaar5eLIOOqnsvW0uv3WcJIovCL9aG2IS6hnCA2z6')
	                RETURNING id, username, email
	                
2025-04-19 07:31:55.420 UTC [506] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:31:55.432 UTC [506] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:31:55.462 UTC [506] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 07:31:55.469 UTC [506] DEBUG:  rehashing catalog cache id 7 for pg_attribute; 257 tups, 128 buckets
2025-04-19 07:31:55.469 UTC [506] CONTEXT:  SQL expression "NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        )"
	PL/pgSQL function inline_code_block line 3 at IF
2025-04-19 07:31:55.480 UTC [506] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:31:55.481 UTC [506] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:31:55.485 UTC [506] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:31:55.502 UTC [506] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:31:55.502 UTC [506] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:31:55.513 UTC [506] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:31:55.524 UTC [506] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:31:55.528 UTC [506] DEBUG:  building index "pg_toast_27382_index" on table "pg_toast_27382" serially
2025-04-19 07:31:55.531 UTC [506] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:31:55.532 UTC [506] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:31:55.532 UTC [506] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:31:55.534 UTC [506] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:31:55.535 UTC [506] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:31:55.535 UTC [506] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:31:55.537 UTC [506] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:31:55.537 UTC [506] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:31:55.537 UTC [506] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:31:55.538 UTC [506] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:31:55.540 UTC [506] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:31:55.540 UTC [506] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:31:55.540 UTC [506] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:31:55.541 UTC [506] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:31:55.541 UTC [506] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:31:55.541 UTC [506] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:31:55.542 UTC [506] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:31:55.543 UTC [506] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:31:55.544 UTC [506] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:31:55.544 UTC [506] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:31:55.544 UTC [506] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:31:55.545 UTC [506] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:31:55.545 UTC [506] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:31:55.546 UTC [506] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:31:55.548 UTC [506] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:31:55.548 UTC [506] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:31:55.548 UTC [506] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:31:55.550 UTC [506] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:31:55.551 UTC [506] DEBUG:  building index "pg_toast_27443_index" on table "pg_toast_27443" serially
2025-04-19 07:31:55.552 UTC [506] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:31:55.552 UTC [506] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:31:55.552 UTC [506] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:31:55.553 UTC [506] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:31:55.554 UTC [506] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:31:55.554 UTC [506] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:31:55.554 UTC [506] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:31:55.555 UTC [506] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:31:55.555 UTC [506] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:31:55.555 UTC [506] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:31:55.556 UTC [506] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:31:55.559 UTC [506] DEBUG:  building index "pg_toast_27476_index" on table "pg_toast_27476" serially
2025-04-19 07:31:55.560 UTC [506] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:31:55.561 UTC [506] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:31:55.561 UTC [506] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:31:55.562 UTC [506] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:31:55.564 UTC [506] DEBUG:  building index "pg_toast_27487_index" on table "pg_toast_27487" serially
2025-04-19 07:31:55.565 UTC [506] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:31:55.565 UTC [506] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:31:55.565 UTC [506] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:31:55.568 UTC [506] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:31:55.569 UTC [506] DEBUG:  building index "pg_toast_27510_index" on table "pg_toast_27510" serially
2025-04-19 07:31:55.570 UTC [506] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:31:55.570 UTC [506] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:31:55.570 UTC [506] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:31:55.573 UTC [506] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:31:55.573 UTC [506] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:31:55.576 UTC [506] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:31:55.577 UTC [506] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:31:55.580 UTC [506] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:31:55.580 UTC [506] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:31:55.582 UTC [506] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:31:55.582 UTC [506] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:31:55.583 UTC [506] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:31:55.583 UTC [506] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:31:55.583 UTC [506] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:31:55.583 UTC [506] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:31:55.584 UTC [506] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:31:55.584 UTC [506] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:31:55.585 UTC [506] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:31:55.585 UTC [506] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:31:55.586 UTC [506] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:31:55.586 UTC [506] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:31:55.587 UTC [506] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:31:55.587 UTC [506] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:31:55.588 UTC [506] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:31:55.588 UTC [506] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:31:55.595 UTC [506] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:31:55.865 UTC [506] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$XH/4OBlfzqDHyHTNdD60ZuYCu8hauJIrVQy/46p5kkk/GrlFeUltm')
	                RETURNING id, username, email
	                
2025-04-19 07:31:55.867 UTC [506] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:31:55.867 UTC [506] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:32:08.747 UTC [506] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 07:32:09.037 UTC [506] DEBUG:  unexpected EOF on client connection
2025-04-19 07:32:11.370 UTC [520] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:32:11.378 UTC [520] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:32:11.389 UTC [520] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:32:11.389 UTC [520] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:32:11.395 UTC [520] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:32:11.400 UTC [520] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:32:11.404 UTC [520] DEBUG:  building index "pg_toast_27546_index" on table "pg_toast_27546" serially
2025-04-19 07:32:11.406 UTC [520] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:32:11.407 UTC [520] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:32:11.407 UTC [520] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:32:11.408 UTC [520] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:32:11.408 UTC [520] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:32:11.408 UTC [520] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:32:11.409 UTC [520] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:32:11.409 UTC [520] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:32:11.409 UTC [520] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:32:11.410 UTC [520] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:32:11.411 UTC [520] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:32:11.411 UTC [520] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:32:11.411 UTC [520] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:32:11.412 UTC [520] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:32:11.413 UTC [520] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:32:11.413 UTC [520] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:32:11.413 UTC [520] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:32:11.414 UTC [520] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:32:11.415 UTC [520] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:32:11.415 UTC [520] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:32:11.415 UTC [520] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:32:11.416 UTC [520] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:32:11.416 UTC [520] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:32:11.418 UTC [520] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:32:11.418 UTC [520] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:32:11.419 UTC [520] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:32:11.419 UTC [520] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:32:11.420 UTC [520] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:32:11.422 UTC [520] DEBUG:  building index "pg_toast_27607_index" on table "pg_toast_27607" serially
2025-04-19 07:32:11.423 UTC [520] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:32:11.424 UTC [520] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:32:11.424 UTC [520] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:32:11.425 UTC [520] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:32:11.428 UTC [520] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:32:11.428 UTC [520] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:32:11.429 UTC [520] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:32:11.430 UTC [520] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:32:11.430 UTC [520] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:32:11.430 UTC [520] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:32:11.432 UTC [520] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:32:11.433 UTC [520] DEBUG:  building index "pg_toast_27640_index" on table "pg_toast_27640" serially
2025-04-19 07:32:11.435 UTC [520] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:32:11.435 UTC [520] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:32:11.435 UTC [520] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:32:11.436 UTC [520] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:32:11.437 UTC [520] DEBUG:  building index "pg_toast_27651_index" on table "pg_toast_27651" serially
2025-04-19 07:32:11.438 UTC [520] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:32:11.438 UTC [520] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:32:11.438 UTC [520] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:32:11.440 UTC [520] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:32:11.441 UTC [520] DEBUG:  building index "pg_toast_27674_index" on table "pg_toast_27674" serially
2025-04-19 07:32:11.442 UTC [520] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:32:11.443 UTC [520] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:32:11.443 UTC [520] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:32:11.444 UTC [520] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:32:11.444 UTC [520] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:32:11.445 UTC [520] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:32:11.445 UTC [520] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:32:11.446 UTC [520] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:32:11.446 UTC [520] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:32:11.447 UTC [520] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:32:11.447 UTC [520] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:32:11.448 UTC [520] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:32:11.448 UTC [520] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:32:11.449 UTC [520] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:32:11.449 UTC [520] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:32:11.450 UTC [520] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:32:11.450 UTC [520] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:32:11.451 UTC [520] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:32:11.451 UTC [520] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:32:11.452 UTC [520] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:32:11.452 UTC [520] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:32:11.454 UTC [520] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:32:11.454 UTC [520] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:32:11.455 UTC [520] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:32:11.455 UTC [520] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:32:11.470 UTC [520] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:32:11.741 UTC [520] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$Oi0rZBiugvBiQ92U03DGguSv3VrzGQCYXaUE8/hJUeDIc9Fu3hxYe')
	                RETURNING id, username, email
	                
2025-04-19 07:32:11.742 UTC [520] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:32:11.742 UTC [520] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:32:11.743 UTC [520] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 07:32:11.761 UTC [520] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:32:11.762 UTC [520] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:32:11.765 UTC [520] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:32:11.772 UTC [520] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:32:11.772 UTC [520] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:32:11.777 UTC [520] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:32:11.780 UTC [520] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:32:11.782 UTC [520] DEBUG:  building index "pg_toast_27710_index" on table "pg_toast_27710" serially
2025-04-19 07:32:11.783 UTC [520] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:32:11.784 UTC [520] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:32:11.784 UTC [520] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:32:11.785 UTC [520] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:32:11.785 UTC [520] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:32:11.785 UTC [520] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:32:11.786 UTC [520] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:32:11.786 UTC [520] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:32:11.786 UTC [520] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:32:11.787 UTC [520] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:32:11.788 UTC [520] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:32:11.788 UTC [520] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:32:11.788 UTC [520] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:32:11.789 UTC [520] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:32:11.789 UTC [520] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:32:11.789 UTC [520] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:32:11.790 UTC [520] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:32:11.791 UTC [520] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:32:11.791 UTC [520] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:32:11.791 UTC [520] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:32:11.792 UTC [520] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:32:11.792 UTC [520] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:32:11.792 UTC [520] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:32:11.793 UTC [520] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:32:11.793 UTC [520] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:32:11.794 UTC [520] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:32:11.794 UTC [520] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:32:11.795 UTC [520] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:32:11.796 UTC [520] DEBUG:  building index "pg_toast_27771_index" on table "pg_toast_27771" serially
2025-04-19 07:32:11.797 UTC [520] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:32:11.798 UTC [520] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:32:11.798 UTC [520] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:32:11.799 UTC [520] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:32:11.800 UTC [520] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:32:11.800 UTC [520] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:32:11.800 UTC [520] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:32:11.801 UTC [520] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:32:11.801 UTC [520] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:32:11.801 UTC [520] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:32:11.802 UTC [520] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:32:11.803 UTC [520] DEBUG:  building index "pg_toast_27804_index" on table "pg_toast_27804" serially
2025-04-19 07:32:11.805 UTC [520] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:32:11.805 UTC [520] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:32:11.805 UTC [520] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:32:11.806 UTC [520] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:32:11.807 UTC [520] DEBUG:  building index "pg_toast_27815_index" on table "pg_toast_27815" serially
2025-04-19 07:32:11.807 UTC [520] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:32:11.808 UTC [520] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:32:11.808 UTC [520] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:32:11.809 UTC [520] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:32:11.810 UTC [520] DEBUG:  building index "pg_toast_27838_index" on table "pg_toast_27838" serially
2025-04-19 07:32:11.811 UTC [520] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:32:11.811 UTC [520] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:32:11.811 UTC [520] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:32:11.812 UTC [520] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:32:11.812 UTC [520] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:32:11.813 UTC [520] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:32:11.813 UTC [520] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:32:11.813 UTC [520] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:32:11.813 UTC [520] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:32:11.814 UTC [520] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:32:11.814 UTC [520] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:32:11.815 UTC [520] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:32:11.815 UTC [520] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:32:11.816 UTC [520] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:32:11.816 UTC [520] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:32:11.817 UTC [520] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:32:11.817 UTC [520] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:32:11.818 UTC [520] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:32:11.818 UTC [520] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:32:11.818 UTC [520] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:32:11.818 UTC [520] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:32:11.819 UTC [520] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:32:11.819 UTC [520] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:32:11.820 UTC [520] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:32:11.820 UTC [520] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:32:11.826 UTC [520] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:32:12.072 UTC [520] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$45bojFKQniKVP2EGHYfQ6OaFp4l3q27HTPd.1bB.Po8izP3na4ISm')
	                RETURNING id, username, email
	                
2025-04-19 07:32:12.072 UTC [520] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:32:12.073 UTC [520] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:32:20.368 UTC [528] DEBUG:  autovacuum: processing database "postgres"
2025-04-19 07:32:24.783 UTC [520] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 07:32:25.075 UTC [520] DEBUG:  unexpected EOF on client connection
2025-04-19 07:32:27.320 UTC [536] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:32:27.327 UTC [536] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:32:27.333 UTC [536] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:32:27.333 UTC [536] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:32:27.338 UTC [536] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:32:27.342 UTC [536] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:32:27.345 UTC [536] DEBUG:  building index "pg_toast_27874_index" on table "pg_toast_27874" serially
2025-04-19 07:32:27.346 UTC [536] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:32:27.347 UTC [536] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:32:27.347 UTC [536] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:32:27.348 UTC [536] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:32:27.348 UTC [536] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:32:27.348 UTC [536] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:32:27.349 UTC [536] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:32:27.349 UTC [536] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:32:27.349 UTC [536] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:32:27.351 UTC [536] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:32:27.352 UTC [536] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:32:27.353 UTC [536] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:32:27.353 UTC [536] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:32:27.353 UTC [536] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:32:27.354 UTC [536] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:32:27.354 UTC [536] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:32:27.354 UTC [536] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:32:27.356 UTC [536] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:32:27.356 UTC [536] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:32:27.357 UTC [536] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:32:27.358 UTC [536] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:32:27.358 UTC [536] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:32:27.358 UTC [536] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:32:27.361 UTC [536] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:32:27.363 UTC [536] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:32:27.363 UTC [536] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:32:27.363 UTC [536] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:32:27.366 UTC [536] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:32:27.369 UTC [536] DEBUG:  building index "pg_toast_27935_index" on table "pg_toast_27935" serially
2025-04-19 07:32:27.370 UTC [536] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:32:27.370 UTC [536] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:32:27.370 UTC [536] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:32:27.372 UTC [536] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:32:27.373 UTC [536] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:32:27.373 UTC [536] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:32:27.373 UTC [536] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:32:27.374 UTC [536] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:32:27.374 UTC [536] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:32:27.374 UTC [536] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:32:27.376 UTC [536] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:32:27.377 UTC [536] DEBUG:  building index "pg_toast_27968_index" on table "pg_toast_27968" serially
2025-04-19 07:32:27.378 UTC [536] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:32:27.378 UTC [536] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:32:27.378 UTC [536] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:32:27.379 UTC [536] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:32:27.380 UTC [536] DEBUG:  building index "pg_toast_27979_index" on table "pg_toast_27979" serially
2025-04-19 07:32:27.381 UTC [536] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:32:27.381 UTC [536] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:32:27.381 UTC [536] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:32:27.383 UTC [536] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:32:27.384 UTC [536] DEBUG:  building index "pg_toast_28002_index" on table "pg_toast_28002" serially
2025-04-19 07:32:27.385 UTC [536] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:32:27.385 UTC [536] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:32:27.385 UTC [536] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:32:27.386 UTC [536] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:32:27.386 UTC [536] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:32:27.387 UTC [536] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:32:27.387 UTC [536] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:32:27.388 UTC [536] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:32:27.388 UTC [536] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:32:27.389 UTC [536] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:32:27.389 UTC [536] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:32:27.390 UTC [536] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:32:27.390 UTC [536] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:32:27.391 UTC [536] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:32:27.391 UTC [536] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:32:27.392 UTC [536] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:32:27.392 UTC [536] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:32:27.392 UTC [536] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:32:27.392 UTC [536] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:32:27.393 UTC [536] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:32:27.393 UTC [536] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:32:27.394 UTC [536] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:32:27.394 UTC [536] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:32:27.395 UTC [536] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:32:27.395 UTC [536] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:32:27.411 UTC [536] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:32:27.682 UTC [536] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$.iM6FZ3BI/slQPe2gppBIeTiKGh7HEz1WnTOy/XVeYUiAHgWUemcS')
	                RETURNING id, username, email
	                
2025-04-19 07:32:27.683 UTC [536] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:32:27.684 UTC [536] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:32:27.684 UTC [536] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 07:32:27.696 UTC [536] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:32:27.697 UTC [536] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:32:27.699 UTC [536] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:32:27.703 UTC [536] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:32:27.703 UTC [536] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:32:27.707 UTC [536] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:32:27.710 UTC [536] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:32:27.711 UTC [536] DEBUG:  building index "pg_toast_28038_index" on table "pg_toast_28038" serially
2025-04-19 07:32:27.712 UTC [536] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:32:27.712 UTC [536] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:32:27.712 UTC [536] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:32:27.713 UTC [536] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:32:27.713 UTC [536] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:32:27.713 UTC [536] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:32:27.713 UTC [536] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:32:27.713 UTC [536] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:32:27.714 UTC [536] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:32:27.714 UTC [536] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:32:27.715 UTC [536] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:32:27.715 UTC [536] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:32:27.715 UTC [536] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:32:27.716 UTC [536] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:32:27.716 UTC [536] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:32:27.716 UTC [536] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:32:27.717 UTC [536] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:32:27.718 UTC [536] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:32:27.718 UTC [536] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:32:27.718 UTC [536] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:32:27.719 UTC [536] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:32:27.719 UTC [536] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:32:27.719 UTC [536] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:32:27.720 UTC [536] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:32:27.721 UTC [536] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:32:27.721 UTC [536] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:32:27.721 UTC [536] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:32:27.722 UTC [536] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:32:27.723 UTC [536] DEBUG:  building index "pg_toast_28099_index" on table "pg_toast_28099" serially
2025-04-19 07:32:27.724 UTC [536] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:32:27.724 UTC [536] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:32:27.724 UTC [536] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:32:27.725 UTC [536] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:32:27.727 UTC [536] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:32:27.727 UTC [536] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:32:27.727 UTC [536] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:32:27.728 UTC [536] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:32:27.728 UTC [536] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:32:27.728 UTC [536] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:32:27.730 UTC [536] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:32:27.731 UTC [536] DEBUG:  building index "pg_toast_28132_index" on table "pg_toast_28132" serially
2025-04-19 07:32:27.732 UTC [536] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:32:27.733 UTC [536] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:32:27.733 UTC [536] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:32:27.733 UTC [536] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:32:27.734 UTC [536] DEBUG:  building index "pg_toast_28143_index" on table "pg_toast_28143" serially
2025-04-19 07:32:27.735 UTC [536] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:32:27.735 UTC [536] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:32:27.735 UTC [536] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:32:27.737 UTC [536] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:32:27.737 UTC [536] DEBUG:  building index "pg_toast_28166_index" on table "pg_toast_28166" serially
2025-04-19 07:32:27.738 UTC [536] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:32:27.738 UTC [536] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:32:27.738 UTC [536] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:32:27.739 UTC [536] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:32:27.739 UTC [536] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:32:27.740 UTC [536] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:32:27.740 UTC [536] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:32:27.741 UTC [536] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:32:27.741 UTC [536] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:32:27.742 UTC [536] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:32:27.742 UTC [536] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:32:27.742 UTC [536] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:32:27.742 UTC [536] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:32:27.743 UTC [536] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:32:27.743 UTC [536] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:32:27.744 UTC [536] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:32:27.744 UTC [536] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:32:27.745 UTC [536] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:32:27.745 UTC [536] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:32:27.746 UTC [536] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:32:27.746 UTC [536] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:32:27.747 UTC [536] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:32:27.747 UTC [536] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:32:27.748 UTC [536] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:32:27.748 UTC [536] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:32:27.755 UTC [536] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:32:27.998 UTC [536] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$2kpu7Vr0bs1zK11/Yttjq.3HVPcfYE7/t4ASvTYY1MEHYwtXKlpCi')
	                RETURNING id, username, email
	                
2025-04-19 07:32:27.999 UTC [536] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:32:27.999 UTC [536] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:32:36.449 UTC [544] FATAL:  password authentication failed for user "admin@example.com"
2025-04-19 07:32:36.449 UTC [544] DETAIL:  Role "admin@example.com" does not exist.
	Connection matched pg_hba.conf line 100: "host all all all scram-sha-256"
2025-04-19 07:32:40.945 UTC [536] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 07:32:41.260 UTC [536] DEBUG:  unexpected EOF on client connection
2025-04-19 07:32:43.045 UTC [545] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:32:43.051 UTC [545] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:32:43.057 UTC [545] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:32:43.057 UTC [545] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:32:43.061 UTC [545] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:32:43.065 UTC [545] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:32:43.067 UTC [545] DEBUG:  building index "pg_toast_28202_index" on table "pg_toast_28202" serially
2025-04-19 07:32:43.069 UTC [545] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:32:43.069 UTC [545] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:32:43.069 UTC [545] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:32:43.071 UTC [545] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:32:43.071 UTC [545] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:32:43.071 UTC [545] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:32:43.072 UTC [545] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:32:43.072 UTC [545] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:32:43.072 UTC [545] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:32:43.073 UTC [545] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:32:43.074 UTC [545] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:32:43.074 UTC [545] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:32:43.074 UTC [545] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:32:43.075 UTC [545] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:32:43.076 UTC [545] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:32:43.076 UTC [545] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:32:43.077 UTC [545] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:32:43.080 UTC [545] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:32:43.080 UTC [545] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:32:43.080 UTC [545] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:32:43.081 UTC [545] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:32:43.081 UTC [545] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:32:43.081 UTC [545] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:32:43.083 UTC [545] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:32:43.084 UTC [545] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:32:43.084 UTC [545] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:32:43.084 UTC [545] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:32:43.086 UTC [545] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:32:43.087 UTC [545] DEBUG:  building index "pg_toast_28263_index" on table "pg_toast_28263" serially
2025-04-19 07:32:43.088 UTC [545] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:32:43.088 UTC [545] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:32:43.089 UTC [545] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:32:43.090 UTC [545] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:32:43.091 UTC [545] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:32:43.091 UTC [545] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:32:43.091 UTC [545] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:32:43.092 UTC [545] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:32:43.092 UTC [545] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:32:43.092 UTC [545] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:32:43.093 UTC [545] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:32:43.095 UTC [545] DEBUG:  building index "pg_toast_28296_index" on table "pg_toast_28296" serially
2025-04-19 07:32:43.096 UTC [545] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:32:43.096 UTC [545] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:32:43.096 UTC [545] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:32:43.097 UTC [545] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:32:43.098 UTC [545] DEBUG:  building index "pg_toast_28307_index" on table "pg_toast_28307" serially
2025-04-19 07:32:43.099 UTC [545] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:32:43.099 UTC [545] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:32:43.099 UTC [545] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:32:43.100 UTC [545] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:32:43.101 UTC [545] DEBUG:  building index "pg_toast_28330_index" on table "pg_toast_28330" serially
2025-04-19 07:32:43.102 UTC [545] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:32:43.102 UTC [545] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:32:43.102 UTC [545] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:32:43.103 UTC [545] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:32:43.103 UTC [545] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:32:43.104 UTC [545] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:32:43.104 UTC [545] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:32:43.105 UTC [545] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:32:43.105 UTC [545] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:32:43.106 UTC [545] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:32:43.106 UTC [545] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:32:43.107 UTC [545] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:32:43.107 UTC [545] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:32:43.108 UTC [545] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:32:43.108 UTC [545] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:32:43.109 UTC [545] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:32:43.109 UTC [545] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:32:43.110 UTC [545] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:32:43.110 UTC [545] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:32:43.111 UTC [545] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:32:43.111 UTC [545] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:32:43.112 UTC [545] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:32:43.112 UTC [545] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:32:43.112 UTC [545] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:32:43.112 UTC [545] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:32:43.122 UTC [545] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:32:43.403 UTC [545] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$pCfiL0mBKaNeL7Zze.3bGu5WBEriiLCEcl6grT0C38tBa2dp.yeNC')
	                RETURNING id, username, email
	                
2025-04-19 07:32:43.404 UTC [545] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:32:43.405 UTC [545] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:32:43.407 UTC [545] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 07:32:43.435 UTC [545] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:32:43.436 UTC [545] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:32:43.441 UTC [545] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:32:43.448 UTC [545] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:32:43.448 UTC [545] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:32:43.452 UTC [545] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:32:43.458 UTC [545] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:32:43.460 UTC [545] DEBUG:  building index "pg_toast_28366_index" on table "pg_toast_28366" serially
2025-04-19 07:32:43.462 UTC [545] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:32:43.462 UTC [545] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:32:43.462 UTC [545] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:32:43.464 UTC [545] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:32:43.464 UTC [545] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:32:43.464 UTC [545] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:32:43.466 UTC [545] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:32:43.466 UTC [545] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:32:43.466 UTC [545] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:32:43.468 UTC [545] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:32:43.470 UTC [545] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:32:43.471 UTC [545] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:32:43.471 UTC [545] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:32:43.472 UTC [545] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:32:43.473 UTC [545] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:32:43.473 UTC [545] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:32:43.474 UTC [545] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:32:43.476 UTC [545] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:32:43.476 UTC [545] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:32:43.476 UTC [545] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:32:43.477 UTC [545] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:32:43.477 UTC [545] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:32:43.477 UTC [545] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:32:43.478 UTC [545] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:32:43.479 UTC [545] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:32:43.479 UTC [545] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:32:43.479 UTC [545] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:32:43.480 UTC [545] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:32:43.482 UTC [545] DEBUG:  building index "pg_toast_28427_index" on table "pg_toast_28427" serially
2025-04-19 07:32:43.482 UTC [545] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:32:43.483 UTC [545] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:32:43.483 UTC [545] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:32:43.484 UTC [545] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:32:43.485 UTC [545] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:32:43.485 UTC [545] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:32:43.485 UTC [545] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:32:43.486 UTC [545] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:32:43.486 UTC [545] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:32:43.486 UTC [545] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:32:43.487 UTC [545] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:32:43.488 UTC [545] DEBUG:  building index "pg_toast_28460_index" on table "pg_toast_28460" serially
2025-04-19 07:32:43.489 UTC [545] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:32:43.489 UTC [545] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:32:43.489 UTC [545] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:32:43.490 UTC [545] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:32:43.491 UTC [545] DEBUG:  building index "pg_toast_28471_index" on table "pg_toast_28471" serially
2025-04-19 07:32:43.492 UTC [545] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:32:43.492 UTC [545] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:32:43.492 UTC [545] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:32:43.494 UTC [545] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:32:43.495 UTC [545] DEBUG:  building index "pg_toast_28494_index" on table "pg_toast_28494" serially
2025-04-19 07:32:43.496 UTC [545] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:32:43.496 UTC [545] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:32:43.496 UTC [545] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:32:43.497 UTC [545] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:32:43.497 UTC [545] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:32:43.498 UTC [545] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:32:43.498 UTC [545] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:32:43.499 UTC [545] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:32:43.499 UTC [545] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:32:43.499 UTC [545] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:32:43.499 UTC [545] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:32:43.500 UTC [545] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:32:43.500 UTC [545] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:32:43.501 UTC [545] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:32:43.501 UTC [545] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:32:43.502 UTC [545] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:32:43.502 UTC [545] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:32:43.503 UTC [545] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:32:43.503 UTC [545] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:32:43.503 UTC [545] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:32:43.503 UTC [545] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:32:43.505 UTC [545] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:32:43.505 UTC [545] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:32:43.506 UTC [545] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:32:43.506 UTC [545] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:32:43.512 UTC [545] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:32:43.761 UTC [545] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$tdsRmfKQqA9BUbr6N0xva.1jt3lvyN5KU.eSDzcRDa0cq6.ZkvcHW')
	                RETURNING id, username, email
	                
2025-04-19 07:32:43.762 UTC [545] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:32:43.762 UTC [545] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:32:50.358 UTC [553] DEBUG:  autovacuum: processing database "powerball"
2025-04-19 07:32:50.492 UTC [59] DEBUG:  performing replication slot checkpoint
2025-04-19 07:32:50.602 UTC [553] DEBUG:  rehashing catalog cache id 14 for pg_opclass; 17 tups, 8 buckets
2025-04-19 07:32:56.817 UTC [545] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 07:32:57.097 UTC [545] DEBUG:  unexpected EOF on client connection
2025-04-19 07:32:58.938 UTC [561] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:32:58.944 UTC [561] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:32:58.950 UTC [561] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:32:58.950 UTC [561] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:32:58.954 UTC [561] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:32:58.958 UTC [561] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:32:58.962 UTC [561] DEBUG:  building index "pg_toast_28531_index" on table "pg_toast_28531" serially
2025-04-19 07:32:58.963 UTC [561] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:32:58.964 UTC [561] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:32:58.964 UTC [561] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:32:58.965 UTC [561] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:32:58.965 UTC [561] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:32:58.966 UTC [561] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:32:58.966 UTC [561] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:32:58.966 UTC [561] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:32:58.966 UTC [561] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:32:58.967 UTC [561] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:32:58.968 UTC [561] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:32:58.968 UTC [561] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:32:58.968 UTC [561] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:32:58.969 UTC [561] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:32:58.969 UTC [561] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:32:58.969 UTC [561] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:32:58.970 UTC [561] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:32:58.972 UTC [561] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:32:58.973 UTC [561] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:32:58.973 UTC [561] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:32:58.974 UTC [561] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:32:58.975 UTC [561] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:32:58.975 UTC [561] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:32:58.977 UTC [561] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:32:58.978 UTC [561] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:32:58.978 UTC [561] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:32:58.978 UTC [561] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:32:58.980 UTC [561] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:32:58.982 UTC [561] DEBUG:  building index "pg_toast_28592_index" on table "pg_toast_28592" serially
2025-04-19 07:32:58.983 UTC [561] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:32:58.983 UTC [561] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:32:58.983 UTC [561] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:32:58.985 UTC [561] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:32:58.986 UTC [561] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:32:58.986 UTC [561] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:32:58.986 UTC [561] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:32:58.987 UTC [561] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:32:58.987 UTC [561] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:32:58.987 UTC [561] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:32:58.988 UTC [561] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:32:58.989 UTC [561] DEBUG:  building index "pg_toast_28625_index" on table "pg_toast_28625" serially
2025-04-19 07:32:58.990 UTC [561] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:32:58.990 UTC [561] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:32:58.990 UTC [561] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:32:58.991 UTC [561] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:32:58.992 UTC [561] DEBUG:  building index "pg_toast_28636_index" on table "pg_toast_28636" serially
2025-04-19 07:32:58.993 UTC [561] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:32:58.993 UTC [561] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:32:58.993 UTC [561] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:32:58.995 UTC [561] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:32:58.996 UTC [561] DEBUG:  building index "pg_toast_28659_index" on table "pg_toast_28659" serially
2025-04-19 07:32:58.997 UTC [561] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:32:58.997 UTC [561] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:32:58.997 UTC [561] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:32:58.998 UTC [561] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:32:58.999 UTC [561] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:32:59.000 UTC [561] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:32:59.000 UTC [561] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:32:59.001 UTC [561] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:32:59.001 UTC [561] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:32:59.001 UTC [561] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:32:59.001 UTC [561] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:32:59.002 UTC [561] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:32:59.002 UTC [561] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:32:59.003 UTC [561] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:32:59.003 UTC [561] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:32:59.005 UTC [561] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:32:59.005 UTC [561] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:32:59.005 UTC [561] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:32:59.005 UTC [561] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:32:59.006 UTC [561] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:32:59.006 UTC [561] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:32:59.007 UTC [561] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:32:59.007 UTC [561] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:32:59.008 UTC [561] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:32:59.008 UTC [561] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:32:59.017 UTC [561] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:32:59.286 UTC [561] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$MnRS0UciSyzDIV.vo0AyOOTeF.FmxjArgyPoJBbOrSFxQZ2mqFcVq')
	                RETURNING id, username, email
	                
2025-04-19 07:32:59.287 UTC [561] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:32:59.287 UTC [561] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:32:59.288 UTC [561] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 07:32:59.298 UTC [561] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:32:59.299 UTC [561] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:32:59.302 UTC [561] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:32:59.306 UTC [561] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:32:59.306 UTC [561] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:32:59.309 UTC [561] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:32:59.314 UTC [561] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:32:59.315 UTC [561] DEBUG:  building index "pg_toast_28695_index" on table "pg_toast_28695" serially
2025-04-19 07:32:59.316 UTC [561] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:32:59.317 UTC [561] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:32:59.317 UTC [561] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:32:59.317 UTC [561] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:32:59.317 UTC [561] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:32:59.317 UTC [561] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:32:59.318 UTC [561] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:32:59.318 UTC [561] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:32:59.318 UTC [561] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:32:59.319 UTC [561] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:32:59.320 UTC [561] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:32:59.320 UTC [561] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:32:59.320 UTC [561] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:32:59.321 UTC [561] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:32:59.321 UTC [561] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:32:59.321 UTC [561] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:32:59.322 UTC [561] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:32:59.323 UTC [561] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:32:59.323 UTC [561] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:32:59.323 UTC [561] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:32:59.324 UTC [561] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:32:59.324 UTC [561] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:32:59.324 UTC [561] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:32:59.325 UTC [561] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:32:59.326 UTC [561] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:32:59.326 UTC [561] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:32:59.326 UTC [561] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:32:59.328 UTC [561] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:32:59.329 UTC [561] DEBUG:  building index "pg_toast_28756_index" on table "pg_toast_28756" serially
2025-04-19 07:32:59.330 UTC [561] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:32:59.330 UTC [561] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:32:59.330 UTC [561] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:32:59.332 UTC [561] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:32:59.332 UTC [561] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:32:59.333 UTC [561] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:32:59.333 UTC [561] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:32:59.334 UTC [561] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:32:59.334 UTC [561] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:32:59.334 UTC [561] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:32:59.335 UTC [561] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:32:59.336 UTC [561] DEBUG:  building index "pg_toast_28789_index" on table "pg_toast_28789" serially
2025-04-19 07:32:59.337 UTC [561] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:32:59.337 UTC [561] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:32:59.337 UTC [561] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:32:59.338 UTC [561] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:32:59.339 UTC [561] DEBUG:  building index "pg_toast_28800_index" on table "pg_toast_28800" serially
2025-04-19 07:32:59.339 UTC [561] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:32:59.339 UTC [561] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:32:59.340 UTC [561] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:32:59.341 UTC [561] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:32:59.342 UTC [561] DEBUG:  building index "pg_toast_28823_index" on table "pg_toast_28823" serially
2025-04-19 07:32:59.343 UTC [561] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:32:59.343 UTC [561] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:32:59.343 UTC [561] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:32:59.344 UTC [561] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:32:59.344 UTC [561] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:32:59.345 UTC [561] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:32:59.345 UTC [561] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:32:59.346 UTC [561] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:32:59.346 UTC [561] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:32:59.347 UTC [561] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:32:59.347 UTC [561] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:32:59.348 UTC [561] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:32:59.348 UTC [561] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:32:59.348 UTC [561] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:32:59.348 UTC [561] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:32:59.350 UTC [561] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:32:59.350 UTC [561] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:32:59.350 UTC [561] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:32:59.350 UTC [561] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:32:59.351 UTC [561] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:32:59.351 UTC [561] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:32:59.352 UTC [561] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:32:59.352 UTC [561] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:32:59.353 UTC [561] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:32:59.353 UTC [561] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:32:59.359 UTC [561] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:32:59.605 UTC [561] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$X0O9fHo/Gx0SE2qtVp00f.3zoXK.JcTMxRjtArwDfQnTb3XAdOnOm')
	                RETURNING id, username, email
	                
2025-04-19 07:32:59.606 UTC [561] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:32:59.606 UTC [561] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:33:12.725 UTC [561] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 07:33:13.014 UTC [561] DEBUG:  unexpected EOF on client connection
2025-04-19 07:33:15.232 UTC [569] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:33:15.249 UTC [569] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:33:15.257 UTC [569] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:33:15.257 UTC [569] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:33:15.261 UTC [569] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:33:15.266 UTC [569] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:33:15.274 UTC [569] DEBUG:  building index "pg_toast_28859_index" on table "pg_toast_28859" serially
2025-04-19 07:33:15.276 UTC [569] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:33:15.277 UTC [569] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:33:15.277 UTC [569] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:33:15.278 UTC [569] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:33:15.278 UTC [569] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:33:15.278 UTC [569] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:33:15.279 UTC [569] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:33:15.279 UTC [569] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:33:15.279 UTC [569] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:33:15.280 UTC [569] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:33:15.281 UTC [569] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:33:15.281 UTC [569] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:33:15.281 UTC [569] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:33:15.282 UTC [569] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:33:15.282 UTC [569] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:33:15.282 UTC [569] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:33:15.283 UTC [569] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:33:15.284 UTC [569] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:33:15.284 UTC [569] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:33:15.285 UTC [569] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:33:15.285 UTC [569] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:33:15.286 UTC [569] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:33:15.286 UTC [569] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:33:15.287 UTC [569] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:33:15.289 UTC [569] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:33:15.289 UTC [569] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:33:15.289 UTC [569] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:33:15.290 UTC [569] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:33:15.292 UTC [569] DEBUG:  building index "pg_toast_28920_index" on table "pg_toast_28920" serially
2025-04-19 07:33:15.293 UTC [569] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:33:15.293 UTC [569] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:33:15.293 UTC [569] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:33:15.294 UTC [569] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:33:15.296 UTC [569] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:33:15.296 UTC [569] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:33:15.296 UTC [569] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:33:15.297 UTC [569] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:33:15.297 UTC [569] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:33:15.297 UTC [569] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:33:15.298 UTC [569] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:33:15.299 UTC [569] DEBUG:  building index "pg_toast_28953_index" on table "pg_toast_28953" serially
2025-04-19 07:33:15.300 UTC [569] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:33:15.300 UTC [569] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:33:15.300 UTC [569] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:33:15.301 UTC [569] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:33:15.303 UTC [569] DEBUG:  building index "pg_toast_28964_index" on table "pg_toast_28964" serially
2025-04-19 07:33:15.303 UTC [569] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:33:15.304 UTC [569] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:33:15.304 UTC [569] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:33:15.305 UTC [569] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:33:15.306 UTC [569] DEBUG:  building index "pg_toast_28987_index" on table "pg_toast_28987" serially
2025-04-19 07:33:15.307 UTC [569] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:33:15.307 UTC [569] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:33:15.307 UTC [569] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:33:15.308 UTC [569] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:33:15.308 UTC [569] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:33:15.309 UTC [569] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:33:15.309 UTC [569] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:33:15.310 UTC [569] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:33:15.310 UTC [569] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:33:15.310 UTC [569] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:33:15.310 UTC [569] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:33:15.311 UTC [569] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:33:15.311 UTC [569] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:33:15.312 UTC [569] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:33:15.312 UTC [569] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:33:15.313 UTC [569] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:33:15.313 UTC [569] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:33:15.314 UTC [569] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:33:15.314 UTC [569] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:33:15.315 UTC [569] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:33:15.315 UTC [569] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:33:15.315 UTC [569] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:33:15.315 UTC [569] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:33:15.316 UTC [569] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:33:15.316 UTC [569] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:33:15.331 UTC [569] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:33:15.599 UTC [569] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$b3DlDKqrtmTSZE4o04OmG.PLHTPbtoDN8dFQFjLhTyzCfIFr4234u')
	                RETURNING id, username, email
	                
2025-04-19 07:33:15.600 UTC [569] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:33:15.601 UTC [569] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:33:15.601 UTC [569] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 07:33:15.610 UTC [569] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:33:15.611 UTC [569] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:33:15.614 UTC [569] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:33:15.619 UTC [569] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:33:15.619 UTC [569] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:33:15.625 UTC [569] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:33:15.629 UTC [569] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:33:15.630 UTC [569] DEBUG:  building index "pg_toast_29023_index" on table "pg_toast_29023" serially
2025-04-19 07:33:15.631 UTC [569] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:33:15.631 UTC [569] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:33:15.631 UTC [569] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:33:15.632 UTC [569] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:33:15.632 UTC [569] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:33:15.632 UTC [569] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:33:15.633 UTC [569] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:33:15.633 UTC [569] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:33:15.633 UTC [569] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:33:15.634 UTC [569] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:33:15.635 UTC [569] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:33:15.635 UTC [569] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:33:15.635 UTC [569] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:33:15.636 UTC [569] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:33:15.636 UTC [569] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:33:15.636 UTC [569] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:33:15.637 UTC [569] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:33:15.638 UTC [569] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:33:15.638 UTC [569] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:33:15.638 UTC [569] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:33:15.639 UTC [569] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:33:15.639 UTC [569] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:33:15.639 UTC [569] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:33:15.640 UTC [569] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:33:15.641 UTC [569] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:33:15.641 UTC [569] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:33:15.641 UTC [569] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:33:15.642 UTC [569] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:33:15.643 UTC [569] DEBUG:  building index "pg_toast_29084_index" on table "pg_toast_29084" serially
2025-04-19 07:33:15.644 UTC [569] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:33:15.644 UTC [569] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:33:15.644 UTC [569] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:33:15.646 UTC [569] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:33:15.647 UTC [569] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:33:15.647 UTC [569] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:33:15.647 UTC [569] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:33:15.648 UTC [569] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:33:15.648 UTC [569] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:33:15.648 UTC [569] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:33:15.650 UTC [569] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:33:15.651 UTC [569] DEBUG:  building index "pg_toast_29117_index" on table "pg_toast_29117" serially
2025-04-19 07:33:15.652 UTC [569] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:33:15.652 UTC [569] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:33:15.652 UTC [569] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:33:15.653 UTC [569] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:33:15.654 UTC [569] DEBUG:  building index "pg_toast_29128_index" on table "pg_toast_29128" serially
2025-04-19 07:33:15.655 UTC [569] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:33:15.655 UTC [569] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:33:15.655 UTC [569] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:33:15.657 UTC [569] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:33:15.658 UTC [569] DEBUG:  building index "pg_toast_29151_index" on table "pg_toast_29151" serially
2025-04-19 07:33:15.658 UTC [569] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:33:15.658 UTC [569] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:33:15.658 UTC [569] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:33:15.659 UTC [569] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:33:15.659 UTC [569] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:33:15.660 UTC [569] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:33:15.660 UTC [569] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:33:15.661 UTC [569] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:33:15.661 UTC [569] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:33:15.662 UTC [569] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:33:15.662 UTC [569] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:33:15.663 UTC [569] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:33:15.663 UTC [569] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:33:15.663 UTC [569] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:33:15.663 UTC [569] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:33:15.665 UTC [569] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:33:15.665 UTC [569] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:33:15.665 UTC [569] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:33:15.665 UTC [569] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:33:15.666 UTC [569] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:33:15.666 UTC [569] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:33:15.667 UTC [569] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:33:15.667 UTC [569] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:33:15.668 UTC [569] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:33:15.668 UTC [569] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:33:15.674 UTC [569] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:33:15.916 UTC [569] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$lrvPXexkHvr.omC8g8aRFeMtt58nX5RgBDBA6sQ/9jEnmUO987coy')
	                RETURNING id, username, email
	                
2025-04-19 07:33:15.917 UTC [569] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:33:15.917 UTC [569] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:33:19.149 UTC [577] LOG:  statement: select oid "id",typname "type_name" from pg_type where typname in ('geometry','varbyte')
2025-04-19 07:33:19.169 UTC [577] DEBUG:  unexpected EOF on client connection
2025-04-19 07:33:20.354 UTC [578] DEBUG:  autovacuum: processing database "postgres"
2025-04-19 07:33:29.093 UTC [569] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 07:33:29.513 UTC [569] DEBUG:  unexpected EOF on client connection
2025-04-19 07:33:36.012 UTC [586] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:33:36.065 UTC [586] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:33:36.138 UTC [586] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:33:36.138 UTC [586] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:33:36.149 UTC [586] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:33:36.159 UTC [586] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:33:36.163 UTC [586] DEBUG:  building index "pg_toast_29187_index" on table "pg_toast_29187" serially
2025-04-19 07:33:36.168 UTC [586] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:33:36.169 UTC [586] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:33:36.169 UTC [586] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:33:36.171 UTC [586] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:33:36.171 UTC [586] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:33:36.172 UTC [586] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:33:36.174 UTC [586] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:33:36.174 UTC [586] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:33:36.175 UTC [586] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:33:36.177 UTC [586] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:33:36.179 UTC [586] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:33:36.179 UTC [586] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:33:36.179 UTC [586] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:33:36.180 UTC [586] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:33:36.181 UTC [586] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:33:36.181 UTC [586] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:33:36.182 UTC [586] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:33:36.183 UTC [586] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:33:36.183 UTC [586] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:33:36.183 UTC [586] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:33:36.184 UTC [586] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:33:36.184 UTC [586] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:33:36.184 UTC [586] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:33:36.186 UTC [586] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:33:36.188 UTC [586] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:33:36.189 UTC [586] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:33:36.189 UTC [586] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:33:36.190 UTC [586] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:33:36.192 UTC [586] DEBUG:  building index "pg_toast_29248_index" on table "pg_toast_29248" serially
2025-04-19 07:33:36.194 UTC [586] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:33:36.194 UTC [586] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:33:36.194 UTC [586] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:33:36.195 UTC [586] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:33:36.197 UTC [586] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:33:36.197 UTC [586] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:33:36.197 UTC [586] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:33:36.198 UTC [586] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:33:36.198 UTC [586] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:33:36.198 UTC [586] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:33:36.200 UTC [586] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:33:36.201 UTC [586] DEBUG:  building index "pg_toast_29281_index" on table "pg_toast_29281" serially
2025-04-19 07:33:36.202 UTC [586] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:33:36.203 UTC [586] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:33:36.203 UTC [586] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:33:36.204 UTC [586] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:33:36.205 UTC [586] DEBUG:  building index "pg_toast_29292_index" on table "pg_toast_29292" serially
2025-04-19 07:33:36.206 UTC [586] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:33:36.206 UTC [586] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:33:36.206 UTC [586] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:33:36.207 UTC [586] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:33:36.208 UTC [586] DEBUG:  building index "pg_toast_29315_index" on table "pg_toast_29315" serially
2025-04-19 07:33:36.209 UTC [586] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:33:36.209 UTC [586] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:33:36.209 UTC [586] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:33:36.210 UTC [586] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:33:36.210 UTC [586] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:33:36.211 UTC [586] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:33:36.211 UTC [586] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:33:36.212 UTC [586] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:33:36.212 UTC [586] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:33:36.213 UTC [586] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:33:36.213 UTC [586] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:33:36.215 UTC [586] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:33:36.215 UTC [586] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:33:36.216 UTC [586] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:33:36.216 UTC [586] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:33:36.217 UTC [586] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:33:36.217 UTC [586] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:33:36.219 UTC [586] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:33:36.220 UTC [586] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:33:36.223 UTC [586] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:33:36.223 UTC [586] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:33:36.224 UTC [586] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:33:36.225 UTC [586] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:33:36.231 UTC [586] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:33:36.231 UTC [586] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:33:36.262 UTC [586] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:33:36.569 UTC [586] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$6wYgpIy10LptJQ4LBJ0vMOFVCEx3aULsVGehQWm/yzSTfDiMU5gqa')
	                RETURNING id, username, email
	                
2025-04-19 07:33:36.570 UTC [586] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:33:36.570 UTC [586] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:33:36.572 UTC [586] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 07:33:36.591 UTC [586] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:33:36.594 UTC [586] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:33:36.597 UTC [586] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:33:36.603 UTC [586] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:33:36.603 UTC [586] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:33:36.607 UTC [586] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:33:36.610 UTC [586] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:33:36.612 UTC [586] DEBUG:  building index "pg_toast_29351_index" on table "pg_toast_29351" serially
2025-04-19 07:33:36.613 UTC [586] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:33:36.613 UTC [586] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:33:36.613 UTC [586] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:33:36.614 UTC [586] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:33:36.614 UTC [586] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:33:36.614 UTC [586] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:33:36.615 UTC [586] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:33:36.615 UTC [586] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:33:36.615 UTC [586] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:33:36.616 UTC [586] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:33:36.617 UTC [586] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:33:36.617 UTC [586] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:33:36.617 UTC [586] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:33:36.618 UTC [586] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:33:36.618 UTC [586] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:33:36.618 UTC [586] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:33:36.619 UTC [586] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:33:36.620 UTC [586] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:33:36.620 UTC [586] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:33:36.620 UTC [586] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:33:36.621 UTC [586] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:33:36.621 UTC [586] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:33:36.621 UTC [586] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:33:36.622 UTC [586] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:33:36.623 UTC [586] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:33:36.623 UTC [586] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:33:36.623 UTC [586] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:33:36.624 UTC [586] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:33:36.625 UTC [586] DEBUG:  building index "pg_toast_29412_index" on table "pg_toast_29412" serially
2025-04-19 07:33:36.626 UTC [586] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:33:36.626 UTC [586] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:33:36.626 UTC [586] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:33:36.628 UTC [586] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:33:36.629 UTC [586] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:33:36.629 UTC [586] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:33:36.629 UTC [586] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:33:36.630 UTC [586] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:33:36.630 UTC [586] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:33:36.630 UTC [586] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:33:36.631 UTC [586] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:33:36.633 UTC [586] DEBUG:  building index "pg_toast_29445_index" on table "pg_toast_29445" serially
2025-04-19 07:33:36.633 UTC [586] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:33:36.634 UTC [586] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:33:36.634 UTC [586] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:33:36.634 UTC [586] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:33:36.635 UTC [586] DEBUG:  building index "pg_toast_29456_index" on table "pg_toast_29456" serially
2025-04-19 07:33:36.636 UTC [586] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:33:36.636 UTC [586] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:33:36.636 UTC [586] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:33:36.638 UTC [586] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:33:36.638 UTC [586] DEBUG:  building index "pg_toast_29479_index" on table "pg_toast_29479" serially
2025-04-19 07:33:36.639 UTC [586] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:33:36.639 UTC [586] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:33:36.639 UTC [586] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:33:36.640 UTC [586] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:33:36.640 UTC [586] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:33:36.641 UTC [586] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:33:36.641 UTC [586] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:33:36.642 UTC [586] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:33:36.642 UTC [586] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:33:36.642 UTC [586] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:33:36.643 UTC [586] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:33:36.644 UTC [586] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:33:36.644 UTC [586] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:33:36.645 UTC [586] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:33:36.645 UTC [586] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:33:36.646 UTC [586] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:33:36.646 UTC [586] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:33:36.648 UTC [586] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:33:36.648 UTC [586] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:33:36.650 UTC [586] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:33:36.650 UTC [586] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:33:36.651 UTC [586] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:33:36.651 UTC [586] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:33:36.652 UTC [586] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:33:36.652 UTC [586] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:33:36.660 UTC [586] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:33:36.946 UTC [586] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$aWusNXz7SBRjcyzIDD/rZOwx7y62nZvuQVVNJs3uAJBvnUy7PpYZ2')
	                RETURNING id, username, email
	                
2025-04-19 07:33:36.947 UTC [586] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:33:36.947 UTC [586] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:33:45.563 UTC [586] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 07:33:45.854 UTC [586] DEBUG:  unexpected EOF on client connection
2025-04-19 07:33:48.174 UTC [601] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:33:48.182 UTC [601] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:33:48.193 UTC [601] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:33:48.193 UTC [601] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:33:48.197 UTC [601] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:33:48.201 UTC [601] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:33:48.204 UTC [601] DEBUG:  building index "pg_toast_29515_index" on table "pg_toast_29515" serially
2025-04-19 07:33:48.206 UTC [601] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:33:48.206 UTC [601] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:33:48.206 UTC [601] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:33:48.208 UTC [601] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:33:48.208 UTC [601] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:33:48.208 UTC [601] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:33:48.209 UTC [601] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:33:48.209 UTC [601] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:33:48.209 UTC [601] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:33:48.210 UTC [601] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:33:48.211 UTC [601] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:33:48.211 UTC [601] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:33:48.211 UTC [601] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:33:48.212 UTC [601] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:33:48.212 UTC [601] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:33:48.212 UTC [601] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:33:48.213 UTC [601] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:33:48.217 UTC [601] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:33:48.217 UTC [601] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:33:48.217 UTC [601] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:33:48.218 UTC [601] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:33:48.219 UTC [601] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:33:48.219 UTC [601] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:33:48.221 UTC [601] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:33:48.222 UTC [601] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:33:48.222 UTC [601] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:33:48.222 UTC [601] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:33:48.224 UTC [601] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:33:48.226 UTC [601] DEBUG:  building index "pg_toast_29576_index" on table "pg_toast_29576" serially
2025-04-19 07:33:48.227 UTC [601] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:33:48.227 UTC [601] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:33:48.227 UTC [601] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:33:48.228 UTC [601] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:33:48.231 UTC [601] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:33:48.231 UTC [601] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:33:48.231 UTC [601] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:33:48.232 UTC [601] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:33:48.233 UTC [601] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:33:48.233 UTC [601] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:33:48.234 UTC [601] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:33:48.236 UTC [601] DEBUG:  building index "pg_toast_29609_index" on table "pg_toast_29609" serially
2025-04-19 07:33:48.236 UTC [601] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:33:48.237 UTC [601] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:33:48.237 UTC [601] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:33:48.238 UTC [601] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:33:48.239 UTC [601] DEBUG:  building index "pg_toast_29620_index" on table "pg_toast_29620" serially
2025-04-19 07:33:48.240 UTC [601] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:33:48.240 UTC [601] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:33:48.240 UTC [601] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:33:48.242 UTC [601] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:33:48.243 UTC [601] DEBUG:  building index "pg_toast_29643_index" on table "pg_toast_29643" serially
2025-04-19 07:33:48.244 UTC [601] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:33:48.244 UTC [601] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:33:48.244 UTC [601] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:33:48.245 UTC [601] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:33:48.245 UTC [601] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:33:48.246 UTC [601] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:33:48.246 UTC [601] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:33:48.247 UTC [601] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:33:48.247 UTC [601] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:33:48.248 UTC [601] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:33:48.248 UTC [601] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:33:48.249 UTC [601] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:33:48.249 UTC [601] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:33:48.250 UTC [601] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:33:48.250 UTC [601] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:33:48.251 UTC [601] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:33:48.251 UTC [601] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:33:48.252 UTC [601] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:33:48.252 UTC [601] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:33:48.253 UTC [601] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:33:48.253 UTC [601] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:33:48.254 UTC [601] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:33:48.254 UTC [601] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:33:48.255 UTC [601] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:33:48.255 UTC [601] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:33:48.269 UTC [601] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:33:48.560 UTC [601] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$RZR2GJsFAEO52nZrlwy7out.ExrddxafYYK6b/sdmk6OWeI3M/H7W')
	                RETURNING id, username, email
	                
2025-04-19 07:33:48.561 UTC [601] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:33:48.562 UTC [601] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:33:48.562 UTC [601] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 07:33:48.579 UTC [601] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:33:48.581 UTC [601] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:33:48.592 UTC [601] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:33:48.606 UTC [601] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:33:48.606 UTC [601] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:33:48.612 UTC [601] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:33:48.617 UTC [601] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:33:48.618 UTC [601] DEBUG:  building index "pg_toast_29679_index" on table "pg_toast_29679" serially
2025-04-19 07:33:48.619 UTC [601] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:33:48.620 UTC [601] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:33:48.620 UTC [601] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:33:48.621 UTC [601] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:33:48.621 UTC [601] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:33:48.621 UTC [601] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:33:48.621 UTC [601] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:33:48.622 UTC [601] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:33:48.622 UTC [601] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:33:48.622 UTC [601] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:33:48.623 UTC [601] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:33:48.623 UTC [601] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:33:48.623 UTC [601] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:33:48.624 UTC [601] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:33:48.624 UTC [601] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:33:48.624 UTC [601] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:33:48.625 UTC [601] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:33:48.626 UTC [601] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:33:48.626 UTC [601] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:33:48.626 UTC [601] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:33:48.627 UTC [601] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:33:48.627 UTC [601] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:33:48.627 UTC [601] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:33:48.628 UTC [601] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:33:48.629 UTC [601] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:33:48.629 UTC [601] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:33:48.629 UTC [601] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:33:48.631 UTC [601] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:33:48.632 UTC [601] DEBUG:  building index "pg_toast_29740_index" on table "pg_toast_29740" serially
2025-04-19 07:33:48.632 UTC [601] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:33:48.633 UTC [601] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:33:48.633 UTC [601] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:33:48.634 UTC [601] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:33:48.635 UTC [601] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:33:48.635 UTC [601] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:33:48.635 UTC [601] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:33:48.635 UTC [601] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:33:48.635 UTC [601] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:33:48.636 UTC [601] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:33:48.637 UTC [601] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:33:48.637 UTC [601] DEBUG:  building index "pg_toast_29773_index" on table "pg_toast_29773" serially
2025-04-19 07:33:48.638 UTC [601] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:33:48.639 UTC [601] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:33:48.639 UTC [601] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:33:48.640 UTC [601] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:33:48.642 UTC [601] DEBUG:  building index "pg_toast_29784_index" on table "pg_toast_29784" serially
2025-04-19 07:33:48.643 UTC [601] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:33:48.643 UTC [601] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:33:48.643 UTC [601] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:33:48.646 UTC [601] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:33:48.648 UTC [601] DEBUG:  building index "pg_toast_29807_index" on table "pg_toast_29807" serially
2025-04-19 07:33:48.649 UTC [601] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:33:48.650 UTC [601] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:33:48.650 UTC [601] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:33:48.652 UTC [601] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:33:48.652 UTC [601] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:33:48.653 UTC [601] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:33:48.653 UTC [601] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:33:48.654 UTC [601] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:33:48.654 UTC [601] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:33:48.655 UTC [601] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:33:48.655 UTC [601] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:33:48.657 UTC [601] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:33:48.657 UTC [601] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:33:48.658 UTC [601] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:33:48.658 UTC [601] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:33:48.659 UTC [601] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:33:48.659 UTC [601] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:33:48.659 UTC [601] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:33:48.659 UTC [601] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:33:48.660 UTC [601] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:33:48.660 UTC [601] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:33:48.661 UTC [601] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:33:48.661 UTC [601] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:33:48.662 UTC [601] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:33:48.662 UTC [601] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:33:48.668 UTC [601] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:33:48.915 UTC [601] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$C8FnY2wa8KN2xzaaqyzt9O/1WFycwxKuGHk2K72v7g2plNl4f.IYG')
	                RETURNING id, username, email
	                
2025-04-19 07:33:48.916 UTC [601] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:33:48.917 UTC [601] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:33:50.371 UTC [602] DEBUG:  autovacuum: processing database "powerball"
2025-04-19 07:33:50.601 UTC [602] DEBUG:  rehashing catalog cache id 14 for pg_opclass; 17 tups, 8 buckets
2025-04-19 07:34:01.515 UTC [601] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 07:34:01.803 UTC [601] DEBUG:  unexpected EOF on client connection
2025-04-19 07:34:04.616 UTC [610] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:34:04.632 UTC [610] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:34:04.640 UTC [610] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:34:04.640 UTC [610] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:34:04.645 UTC [610] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:34:04.649 UTC [610] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:34:04.652 UTC [610] DEBUG:  building index "pg_toast_29844_index" on table "pg_toast_29844" serially
2025-04-19 07:34:04.653 UTC [610] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:34:04.654 UTC [610] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:34:04.654 UTC [610] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:34:04.655 UTC [610] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:34:04.655 UTC [610] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:34:04.656 UTC [610] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:34:04.656 UTC [610] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:34:04.656 UTC [610] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:34:04.656 UTC [610] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:34:04.657 UTC [610] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:34:04.658 UTC [610] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:34:04.659 UTC [610] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:34:04.659 UTC [610] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:34:04.659 UTC [610] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:34:04.660 UTC [610] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:34:04.660 UTC [610] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:34:04.661 UTC [610] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:34:04.662 UTC [610] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:34:04.662 UTC [610] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:34:04.662 UTC [610] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:34:04.663 UTC [610] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:34:04.664 UTC [610] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:34:04.664 UTC [610] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:34:04.666 UTC [610] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:34:04.666 UTC [610] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:34:04.667 UTC [610] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:34:04.667 UTC [610] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:34:04.668 UTC [610] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:34:04.670 UTC [610] DEBUG:  building index "pg_toast_29905_index" on table "pg_toast_29905" serially
2025-04-19 07:34:04.671 UTC [610] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:34:04.671 UTC [610] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:34:04.671 UTC [610] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:34:04.672 UTC [610] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:34:04.673 UTC [610] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:34:04.674 UTC [610] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:34:04.674 UTC [610] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:34:04.675 UTC [610] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:34:04.675 UTC [610] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:34:04.675 UTC [610] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:34:04.676 UTC [610] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:34:04.677 UTC [610] DEBUG:  building index "pg_toast_29938_index" on table "pg_toast_29938" serially
2025-04-19 07:34:04.679 UTC [610] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:34:04.679 UTC [610] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:34:04.679 UTC [610] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:34:04.680 UTC [610] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:34:04.681 UTC [610] DEBUG:  building index "pg_toast_29949_index" on table "pg_toast_29949" serially
2025-04-19 07:34:04.682 UTC [610] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:34:04.682 UTC [610] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:34:04.682 UTC [610] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:34:04.684 UTC [610] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:34:04.685 UTC [610] DEBUG:  building index "pg_toast_29972_index" on table "pg_toast_29972" serially
2025-04-19 07:34:04.686 UTC [610] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:34:04.686 UTC [610] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:34:04.686 UTC [610] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:34:04.688 UTC [610] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:34:04.688 UTC [610] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:34:04.689 UTC [610] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:34:04.689 UTC [610] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:34:04.690 UTC [610] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:34:04.690 UTC [610] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:34:04.691 UTC [610] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:34:04.691 UTC [610] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:34:04.692 UTC [610] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:34:04.692 UTC [610] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:34:04.694 UTC [610] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:34:04.694 UTC [610] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:34:04.695 UTC [610] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:34:04.695 UTC [610] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:34:04.696 UTC [610] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:34:04.696 UTC [610] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:34:04.697 UTC [610] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:34:04.697 UTC [610] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:34:04.698 UTC [610] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:34:04.698 UTC [610] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:34:04.699 UTC [610] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:34:04.699 UTC [610] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:34:04.715 UTC [610] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:34:05.001 UTC [610] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$MUtAEloAW1bHfbxS1jZUA.Her8/sP4QR021q7dwG5U/rzQkmNUQ7G')
	                RETURNING id, username, email
	                
2025-04-19 07:34:05.003 UTC [610] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:34:05.003 UTC [610] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:34:05.004 UTC [610] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 07:34:05.014 UTC [610] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:34:05.016 UTC [610] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:34:05.019 UTC [610] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:34:05.024 UTC [610] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:34:05.024 UTC [610] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:34:05.028 UTC [610] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:34:05.031 UTC [610] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:34:05.032 UTC [610] DEBUG:  building index "pg_toast_30008_index" on table "pg_toast_30008" serially
2025-04-19 07:34:05.034 UTC [610] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:34:05.034 UTC [610] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:34:05.034 UTC [610] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:34:05.035 UTC [610] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:34:05.035 UTC [610] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:34:05.036 UTC [610] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:34:05.036 UTC [610] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:34:05.036 UTC [610] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:34:05.037 UTC [610] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:34:05.037 UTC [610] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:34:05.039 UTC [610] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:34:05.039 UTC [610] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:34:05.039 UTC [610] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:34:05.040 UTC [610] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:34:05.040 UTC [610] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:34:05.040 UTC [610] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:34:05.041 UTC [610] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:34:05.042 UTC [610] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:34:05.042 UTC [610] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:34:05.042 UTC [610] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:34:05.043 UTC [610] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:34:05.044 UTC [610] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:34:05.044 UTC [610] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:34:05.045 UTC [610] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:34:05.046 UTC [610] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:34:05.046 UTC [610] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:34:05.047 UTC [610] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:34:05.048 UTC [610] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:34:05.049 UTC [610] DEBUG:  building index "pg_toast_30069_index" on table "pg_toast_30069" serially
2025-04-19 07:34:05.050 UTC [610] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:34:05.050 UTC [610] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:34:05.050 UTC [610] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:34:05.052 UTC [610] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:34:05.053 UTC [610] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:34:05.053 UTC [610] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:34:05.053 UTC [610] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:34:05.054 UTC [610] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:34:05.054 UTC [610] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:34:05.054 UTC [610] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:34:05.056 UTC [610] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:34:05.057 UTC [610] DEBUG:  building index "pg_toast_30102_index" on table "pg_toast_30102" serially
2025-04-19 07:34:05.059 UTC [610] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:34:05.059 UTC [610] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:34:05.059 UTC [610] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:34:05.061 UTC [610] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:34:05.064 UTC [610] DEBUG:  building index "pg_toast_30113_index" on table "pg_toast_30113" serially
2025-04-19 07:34:05.066 UTC [610] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:34:05.066 UTC [610] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:34:05.066 UTC [610] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:34:05.069 UTC [610] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:34:05.070 UTC [610] DEBUG:  building index "pg_toast_30136_index" on table "pg_toast_30136" serially
2025-04-19 07:34:05.071 UTC [610] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:34:05.072 UTC [610] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:34:05.072 UTC [610] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:34:05.073 UTC [610] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:34:05.073 UTC [610] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:34:05.075 UTC [610] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:34:05.075 UTC [610] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:34:05.076 UTC [610] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:34:05.076 UTC [610] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:34:05.077 UTC [610] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:34:05.077 UTC [610] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:34:05.078 UTC [610] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:34:05.078 UTC [610] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:34:05.079 UTC [610] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:34:05.079 UTC [610] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:34:05.080 UTC [610] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:34:05.080 UTC [610] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:34:05.081 UTC [610] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:34:05.081 UTC [610] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:34:05.082 UTC [610] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:34:05.082 UTC [610] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:34:05.083 UTC [610] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:34:05.083 UTC [610] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:34:05.084 UTC [610] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:34:05.084 UTC [610] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:34:05.093 UTC [610] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:34:05.358 UTC [610] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$sVQxaN5Ej5nEQR2RV7bnseLqVA8EZJr3F8AKS0asVwDAzvcBRZyTa')
	                RETURNING id, username, email
	                
2025-04-19 07:34:05.359 UTC [610] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:34:05.360 UTC [610] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:34:17.502 UTC [610] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 07:34:17.818 UTC [610] DEBUG:  unexpected EOF on client connection
2025-04-19 07:34:19.672 UTC [625] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:34:19.679 UTC [625] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:34:19.685 UTC [625] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:34:19.685 UTC [625] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:34:19.690 UTC [625] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:34:19.696 UTC [625] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:34:19.700 UTC [625] DEBUG:  building index "pg_toast_30172_index" on table "pg_toast_30172" serially
2025-04-19 07:34:19.701 UTC [625] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:34:19.702 UTC [625] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:34:19.702 UTC [625] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:34:19.703 UTC [625] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:34:19.703 UTC [625] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:34:19.703 UTC [625] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:34:19.704 UTC [625] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:34:19.704 UTC [625] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:34:19.704 UTC [625] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:34:19.705 UTC [625] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:34:19.706 UTC [625] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:34:19.706 UTC [625] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:34:19.706 UTC [625] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:34:19.707 UTC [625] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:34:19.707 UTC [625] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:34:19.707 UTC [625] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:34:19.708 UTC [625] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:34:19.709 UTC [625] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:34:19.710 UTC [625] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:34:19.710 UTC [625] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:34:19.710 UTC [625] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:34:19.710 UTC [625] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:34:19.710 UTC [625] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:34:19.712 UTC [625] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:34:19.713 UTC [625] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:34:19.713 UTC [625] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:34:19.713 UTC [625] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:34:19.715 UTC [625] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:34:19.716 UTC [625] DEBUG:  building index "pg_toast_30233_index" on table "pg_toast_30233" serially
2025-04-19 07:34:19.717 UTC [625] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:34:19.717 UTC [625] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:34:19.717 UTC [625] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:34:19.718 UTC [625] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:34:19.719 UTC [625] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:34:19.719 UTC [625] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:34:19.719 UTC [625] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:34:19.720 UTC [625] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:34:19.720 UTC [625] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:34:19.720 UTC [625] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:34:19.722 UTC [625] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:34:19.724 UTC [625] DEBUG:  building index "pg_toast_30266_index" on table "pg_toast_30266" serially
2025-04-19 07:34:19.725 UTC [625] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:34:19.726 UTC [625] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:34:19.726 UTC [625] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:34:19.727 UTC [625] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:34:19.728 UTC [625] DEBUG:  building index "pg_toast_30277_index" on table "pg_toast_30277" serially
2025-04-19 07:34:19.729 UTC [625] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:34:19.729 UTC [625] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:34:19.729 UTC [625] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:34:19.731 UTC [625] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:34:19.732 UTC [625] DEBUG:  building index "pg_toast_30300_index" on table "pg_toast_30300" serially
2025-04-19 07:34:19.733 UTC [625] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:34:19.733 UTC [625] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:34:19.733 UTC [625] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:34:19.734 UTC [625] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:34:19.734 UTC [625] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:34:19.735 UTC [625] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:34:19.735 UTC [625] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:34:19.736 UTC [625] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:34:19.736 UTC [625] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:34:19.737 UTC [625] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:34:19.737 UTC [625] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:34:19.738 UTC [625] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:34:19.738 UTC [625] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:34:19.739 UTC [625] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:34:19.739 UTC [625] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:34:19.740 UTC [625] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:34:19.740 UTC [625] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:34:19.740 UTC [625] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:34:19.740 UTC [625] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:34:19.741 UTC [625] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:34:19.741 UTC [625] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:34:19.742 UTC [625] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:34:19.742 UTC [625] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:34:19.743 UTC [625] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:34:19.743 UTC [625] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:34:19.755 UTC [625] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:34:20.020 UTC [625] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$375pf3MnRsybjdwifM7vL.OZuN4x4IxJ9ke6JMjbUREyp1lBPg3Zy')
	                RETURNING id, username, email
	                
2025-04-19 07:34:20.021 UTC [625] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:34:20.022 UTC [625] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:34:20.023 UTC [625] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 07:34:20.038 UTC [625] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:34:20.039 UTC [625] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:34:20.044 UTC [625] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:34:20.049 UTC [625] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:34:20.049 UTC [625] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:34:20.053 UTC [625] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:34:20.056 UTC [625] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:34:20.057 UTC [625] DEBUG:  building index "pg_toast_30336_index" on table "pg_toast_30336" serially
2025-04-19 07:34:20.058 UTC [625] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:34:20.058 UTC [625] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:34:20.058 UTC [625] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:34:20.059 UTC [625] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:34:20.059 UTC [625] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:34:20.059 UTC [625] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:34:20.060 UTC [625] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:34:20.060 UTC [625] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:34:20.060 UTC [625] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:34:20.061 UTC [625] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:34:20.062 UTC [625] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:34:20.062 UTC [625] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:34:20.062 UTC [625] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:34:20.063 UTC [625] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:34:20.063 UTC [625] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:34:20.063 UTC [625] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:34:20.064 UTC [625] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:34:20.065 UTC [625] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:34:20.065 UTC [625] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:34:20.065 UTC [625] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:34:20.066 UTC [625] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:34:20.066 UTC [625] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:34:20.066 UTC [625] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:34:20.067 UTC [625] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:34:20.068 UTC [625] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:34:20.068 UTC [625] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:34:20.068 UTC [625] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:34:20.069 UTC [625] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:34:20.070 UTC [625] DEBUG:  building index "pg_toast_30397_index" on table "pg_toast_30397" serially
2025-04-19 07:34:20.071 UTC [625] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:34:20.071 UTC [625] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:34:20.071 UTC [625] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:34:20.072 UTC [625] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:34:20.074 UTC [625] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:34:20.074 UTC [625] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:34:20.074 UTC [625] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:34:20.075 UTC [625] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:34:20.075 UTC [625] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:34:20.075 UTC [625] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:34:20.076 UTC [625] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:34:20.078 UTC [625] DEBUG:  building index "pg_toast_30430_index" on table "pg_toast_30430" serially
2025-04-19 07:34:20.079 UTC [625] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:34:20.079 UTC [625] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:34:20.079 UTC [625] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:34:20.080 UTC [625] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:34:20.081 UTC [625] DEBUG:  building index "pg_toast_30441_index" on table "pg_toast_30441" serially
2025-04-19 07:34:20.082 UTC [625] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:34:20.082 UTC [625] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:34:20.083 UTC [625] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:34:20.084 UTC [625] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:34:20.085 UTC [625] DEBUG:  building index "pg_toast_30464_index" on table "pg_toast_30464" serially
2025-04-19 07:34:20.086 UTC [625] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:34:20.086 UTC [625] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:34:20.086 UTC [625] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:34:20.087 UTC [625] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:34:20.087 UTC [625] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:34:20.088 UTC [625] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:34:20.088 UTC [625] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:34:20.089 UTC [625] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:34:20.089 UTC [625] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:34:20.090 UTC [625] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:34:20.090 UTC [625] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:34:20.091 UTC [625] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:34:20.091 UTC [625] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:34:20.092 UTC [625] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:34:20.092 UTC [625] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:34:20.093 UTC [625] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:34:20.093 UTC [625] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:34:20.094 UTC [625] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:34:20.094 UTC [625] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:34:20.094 UTC [625] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:34:20.094 UTC [625] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:34:20.096 UTC [625] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:34:20.096 UTC [625] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:34:20.096 UTC [625] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:34:20.096 UTC [625] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:34:20.105 UTC [625] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:34:20.349 UTC [626] DEBUG:  autovacuum: processing database "postgres"
2025-04-19 07:34:20.354 UTC [625] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$FAMHUNDMomh/yaSieLsMM.d/pnjo6PMuPXZ5tuAFzciHB3SUgxXWa')
	                RETURNING id, username, email
	                
2025-04-19 07:34:20.356 UTC [625] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:34:20.357 UTC [625] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:34:33.413 UTC [625] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 07:34:33.702 UTC [625] DEBUG:  unexpected EOF on client connection
2025-04-19 07:34:35.327 UTC [634] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:34:35.335 UTC [634] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:34:35.340 UTC [634] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:34:35.340 UTC [634] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:34:35.344 UTC [634] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:34:35.348 UTC [634] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:34:35.354 UTC [634] DEBUG:  building index "pg_toast_30500_index" on table "pg_toast_30500" serially
2025-04-19 07:34:35.356 UTC [634] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:34:35.356 UTC [634] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:34:35.356 UTC [634] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:34:35.357 UTC [634] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:34:35.358 UTC [634] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:34:35.358 UTC [634] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:34:35.358 UTC [634] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:34:35.359 UTC [634] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:34:35.359 UTC [634] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:34:35.359 UTC [634] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:34:35.360 UTC [634] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:34:35.360 UTC [634] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:34:35.360 UTC [634] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:34:35.361 UTC [634] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:34:35.361 UTC [634] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:34:35.361 UTC [634] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:34:35.362 UTC [634] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:34:35.363 UTC [634] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:34:35.363 UTC [634] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:34:35.363 UTC [634] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:34:35.364 UTC [634] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:34:35.364 UTC [634] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:34:35.364 UTC [634] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:34:35.366 UTC [634] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:34:35.367 UTC [634] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:34:35.367 UTC [634] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:34:35.367 UTC [634] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:34:35.368 UTC [634] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:34:35.370 UTC [634] DEBUG:  building index "pg_toast_30561_index" on table "pg_toast_30561" serially
2025-04-19 07:34:35.371 UTC [634] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:34:35.371 UTC [634] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:34:35.371 UTC [634] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:34:35.373 UTC [634] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:34:35.374 UTC [634] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:34:35.375 UTC [634] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:34:35.375 UTC [634] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:34:35.376 UTC [634] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:34:35.376 UTC [634] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:34:35.376 UTC [634] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:34:35.378 UTC [634] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:34:35.379 UTC [634] DEBUG:  building index "pg_toast_30594_index" on table "pg_toast_30594" serially
2025-04-19 07:34:35.380 UTC [634] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:34:35.380 UTC [634] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:34:35.380 UTC [634] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:34:35.381 UTC [634] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:34:35.383 UTC [634] DEBUG:  building index "pg_toast_30605_index" on table "pg_toast_30605" serially
2025-04-19 07:34:35.384 UTC [634] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:34:35.384 UTC [634] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:34:35.384 UTC [634] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:34:35.385 UTC [634] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:34:35.386 UTC [634] DEBUG:  building index "pg_toast_30628_index" on table "pg_toast_30628" serially
2025-04-19 07:34:35.387 UTC [634] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:34:35.387 UTC [634] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:34:35.387 UTC [634] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:34:35.388 UTC [634] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:34:35.388 UTC [634] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:34:35.389 UTC [634] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:34:35.389 UTC [634] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:34:35.390 UTC [634] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:34:35.390 UTC [634] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:34:35.391 UTC [634] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:34:35.391 UTC [634] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:34:35.391 UTC [634] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:34:35.391 UTC [634] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:34:35.392 UTC [634] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:34:35.392 UTC [634] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:34:35.393 UTC [634] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:34:35.393 UTC [634] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:34:35.394 UTC [634] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:34:35.394 UTC [634] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:34:35.395 UTC [634] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:34:35.395 UTC [634] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:34:35.395 UTC [634] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:34:35.395 UTC [634] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:34:35.397 UTC [634] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:34:35.397 UTC [634] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:34:35.407 UTC [634] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:34:35.673 UTC [634] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$hh/ifiHHZ8j6KmRh8uNPOuTS5A/CMosIpL8tbzkW23qVHhd8UCx0u')
	                RETURNING id, username, email
	                
2025-04-19 07:34:35.674 UTC [634] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:34:35.675 UTC [634] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:34:35.676 UTC [634] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 07:34:35.687 UTC [634] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:34:35.688 UTC [634] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:34:35.691 UTC [634] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:34:35.695 UTC [634] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:34:35.695 UTC [634] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:34:35.699 UTC [634] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:34:35.703 UTC [634] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:34:35.705 UTC [634] DEBUG:  building index "pg_toast_30664_index" on table "pg_toast_30664" serially
2025-04-19 07:34:35.706 UTC [634] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:34:35.707 UTC [634] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:34:35.707 UTC [634] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:34:35.708 UTC [634] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:34:35.708 UTC [634] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:34:35.708 UTC [634] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:34:35.709 UTC [634] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:34:35.709 UTC [634] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:34:35.709 UTC [634] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:34:35.710 UTC [634] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:34:35.711 UTC [634] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:34:35.711 UTC [634] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:34:35.711 UTC [634] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:34:35.712 UTC [634] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:34:35.712 UTC [634] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:34:35.713 UTC [634] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:34:35.713 UTC [634] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:34:35.715 UTC [634] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:34:35.715 UTC [634] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:34:35.715 UTC [634] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:34:35.716 UTC [634] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:34:35.717 UTC [634] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:34:35.717 UTC [634] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:34:35.719 UTC [634] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:34:35.720 UTC [634] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:34:35.720 UTC [634] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:34:35.720 UTC [634] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:34:35.724 UTC [634] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:34:35.730 UTC [634] DEBUG:  building index "pg_toast_30725_index" on table "pg_toast_30725" serially
2025-04-19 07:34:35.732 UTC [634] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:34:35.732 UTC [634] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:34:35.732 UTC [634] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:34:35.736 UTC [634] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:34:35.740 UTC [634] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:34:35.741 UTC [634] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:34:35.741 UTC [634] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:34:35.747 UTC [634] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:34:35.748 UTC [634] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:34:35.748 UTC [634] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:34:35.752 UTC [634] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:34:35.754 UTC [634] DEBUG:  building index "pg_toast_30758_index" on table "pg_toast_30758" serially
2025-04-19 07:34:35.755 UTC [634] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:34:35.755 UTC [634] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:34:35.755 UTC [634] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:34:35.756 UTC [634] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:34:35.758 UTC [634] DEBUG:  building index "pg_toast_30769_index" on table "pg_toast_30769" serially
2025-04-19 07:34:35.759 UTC [634] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:34:35.759 UTC [634] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:34:35.759 UTC [634] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:34:35.761 UTC [634] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:34:35.762 UTC [634] DEBUG:  building index "pg_toast_30792_index" on table "pg_toast_30792" serially
2025-04-19 07:34:35.763 UTC [634] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:34:35.763 UTC [634] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:34:35.763 UTC [634] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:34:35.764 UTC [634] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:34:35.764 UTC [634] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:34:35.765 UTC [634] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:34:35.765 UTC [634] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:34:35.766 UTC [634] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:34:35.766 UTC [634] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:34:35.767 UTC [634] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:34:35.767 UTC [634] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:34:35.768 UTC [634] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:34:35.768 UTC [634] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:34:35.769 UTC [634] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:34:35.769 UTC [634] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:34:35.769 UTC [634] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:34:35.769 UTC [634] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:34:35.770 UTC [634] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:34:35.770 UTC [634] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:34:35.772 UTC [634] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:34:35.772 UTC [634] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:34:35.773 UTC [634] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:34:35.773 UTC [634] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:34:35.774 UTC [634] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:34:35.774 UTC [634] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:34:35.781 UTC [634] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:34:36.025 UTC [634] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$XyUc7nwHu/Wm18Dd.qlIde6eN4GNhkbkq7fGrwWFnIjYlpttbzY9i')
	                RETURNING id, username, email
	                
2025-04-19 07:34:36.026 UTC [634] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:34:36.026 UTC [634] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:34:49.220 UTC [634] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 07:34:49.504 UTC [634] DEBUG:  unexpected EOF on client connection
2025-04-19 07:34:50.380 UTC [649] DEBUG:  autovacuum: processing database "powerball"
2025-04-19 07:34:50.590 UTC [649] DEBUG:  rehashing catalog cache id 14 for pg_opclass; 17 tups, 8 buckets
2025-04-19 07:34:51.666 UTC [650] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:34:51.677 UTC [650] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:34:51.688 UTC [650] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:34:51.688 UTC [650] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:34:51.696 UTC [650] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:34:51.699 UTC [650] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:34:51.702 UTC [650] DEBUG:  building index "pg_toast_30829_index" on table "pg_toast_30829" serially
2025-04-19 07:34:51.704 UTC [650] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:34:51.704 UTC [650] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:34:51.704 UTC [650] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:34:51.705 UTC [650] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:34:51.706 UTC [650] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:34:51.706 UTC [650] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:34:51.706 UTC [650] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:34:51.707 UTC [650] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:34:51.707 UTC [650] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:34:51.707 UTC [650] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:34:51.708 UTC [650] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:34:51.709 UTC [650] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:34:51.709 UTC [650] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:34:51.709 UTC [650] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:34:51.710 UTC [650] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:34:51.710 UTC [650] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:34:51.710 UTC [650] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:34:51.712 UTC [650] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:34:51.712 UTC [650] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:34:51.712 UTC [650] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:34:51.713 UTC [650] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:34:51.713 UTC [650] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:34:51.713 UTC [650] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:34:51.715 UTC [650] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:34:51.717 UTC [650] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:34:51.717 UTC [650] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:34:51.718 UTC [650] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:34:51.720 UTC [650] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:34:51.723 UTC [650] DEBUG:  building index "pg_toast_30890_index" on table "pg_toast_30890" serially
2025-04-19 07:34:51.725 UTC [650] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:34:51.725 UTC [650] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:34:51.725 UTC [650] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:34:51.727 UTC [650] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:34:51.733 UTC [650] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:34:51.734 UTC [650] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:34:51.734 UTC [650] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:34:51.735 UTC [650] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:34:51.736 UTC [650] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:34:51.736 UTC [650] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:34:51.737 UTC [650] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:34:51.739 UTC [650] DEBUG:  building index "pg_toast_30923_index" on table "pg_toast_30923" serially
2025-04-19 07:34:51.740 UTC [650] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:34:51.740 UTC [650] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:34:51.740 UTC [650] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:34:51.741 UTC [650] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:34:51.742 UTC [650] DEBUG:  building index "pg_toast_30934_index" on table "pg_toast_30934" serially
2025-04-19 07:34:51.743 UTC [650] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:34:51.744 UTC [650] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:34:51.744 UTC [650] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:34:51.746 UTC [650] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:34:51.747 UTC [650] DEBUG:  building index "pg_toast_30957_index" on table "pg_toast_30957" serially
2025-04-19 07:34:51.748 UTC [650] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:34:51.748 UTC [650] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:34:51.748 UTC [650] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:34:51.749 UTC [650] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:34:51.749 UTC [650] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:34:51.751 UTC [650] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:34:51.751 UTC [650] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:34:51.752 UTC [650] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:34:51.752 UTC [650] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:34:51.754 UTC [650] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:34:51.754 UTC [650] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:34:51.755 UTC [650] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:34:51.755 UTC [650] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:34:51.756 UTC [650] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:34:51.756 UTC [650] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:34:51.758 UTC [650] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:34:51.758 UTC [650] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:34:51.759 UTC [650] DEBUG:  rehashing catalog cache id 32 for pg_index; 129 tups, 64 buckets
2025-04-19 07:34:51.759 UTC [650] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:34:51.759 UTC [650] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:34:51.760 UTC [650] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:34:51.760 UTC [650] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:34:51.762 UTC [650] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:34:51.762 UTC [650] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:34:51.763 UTC [650] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:34:51.763 UTC [650] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:34:51.775 UTC [650] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:34:52.045 UTC [650] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$qy3AFWXBFpg0KJEP6tpF5e2qAJSCDCH3DiodtYbV2ZI0elxptAOkK')
	                RETURNING id, username, email
	                
2025-04-19 07:34:52.046 UTC [650] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:34:52.047 UTC [650] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:34:52.047 UTC [650] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 07:34:52.050 UTC [650] DEBUG:  rehashing catalog cache id 7 for pg_attribute; 257 tups, 128 buckets
2025-04-19 07:34:52.050 UTC [650] CONTEXT:  SQL expression "NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        )"
	PL/pgSQL function inline_code_block line 3 at IF
2025-04-19 07:34:52.073 UTC [650] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:34:52.075 UTC [650] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:34:52.077 UTC [650] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:34:52.086 UTC [650] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:34:52.086 UTC [650] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:34:52.090 UTC [650] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:34:52.093 UTC [650] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:34:52.094 UTC [650] DEBUG:  building index "pg_toast_30993_index" on table "pg_toast_30993" serially
2025-04-19 07:34:52.095 UTC [650] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:34:52.096 UTC [650] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:34:52.096 UTC [650] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:34:52.096 UTC [650] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:34:52.097 UTC [650] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:34:52.097 UTC [650] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:34:52.097 UTC [650] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:34:52.097 UTC [650] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:34:52.098 UTC [650] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:34:52.098 UTC [650] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:34:52.099 UTC [650] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:34:52.099 UTC [650] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:34:52.099 UTC [650] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:34:52.100 UTC [650] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:34:52.100 UTC [650] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:34:52.100 UTC [650] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:34:52.101 UTC [650] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:34:52.102 UTC [650] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:34:52.103 UTC [650] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:34:52.103 UTC [650] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:34:52.103 UTC [650] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:34:52.104 UTC [650] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:34:52.104 UTC [650] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:34:52.105 UTC [650] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:34:52.106 UTC [650] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:34:52.106 UTC [650] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:34:52.106 UTC [650] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:34:52.107 UTC [650] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:34:52.108 UTC [650] DEBUG:  building index "pg_toast_31054_index" on table "pg_toast_31054" serially
2025-04-19 07:34:52.109 UTC [650] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:34:52.110 UTC [650] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:34:52.110 UTC [650] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:34:52.111 UTC [650] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:34:52.112 UTC [650] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:34:52.112 UTC [650] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:34:52.112 UTC [650] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:34:52.113 UTC [650] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:34:52.113 UTC [650] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:34:52.113 UTC [650] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:34:52.114 UTC [650] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:34:52.116 UTC [650] DEBUG:  building index "pg_toast_31087_index" on table "pg_toast_31087" serially
2025-04-19 07:34:52.116 UTC [650] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:34:52.116 UTC [650] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:34:52.116 UTC [650] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:34:52.117 UTC [650] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:34:52.119 UTC [650] DEBUG:  building index "pg_toast_31098_index" on table "pg_toast_31098" serially
2025-04-19 07:34:52.119 UTC [650] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:34:52.120 UTC [650] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:34:52.120 UTC [650] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:34:52.121 UTC [650] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:34:52.122 UTC [650] DEBUG:  building index "pg_toast_31121_index" on table "pg_toast_31121" serially
2025-04-19 07:34:52.123 UTC [650] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:34:52.123 UTC [650] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:34:52.123 UTC [650] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:34:52.124 UTC [650] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:34:52.124 UTC [650] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:34:52.125 UTC [650] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:34:52.125 UTC [650] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:34:52.125 UTC [650] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:34:52.125 UTC [650] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:34:52.126 UTC [650] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:34:52.126 UTC [650] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:34:52.127 UTC [650] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:34:52.127 UTC [650] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:34:52.128 UTC [650] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:34:52.128 UTC [650] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:34:52.129 UTC [650] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:34:52.129 UTC [650] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:34:52.129 UTC [650] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:34:52.129 UTC [650] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:34:52.130 UTC [650] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:34:52.130 UTC [650] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:34:52.131 UTC [650] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:34:52.131 UTC [650] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:34:52.132 UTC [650] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:34:52.132 UTC [650] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:34:52.139 UTC [650] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:34:52.386 UTC [650] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$LVCq.4839H2SXlk.IHGKxuqMqUx/NO/dBVnhITeFDUpFpbFmHstVu')
	                RETURNING id, username, email
	                
2025-04-19 07:34:52.387 UTC [650] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:34:52.388 UTC [650] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:35:05.578 UTC [650] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 07:35:05.866 UTC [650] DEBUG:  unexpected EOF on client connection
2025-04-19 07:35:07.807 UTC [658] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:35:07.814 UTC [658] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:35:07.822 UTC [658] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:35:07.822 UTC [658] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:35:07.828 UTC [658] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:35:07.833 UTC [658] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:35:07.841 UTC [658] DEBUG:  building index "pg_toast_31157_index" on table "pg_toast_31157" serially
2025-04-19 07:35:07.844 UTC [658] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:35:07.845 UTC [658] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:35:07.845 UTC [658] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:35:07.847 UTC [658] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:35:07.847 UTC [658] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:35:07.847 UTC [658] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:35:07.849 UTC [658] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:35:07.849 UTC [658] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:35:07.850 UTC [658] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:35:07.851 UTC [658] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:35:07.852 UTC [658] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:35:07.852 UTC [658] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:35:07.852 UTC [658] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:35:07.853 UTC [658] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:35:07.853 UTC [658] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:35:07.853 UTC [658] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:35:07.854 UTC [658] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:35:07.855 UTC [658] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:35:07.856 UTC [658] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:35:07.856 UTC [658] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:35:07.857 UTC [658] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:35:07.857 UTC [658] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:35:07.857 UTC [658] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:35:07.859 UTC [658] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:35:07.860 UTC [658] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:35:07.860 UTC [658] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:35:07.860 UTC [658] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:35:07.861 UTC [658] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:35:07.863 UTC [658] DEBUG:  building index "pg_toast_31218_index" on table "pg_toast_31218" serially
2025-04-19 07:35:07.864 UTC [658] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:35:07.864 UTC [658] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:35:07.864 UTC [658] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:35:07.865 UTC [658] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:35:07.867 UTC [658] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:35:07.867 UTC [658] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:35:07.867 UTC [658] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:35:07.867 UTC [658] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:35:07.868 UTC [658] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:35:07.868 UTC [658] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:35:07.869 UTC [658] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:35:07.870 UTC [658] DEBUG:  building index "pg_toast_31251_index" on table "pg_toast_31251" serially
2025-04-19 07:35:07.871 UTC [658] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:35:07.871 UTC [658] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:35:07.871 UTC [658] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:35:07.872 UTC [658] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:35:07.873 UTC [658] DEBUG:  building index "pg_toast_31262_index" on table "pg_toast_31262" serially
2025-04-19 07:35:07.874 UTC [658] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:35:07.874 UTC [658] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:35:07.874 UTC [658] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:35:07.875 UTC [658] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:35:07.876 UTC [658] DEBUG:  building index "pg_toast_31285_index" on table "pg_toast_31285" serially
2025-04-19 07:35:07.877 UTC [658] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:35:07.877 UTC [658] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:35:07.877 UTC [658] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:35:07.879 UTC [658] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:35:07.879 UTC [658] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:35:07.881 UTC [658] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:35:07.881 UTC [658] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:35:07.883 UTC [658] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:35:07.883 UTC [658] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:35:07.884 UTC [658] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:35:07.884 UTC [658] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:35:07.885 UTC [658] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:35:07.885 UTC [658] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:35:07.886 UTC [658] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:35:07.886 UTC [658] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:35:07.887 UTC [658] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:35:07.887 UTC [658] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:35:07.888 UTC [658] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:35:07.888 UTC [658] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:35:07.889 UTC [658] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:35:07.889 UTC [658] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:35:07.890 UTC [658] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:35:07.890 UTC [658] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:35:07.891 UTC [658] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:35:07.891 UTC [658] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:35:07.902 UTC [658] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:35:08.197 UTC [658] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$w71TOUpgqY2qpM0tMZNOi.PiiVjtvFeaZ2Aso3.CcJAQmyQQPkoC.')
	                RETURNING id, username, email
	                
2025-04-19 07:35:08.199 UTC [658] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:35:08.199 UTC [658] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:35:08.200 UTC [658] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 07:35:08.210 UTC [658] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:35:08.212 UTC [658] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:35:08.217 UTC [658] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:35:08.223 UTC [658] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:35:08.223 UTC [658] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:35:08.227 UTC [658] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:35:08.231 UTC [658] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:35:08.232 UTC [658] DEBUG:  building index "pg_toast_31321_index" on table "pg_toast_31321" serially
2025-04-19 07:35:08.233 UTC [658] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:35:08.233 UTC [658] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:35:08.233 UTC [658] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:35:08.234 UTC [658] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:35:08.234 UTC [658] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:35:08.234 UTC [658] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:35:08.235 UTC [658] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:35:08.235 UTC [658] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:35:08.235 UTC [658] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:35:08.236 UTC [658] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:35:08.237 UTC [658] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:35:08.237 UTC [658] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:35:08.237 UTC [658] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:35:08.238 UTC [658] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:35:08.238 UTC [658] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:35:08.238 UTC [658] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:35:08.239 UTC [658] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:35:08.239 UTC [658] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:35:08.239 UTC [658] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:35:08.239 UTC [658] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:35:08.240 UTC [658] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:35:08.240 UTC [658] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:35:08.240 UTC [658] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:35:08.242 UTC [658] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:35:08.242 UTC [658] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:35:08.243 UTC [658] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:35:08.243 UTC [658] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:35:08.244 UTC [658] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:35:08.245 UTC [658] DEBUG:  building index "pg_toast_31382_index" on table "pg_toast_31382" serially
2025-04-19 07:35:08.246 UTC [658] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:35:08.246 UTC [658] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:35:08.246 UTC [658] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:35:08.247 UTC [658] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:35:08.248 UTC [658] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:35:08.248 UTC [658] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:35:08.248 UTC [658] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:35:08.249 UTC [658] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:35:08.249 UTC [658] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:35:08.249 UTC [658] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:35:08.250 UTC [658] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:35:08.251 UTC [658] DEBUG:  building index "pg_toast_31415_index" on table "pg_toast_31415" serially
2025-04-19 07:35:08.251 UTC [658] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:35:08.252 UTC [658] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:35:08.252 UTC [658] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:35:08.252 UTC [658] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:35:08.254 UTC [658] DEBUG:  building index "pg_toast_31426_index" on table "pg_toast_31426" serially
2025-04-19 07:35:08.254 UTC [658] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:35:08.255 UTC [658] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:35:08.255 UTC [658] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:35:08.256 UTC [658] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:35:08.256 UTC [658] DEBUG:  building index "pg_toast_31449_index" on table "pg_toast_31449" serially
2025-04-19 07:35:08.257 UTC [658] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:35:08.257 UTC [658] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:35:08.257 UTC [658] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:35:08.258 UTC [658] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:35:08.258 UTC [658] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:35:08.259 UTC [658] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:35:08.259 UTC [658] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:35:08.260 UTC [658] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:35:08.260 UTC [658] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:35:08.261 UTC [658] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:35:08.261 UTC [658] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:35:08.261 UTC [658] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:35:08.261 UTC [658] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:35:08.262 UTC [658] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:35:08.262 UTC [658] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:35:08.263 UTC [658] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:35:08.263 UTC [658] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:35:08.264 UTC [658] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:35:08.264 UTC [658] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:35:08.264 UTC [658] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:35:08.265 UTC [658] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:35:08.265 UTC [658] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:35:08.265 UTC [658] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:35:08.266 UTC [658] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:35:08.266 UTC [658] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:35:08.274 UTC [658] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:35:08.527 UTC [658] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$CKztwRUAZLv57nHzINiG3.RKqBvM9YHilvieFAZ8u83vy9f0MczvW')
	                RETURNING id, username, email
	                
2025-04-19 07:35:08.529 UTC [658] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:35:08.530 UTC [658] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:35:20.384 UTC [673] DEBUG:  autovacuum: processing database "postgres"
2025-04-19 07:35:21.455 UTC [658] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 07:35:21.734 UTC [658] DEBUG:  unexpected EOF on client connection
2025-04-19 07:35:26.180 UTC [674] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:35:26.188 UTC [674] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:35:26.199 UTC [674] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:35:26.199 UTC [674] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:35:26.208 UTC [674] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:35:26.215 UTC [674] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:35:26.219 UTC [674] DEBUG:  building index "pg_toast_31485_index" on table "pg_toast_31485" serially
2025-04-19 07:35:26.221 UTC [674] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:35:26.222 UTC [674] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:35:26.222 UTC [674] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:35:26.223 UTC [674] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:35:26.224 UTC [674] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:35:26.224 UTC [674] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:35:26.226 UTC [674] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:35:26.228 UTC [674] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:35:26.228 UTC [674] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:35:26.234 UTC [674] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:35:26.241 UTC [674] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:35:26.242 UTC [674] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:35:26.242 UTC [674] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:35:26.245 UTC [674] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:35:26.245 UTC [674] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:35:26.245 UTC [674] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:35:26.248 UTC [674] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:35:26.252 UTC [674] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:35:26.253 UTC [674] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:35:26.253 UTC [674] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:35:26.265 UTC [674] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:35:26.267 UTC [674] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:35:26.267 UTC [674] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:35:26.271 UTC [674] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:35:26.273 UTC [674] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:35:26.273 UTC [674] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:35:26.273 UTC [674] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:35:26.275 UTC [674] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:35:26.279 UTC [674] DEBUG:  building index "pg_toast_31546_index" on table "pg_toast_31546" serially
2025-04-19 07:35:26.280 UTC [674] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:35:26.280 UTC [674] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:35:26.280 UTC [674] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:35:26.282 UTC [674] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:35:26.283 UTC [674] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:35:26.283 UTC [674] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:35:26.283 UTC [674] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:35:26.284 UTC [674] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:35:26.285 UTC [674] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:35:26.285 UTC [674] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:35:26.286 UTC [674] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:35:26.287 UTC [674] DEBUG:  building index "pg_toast_31579_index" on table "pg_toast_31579" serially
2025-04-19 07:35:26.288 UTC [674] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:35:26.288 UTC [674] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:35:26.288 UTC [674] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:35:26.289 UTC [674] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:35:26.291 UTC [674] DEBUG:  building index "pg_toast_31590_index" on table "pg_toast_31590" serially
2025-04-19 07:35:26.292 UTC [674] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:35:26.292 UTC [674] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:35:26.293 UTC [674] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:35:26.295 UTC [674] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:35:26.296 UTC [674] DEBUG:  building index "pg_toast_31613_index" on table "pg_toast_31613" serially
2025-04-19 07:35:26.297 UTC [674] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:35:26.297 UTC [674] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:35:26.297 UTC [674] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:35:26.298 UTC [674] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:35:26.298 UTC [674] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:35:26.299 UTC [674] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:35:26.299 UTC [674] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:35:26.301 UTC [674] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:35:26.301 UTC [674] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:35:26.302 UTC [674] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:35:26.302 UTC [674] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:35:26.303 UTC [674] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:35:26.303 UTC [674] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:35:26.304 UTC [674] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:35:26.304 UTC [674] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:35:26.305 UTC [674] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:35:26.305 UTC [674] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:35:26.306 UTC [674] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:35:26.306 UTC [674] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:35:26.307 UTC [674] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:35:26.307 UTC [674] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:35:26.308 UTC [674] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:35:26.308 UTC [674] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:35:26.309 UTC [674] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:35:26.309 UTC [674] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:35:26.328 UTC [674] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:35:26.603 UTC [674] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$8c8xHRXylpnJh3p2FOe/DOB3c4cP5juFMJfR3PrpyBjmfxvmIIXBC')
	                RETURNING id, username, email
	                
2025-04-19 07:35:26.603 UTC [674] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:35:26.604 UTC [674] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:35:26.605 UTC [674] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 07:35:26.631 UTC [674] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:35:26.639 UTC [674] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:35:26.644 UTC [674] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:35:26.655 UTC [674] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:35:26.655 UTC [674] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:35:26.668 UTC [674] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:35:26.684 UTC [674] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:35:26.687 UTC [674] DEBUG:  building index "pg_toast_31649_index" on table "pg_toast_31649" serially
2025-04-19 07:35:26.690 UTC [674] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:35:26.692 UTC [674] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:35:26.692 UTC [674] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:35:26.696 UTC [674] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:35:26.696 UTC [674] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:35:26.696 UTC [674] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:35:26.698 UTC [674] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:35:26.699 UTC [674] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:35:26.699 UTC [674] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:35:26.701 UTC [674] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:35:26.704 UTC [674] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:35:26.705 UTC [674] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:35:26.705 UTC [674] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:35:26.706 UTC [674] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:35:26.706 UTC [674] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:35:26.706 UTC [674] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:35:26.707 UTC [674] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:35:26.709 UTC [674] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:35:26.709 UTC [674] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:35:26.709 UTC [674] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:35:26.710 UTC [674] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:35:26.711 UTC [674] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:35:26.711 UTC [674] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:35:26.712 UTC [674] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:35:26.713 UTC [674] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:35:26.713 UTC [674] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:35:26.713 UTC [674] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:35:26.716 UTC [674] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:35:26.718 UTC [674] DEBUG:  building index "pg_toast_31710_index" on table "pg_toast_31710" serially
2025-04-19 07:35:26.720 UTC [674] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:35:26.720 UTC [674] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:35:26.720 UTC [674] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:35:26.724 UTC [674] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:35:26.726 UTC [674] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:35:26.726 UTC [674] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:35:26.726 UTC [674] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:35:26.727 UTC [674] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:35:26.728 UTC [674] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:35:26.728 UTC [674] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:35:26.730 UTC [674] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:35:26.732 UTC [674] DEBUG:  building index "pg_toast_31743_index" on table "pg_toast_31743" serially
2025-04-19 07:35:26.733 UTC [674] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:35:26.733 UTC [674] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:35:26.733 UTC [674] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:35:26.736 UTC [674] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:35:26.739 UTC [674] DEBUG:  building index "pg_toast_31754_index" on table "pg_toast_31754" serially
2025-04-19 07:35:26.740 UTC [674] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:35:26.740 UTC [674] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:35:26.740 UTC [674] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:35:26.743 UTC [674] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:35:26.744 UTC [674] DEBUG:  building index "pg_toast_31777_index" on table "pg_toast_31777" serially
2025-04-19 07:35:26.745 UTC [674] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:35:26.745 UTC [674] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:35:26.745 UTC [674] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:35:26.746 UTC [674] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:35:26.746 UTC [674] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:35:26.747 UTC [674] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:35:26.747 UTC [674] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:35:26.749 UTC [674] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:35:26.749 UTC [674] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:35:26.750 UTC [674] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:35:26.750 UTC [674] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:35:26.752 UTC [674] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:35:26.752 UTC [674] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:35:26.753 UTC [674] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:35:26.754 UTC [674] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:35:26.756 UTC [674] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:35:26.756 UTC [674] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:35:26.757 UTC [674] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:35:26.757 UTC [674] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:35:26.759 UTC [674] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:35:26.759 UTC [674] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:35:26.761 UTC [674] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:35:26.761 UTC [674] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:35:26.764 UTC [674] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:35:26.764 UTC [674] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:35:26.788 UTC [674] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:35:27.091 UTC [674] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$ExjenCa5i3LdwMYqqmLOeuIraYy9i5yyvpER4uHfaNfi6MrFTXcGC')
	                RETURNING id, username, email
	                
2025-04-19 07:35:27.095 UTC [674] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:35:27.100 UTC [674] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:35:37.373 UTC [674] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 07:35:37.681 UTC [674] DEBUG:  unexpected EOF on client connection
2025-04-19 07:35:39.962 UTC [689] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:35:39.974 UTC [689] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:35:39.981 UTC [689] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:35:39.981 UTC [689] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:35:39.984 UTC [689] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:35:39.989 UTC [689] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:35:39.991 UTC [689] DEBUG:  building index "pg_toast_31813_index" on table "pg_toast_31813" serially
2025-04-19 07:35:39.993 UTC [689] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:35:39.993 UTC [689] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:35:39.993 UTC [689] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:35:39.994 UTC [689] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:35:39.994 UTC [689] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:35:39.995 UTC [689] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:35:39.995 UTC [689] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:35:39.996 UTC [689] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:35:39.996 UTC [689] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:35:39.997 UTC [689] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:35:39.998 UTC [689] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:35:39.998 UTC [689] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:35:39.998 UTC [689] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:35:39.999 UTC [689] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:35:39.999 UTC [689] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:35:39.999 UTC [689] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:35:40.000 UTC [689] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:35:40.004 UTC [689] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:35:40.005 UTC [689] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:35:40.005 UTC [689] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:35:40.006 UTC [689] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:35:40.006 UTC [689] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:35:40.006 UTC [689] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:35:40.008 UTC [689] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:35:40.009 UTC [689] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:35:40.010 UTC [689] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:35:40.010 UTC [689] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:35:40.011 UTC [689] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:35:40.014 UTC [689] DEBUG:  building index "pg_toast_31874_index" on table "pg_toast_31874" serially
2025-04-19 07:35:40.015 UTC [689] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:35:40.016 UTC [689] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:35:40.016 UTC [689] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:35:40.017 UTC [689] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:35:40.018 UTC [689] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:35:40.019 UTC [689] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:35:40.019 UTC [689] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:35:40.020 UTC [689] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:35:40.020 UTC [689] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:35:40.020 UTC [689] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:35:40.021 UTC [689] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:35:40.023 UTC [689] DEBUG:  building index "pg_toast_31907_index" on table "pg_toast_31907" serially
2025-04-19 07:35:40.024 UTC [689] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:35:40.025 UTC [689] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:35:40.025 UTC [689] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:35:40.025 UTC [689] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:35:40.027 UTC [689] DEBUG:  building index "pg_toast_31918_index" on table "pg_toast_31918" serially
2025-04-19 07:35:40.028 UTC [689] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:35:40.028 UTC [689] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:35:40.028 UTC [689] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:35:40.030 UTC [689] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:35:40.031 UTC [689] DEBUG:  building index "pg_toast_31941_index" on table "pg_toast_31941" serially
2025-04-19 07:35:40.032 UTC [689] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:35:40.032 UTC [689] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:35:40.032 UTC [689] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:35:40.033 UTC [689] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:35:40.033 UTC [689] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:35:40.034 UTC [689] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:35:40.034 UTC [689] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:35:40.035 UTC [689] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:35:40.035 UTC [689] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:35:40.036 UTC [689] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:35:40.036 UTC [689] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:35:40.037 UTC [689] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:35:40.037 UTC [689] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:35:40.038 UTC [689] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:35:40.038 UTC [689] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:35:40.038 UTC [689] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:35:40.038 UTC [689] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:35:40.039 UTC [689] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:35:40.039 UTC [689] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:35:40.040 UTC [689] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:35:40.040 UTC [689] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:35:40.041 UTC [689] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:35:40.041 UTC [689] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:35:40.042 UTC [689] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:35:40.042 UTC [689] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:35:40.060 UTC [689] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:35:40.335 UTC [689] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$TTQ.R8laqLiYBQB91twCvuDA6b3nN5JtrNa6JJJ67zrUOgDwQDRwG')
	                RETURNING id, username, email
	                
2025-04-19 07:35:40.336 UTC [689] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:35:40.336 UTC [689] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:35:40.337 UTC [689] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 07:35:40.347 UTC [689] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:35:40.348 UTC [689] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:35:40.351 UTC [689] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:35:40.355 UTC [689] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:35:40.355 UTC [689] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:35:40.358 UTC [689] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:35:40.361 UTC [689] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:35:40.362 UTC [689] DEBUG:  building index "pg_toast_31977_index" on table "pg_toast_31977" serially
2025-04-19 07:35:40.363 UTC [689] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:35:40.363 UTC [689] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:35:40.364 UTC [689] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:35:40.364 UTC [689] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:35:40.364 UTC [689] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:35:40.364 UTC [689] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:35:40.365 UTC [689] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:35:40.365 UTC [689] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:35:40.365 UTC [689] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:35:40.366 UTC [689] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:35:40.367 UTC [689] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:35:40.367 UTC [689] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:35:40.367 UTC [689] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:35:40.368 UTC [689] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:35:40.369 UTC [689] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:35:40.369 UTC [689] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:35:40.370 UTC [689] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:35:40.370 UTC [689] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:35:40.370 UTC [689] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:35:40.371 UTC [689] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:35:40.371 UTC [689] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:35:40.371 UTC [689] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:35:40.371 UTC [689] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:35:40.372 UTC [689] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:35:40.374 UTC [689] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:35:40.374 UTC [689] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:35:40.374 UTC [689] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:35:40.375 UTC [689] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:35:40.376 UTC [689] DEBUG:  building index "pg_toast_32038_index" on table "pg_toast_32038" serially
2025-04-19 07:35:40.377 UTC [689] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:35:40.377 UTC [689] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:35:40.377 UTC [689] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:35:40.379 UTC [689] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:35:40.380 UTC [689] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:35:40.380 UTC [689] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:35:40.380 UTC [689] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:35:40.381 UTC [689] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:35:40.382 UTC [689] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:35:40.382 UTC [689] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:35:40.383 UTC [689] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:35:40.384 UTC [689] DEBUG:  building index "pg_toast_32071_index" on table "pg_toast_32071" serially
2025-04-19 07:35:40.385 UTC [689] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:35:40.385 UTC [689] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:35:40.385 UTC [689] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:35:40.386 UTC [689] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:35:40.387 UTC [689] DEBUG:  building index "pg_toast_32082_index" on table "pg_toast_32082" serially
2025-04-19 07:35:40.388 UTC [689] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:35:40.388 UTC [689] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:35:40.388 UTC [689] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:35:40.390 UTC [689] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:35:40.391 UTC [689] DEBUG:  building index "pg_toast_32105_index" on table "pg_toast_32105" serially
2025-04-19 07:35:40.391 UTC [689] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:35:40.392 UTC [689] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:35:40.392 UTC [689] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:35:40.392 UTC [689] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:35:40.392 UTC [689] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:35:40.393 UTC [689] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:35:40.393 UTC [689] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:35:40.394 UTC [689] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:35:40.394 UTC [689] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:35:40.395 UTC [689] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:35:40.395 UTC [689] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:35:40.396 UTC [689] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:35:40.396 UTC [689] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:35:40.397 UTC [689] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:35:40.397 UTC [689] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:35:40.398 UTC [689] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:35:40.398 UTC [689] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:35:40.398 UTC [689] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:35:40.398 UTC [689] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:35:40.399 UTC [689] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:35:40.399 UTC [689] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:35:40.400 UTC [689] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:35:40.400 UTC [689] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:35:40.401 UTC [689] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:35:40.401 UTC [689] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:35:40.411 UTC [689] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:35:40.669 UTC [689] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$/Bq7d5226HwztCzKlkBLluNYgSZxNiPRMBL07BzPgXA7MZKxAOHny')
	                RETURNING id, username, email
	                
2025-04-19 07:35:40.670 UTC [689] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:35:40.670 UTC [689] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:35:50.389 UTC [696] DEBUG:  autovacuum: processing database "powerball"
2025-04-19 07:35:50.637 UTC [696] DEBUG:  rehashing catalog cache id 14 for pg_opclass; 17 tups, 8 buckets
2025-04-19 07:35:53.339 UTC [689] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 07:35:53.623 UTC [689] DEBUG:  unexpected EOF on client connection
2025-04-19 07:35:55.683 UTC [697] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:35:55.695 UTC [697] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:35:55.703 UTC [697] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:35:55.703 UTC [697] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:35:55.707 UTC [697] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:35:55.710 UTC [697] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:35:55.713 UTC [697] DEBUG:  building index "pg_toast_32142_index" on table "pg_toast_32142" serially
2025-04-19 07:35:55.714 UTC [697] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:35:55.715 UTC [697] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:35:55.715 UTC [697] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:35:55.716 UTC [697] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:35:55.717 UTC [697] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:35:55.717 UTC [697] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:35:55.717 UTC [697] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:35:55.717 UTC [697] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:35:55.717 UTC [697] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:35:55.718 UTC [697] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:35:55.719 UTC [697] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:35:55.719 UTC [697] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:35:55.720 UTC [697] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:35:55.720 UTC [697] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:35:55.721 UTC [697] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:35:55.721 UTC [697] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:35:55.721 UTC [697] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:35:55.723 UTC [697] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:35:55.723 UTC [697] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:35:55.723 UTC [697] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:35:55.723 UTC [697] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:35:55.724 UTC [697] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:35:55.724 UTC [697] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:35:55.726 UTC [697] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:35:55.726 UTC [697] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:35:55.727 UTC [697] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:35:55.727 UTC [697] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:35:55.728 UTC [697] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:35:55.731 UTC [697] DEBUG:  building index "pg_toast_32203_index" on table "pg_toast_32203" serially
2025-04-19 07:35:55.732 UTC [697] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:35:55.732 UTC [697] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:35:55.732 UTC [697] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:35:55.733 UTC [697] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:35:55.734 UTC [697] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:35:55.735 UTC [697] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:35:55.735 UTC [697] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:35:55.736 UTC [697] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:35:55.737 UTC [697] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:35:55.737 UTC [697] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:35:55.739 UTC [697] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:35:55.740 UTC [697] DEBUG:  building index "pg_toast_32236_index" on table "pg_toast_32236" serially
2025-04-19 07:35:55.742 UTC [697] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:35:55.742 UTC [697] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:35:55.742 UTC [697] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:35:55.743 UTC [697] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:35:55.745 UTC [697] DEBUG:  building index "pg_toast_32247_index" on table "pg_toast_32247" serially
2025-04-19 07:35:55.745 UTC [697] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:35:55.746 UTC [697] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:35:55.746 UTC [697] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:35:55.748 UTC [697] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:35:55.749 UTC [697] DEBUG:  building index "pg_toast_32270_index" on table "pg_toast_32270" serially
2025-04-19 07:35:55.749 UTC [697] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:35:55.750 UTC [697] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:35:55.750 UTC [697] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:35:55.751 UTC [697] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:35:55.751 UTC [697] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:35:55.752 UTC [697] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:35:55.752 UTC [697] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:35:55.753 UTC [697] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:35:55.753 UTC [697] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:35:55.754 UTC [697] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:35:55.754 UTC [697] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:35:55.754 UTC [697] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:35:55.754 UTC [697] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:35:55.755 UTC [697] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:35:55.755 UTC [697] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:35:55.756 UTC [697] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:35:55.756 UTC [697] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:35:55.757 UTC [697] DEBUG:  rehashing catalog cache id 32 for pg_index; 129 tups, 64 buckets
2025-04-19 07:35:55.757 UTC [697] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:35:55.757 UTC [697] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:35:55.758 UTC [697] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:35:55.758 UTC [697] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:35:55.759 UTC [697] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:35:55.759 UTC [697] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:35:55.760 UTC [697] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:35:55.760 UTC [697] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:35:55.772 UTC [697] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:35:56.049 UTC [697] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$FW/TaAhbtoMClZ6WCQcGeeeV89eaAa/bPVToZbTUvmX/zk/y5VASq')
	                RETURNING id, username, email
	                
2025-04-19 07:35:56.050 UTC [697] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:35:56.050 UTC [697] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:35:56.050 UTC [697] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 07:35:56.054 UTC [697] DEBUG:  rehashing catalog cache id 7 for pg_attribute; 257 tups, 128 buckets
2025-04-19 07:35:56.054 UTC [697] CONTEXT:  SQL expression "NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        )"
	PL/pgSQL function inline_code_block line 3 at IF
2025-04-19 07:35:56.060 UTC [697] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:35:56.061 UTC [697] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:35:56.063 UTC [697] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:35:56.068 UTC [697] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:35:56.068 UTC [697] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:35:56.077 UTC [697] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:35:56.081 UTC [697] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:35:56.083 UTC [697] DEBUG:  building index "pg_toast_32306_index" on table "pg_toast_32306" serially
2025-04-19 07:35:56.084 UTC [697] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:35:56.084 UTC [697] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:35:56.084 UTC [697] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:35:56.085 UTC [697] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:35:56.085 UTC [697] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:35:56.085 UTC [697] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:35:56.086 UTC [697] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:35:56.086 UTC [697] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:35:56.086 UTC [697] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:35:56.087 UTC [697] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:35:56.088 UTC [697] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:35:56.088 UTC [697] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:35:56.088 UTC [697] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:35:56.089 UTC [697] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:35:56.089 UTC [697] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:35:56.089 UTC [697] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:35:56.090 UTC [697] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:35:56.091 UTC [697] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:35:56.091 UTC [697] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:35:56.091 UTC [697] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:35:56.092 UTC [697] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:35:56.092 UTC [697] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:35:56.092 UTC [697] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:35:56.094 UTC [697] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:35:56.095 UTC [697] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:35:56.095 UTC [697] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:35:56.095 UTC [697] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:35:56.096 UTC [697] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:35:56.098 UTC [697] DEBUG:  building index "pg_toast_32367_index" on table "pg_toast_32367" serially
2025-04-19 07:35:56.099 UTC [697] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:35:56.099 UTC [697] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:35:56.099 UTC [697] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:35:56.100 UTC [697] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:35:56.101 UTC [697] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:35:56.101 UTC [697] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:35:56.101 UTC [697] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:35:56.102 UTC [697] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:35:56.102 UTC [697] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:35:56.102 UTC [697] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:35:56.104 UTC [697] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:35:56.105 UTC [697] DEBUG:  building index "pg_toast_32400_index" on table "pg_toast_32400" serially
2025-04-19 07:35:56.106 UTC [697] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:35:56.106 UTC [697] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:35:56.106 UTC [697] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:35:56.106 UTC [697] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:35:56.108 UTC [697] DEBUG:  building index "pg_toast_32411_index" on table "pg_toast_32411" serially
2025-04-19 07:35:56.109 UTC [697] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:35:56.109 UTC [697] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:35:56.109 UTC [697] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:35:56.110 UTC [697] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:35:56.112 UTC [697] DEBUG:  building index "pg_toast_32434_index" on table "pg_toast_32434" serially
2025-04-19 07:35:56.113 UTC [697] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:35:56.113 UTC [697] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:35:56.113 UTC [697] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:35:56.114 UTC [697] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:35:56.114 UTC [697] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:35:56.115 UTC [697] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:35:56.115 UTC [697] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:35:56.115 UTC [697] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:35:56.115 UTC [697] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:35:56.116 UTC [697] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:35:56.116 UTC [697] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:35:56.117 UTC [697] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:35:56.117 UTC [697] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:35:56.119 UTC [697] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:35:56.119 UTC [697] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:35:56.121 UTC [697] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:35:56.121 UTC [697] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:35:56.122 UTC [697] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:35:56.122 UTC [697] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:35:56.123 UTC [697] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:35:56.123 UTC [697] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:35:56.124 UTC [697] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:35:56.124 UTC [697] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:35:56.125 UTC [697] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:35:56.125 UTC [697] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:35:56.135 UTC [697] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:35:56.384 UTC [697] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$GObGOc0WxWdkfZQe4ikjK.dxSpo/IZAMOB0MpzjsKvSOEqsXZgc0i')
	                RETURNING id, username, email
	                
2025-04-19 07:35:56.385 UTC [697] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:35:56.386 UTC [697] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:36:09.407 UTC [697] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 07:36:09.789 UTC [697] DEBUG:  unexpected EOF on client connection
2025-04-19 07:36:14.647 UTC [712] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:36:14.658 UTC [712] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:36:14.668 UTC [712] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:36:14.668 UTC [712] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:36:14.675 UTC [712] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:36:14.679 UTC [712] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:36:14.683 UTC [712] DEBUG:  building index "pg_toast_32470_index" on table "pg_toast_32470" serially
2025-04-19 07:36:14.684 UTC [712] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:36:14.685 UTC [712] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:36:14.686 UTC [712] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:36:14.687 UTC [712] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:36:14.687 UTC [712] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:36:14.687 UTC [712] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:36:14.688 UTC [712] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:36:14.688 UTC [712] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:36:14.688 UTC [712] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:36:14.689 UTC [712] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:36:14.690 UTC [712] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:36:14.691 UTC [712] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:36:14.691 UTC [712] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:36:14.692 UTC [712] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:36:14.692 UTC [712] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:36:14.692 UTC [712] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:36:14.693 UTC [712] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:36:14.694 UTC [712] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:36:14.694 UTC [712] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:36:14.695 UTC [712] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:36:14.695 UTC [712] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:36:14.695 UTC [712] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:36:14.696 UTC [712] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:36:14.698 UTC [712] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:36:14.702 UTC [712] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:36:14.702 UTC [712] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:36:14.702 UTC [712] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:36:14.706 UTC [712] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:36:14.710 UTC [712] DEBUG:  building index "pg_toast_32531_index" on table "pg_toast_32531" serially
2025-04-19 07:36:14.712 UTC [712] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:36:14.712 UTC [712] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:36:14.712 UTC [712] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:36:14.716 UTC [712] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:36:14.718 UTC [712] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:36:14.718 UTC [712] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:36:14.718 UTC [712] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:36:14.720 UTC [712] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:36:14.721 UTC [712] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:36:14.721 UTC [712] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:36:14.724 UTC [712] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:36:14.727 UTC [712] DEBUG:  building index "pg_toast_32564_index" on table "pg_toast_32564" serially
2025-04-19 07:36:14.732 UTC [712] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:36:14.733 UTC [712] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:36:14.733 UTC [712] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:36:14.734 UTC [712] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:36:14.737 UTC [712] DEBUG:  building index "pg_toast_32575_index" on table "pg_toast_32575" serially
2025-04-19 07:36:14.740 UTC [712] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:36:14.742 UTC [712] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:36:14.742 UTC [712] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:36:14.745 UTC [712] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:36:14.747 UTC [712] DEBUG:  building index "pg_toast_32598_index" on table "pg_toast_32598" serially
2025-04-19 07:36:14.749 UTC [712] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:36:14.751 UTC [712] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:36:14.751 UTC [712] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:36:14.754 UTC [712] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:36:14.754 UTC [712] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:36:14.756 UTC [712] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:36:14.756 UTC [712] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:36:14.758 UTC [712] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:36:14.758 UTC [712] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:36:14.761 UTC [712] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:36:14.761 UTC [712] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:36:14.765 UTC [712] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:36:14.765 UTC [712] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:36:14.767 UTC [712] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:36:14.767 UTC [712] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:36:14.769 UTC [712] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:36:14.769 UTC [712] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:36:14.772 UTC [712] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:36:14.772 UTC [712] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:36:14.777 UTC [712] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:36:14.777 UTC [712] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:36:14.782 UTC [712] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:36:14.782 UTC [712] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:36:14.784 UTC [712] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:36:14.784 UTC [712] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:36:14.822 UTC [712] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:36:15.130 UTC [712] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$4ELPKUg933iS1TMrMhJRhu0l.6SqQd2T5do/4xABb9wQj.b6XtCty')
	                RETURNING id, username, email
	                
2025-04-19 07:36:15.130 UTC [712] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:36:15.131 UTC [712] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:36:15.132 UTC [712] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 07:36:15.152 UTC [712] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:36:15.155 UTC [712] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:36:15.158 UTC [712] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:36:15.167 UTC [712] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:36:15.167 UTC [712] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:36:15.177 UTC [712] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:36:15.183 UTC [712] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:36:15.184 UTC [712] DEBUG:  building index "pg_toast_32634_index" on table "pg_toast_32634" serially
2025-04-19 07:36:15.185 UTC [712] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:36:15.186 UTC [712] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:36:15.186 UTC [712] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:36:15.187 UTC [712] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:36:15.188 UTC [712] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:36:15.188 UTC [712] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:36:15.188 UTC [712] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:36:15.189 UTC [712] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:36:15.189 UTC [712] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:36:15.190 UTC [712] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:36:15.191 UTC [712] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:36:15.191 UTC [712] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:36:15.191 UTC [712] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:36:15.192 UTC [712] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:36:15.192 UTC [712] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:36:15.192 UTC [712] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:36:15.193 UTC [712] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:36:15.194 UTC [712] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:36:15.194 UTC [712] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:36:15.194 UTC [712] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:36:15.195 UTC [712] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:36:15.195 UTC [712] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:36:15.196 UTC [712] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:36:15.197 UTC [712] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:36:15.198 UTC [712] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:36:15.199 UTC [712] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:36:15.199 UTC [712] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:36:15.203 UTC [712] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:36:15.206 UTC [712] DEBUG:  building index "pg_toast_32695_index" on table "pg_toast_32695" serially
2025-04-19 07:36:15.208 UTC [712] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:36:15.208 UTC [712] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:36:15.208 UTC [712] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:36:15.209 UTC [712] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:36:15.211 UTC [712] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:36:15.211 UTC [712] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:36:15.211 UTC [712] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:36:15.212 UTC [712] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:36:15.212 UTC [712] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:36:15.212 UTC [712] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:36:15.213 UTC [712] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:36:15.215 UTC [712] DEBUG:  building index "pg_toast_32728_index" on table "pg_toast_32728" serially
2025-04-19 07:36:15.216 UTC [712] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:36:15.217 UTC [712] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:36:15.217 UTC [712] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:36:15.218 UTC [712] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:36:15.219 UTC [712] DEBUG:  building index "pg_toast_32739_index" on table "pg_toast_32739" serially
2025-04-19 07:36:15.221 UTC [712] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:36:15.222 UTC [712] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:36:15.222 UTC [712] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:36:15.229 UTC [712] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:36:15.232 UTC [712] DEBUG:  building index "pg_toast_32762_index" on table "pg_toast_32762" serially
2025-04-19 07:36:15.234 UTC [712] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:36:15.234 UTC [712] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:36:15.234 UTC [712] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:36:15.237 UTC [712] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:36:15.237 UTC [712] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:36:15.239 UTC [712] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:36:15.239 UTC [712] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:36:15.240 UTC [712] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:36:15.240 UTC [712] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:36:15.241 UTC [712] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:36:15.241 UTC [712] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:36:15.243 UTC [712] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:36:15.243 UTC [712] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:36:15.244 UTC [712] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:36:15.244 UTC [712] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:36:15.245 UTC [712] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:36:15.245 UTC [712] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:36:15.246 UTC [712] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:36:15.246 UTC [712] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:36:15.247 UTC [712] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:36:15.247 UTC [712] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:36:15.248 UTC [712] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:36:15.248 UTC [712] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:36:15.249 UTC [712] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:36:15.249 UTC [712] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:36:15.265 UTC [712] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:36:15.571 UTC [712] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$AuRoVIZX/kbzuEzFkrp5B.kiEdoer1KqQrJ44GQW8I2a94.jH1Qmq')
	                RETURNING id, username, email
	                
2025-04-19 07:36:15.574 UTC [712] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:36:15.575 UTC [712] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:36:20.389 UTC [720] DEBUG:  autovacuum: processing database "postgres"
2025-04-19 07:36:26.635 UTC [712] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 07:36:27.782 UTC [712] DEBUG:  unexpected EOF on client connection
2025-04-19 07:36:31.353 UTC [728] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:36:31.384 UTC [728] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:36:31.394 UTC [728] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:36:31.394 UTC [728] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:36:31.399 UTC [728] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:36:31.403 UTC [728] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:36:31.413 UTC [728] DEBUG:  building index "pg_toast_32798_index" on table "pg_toast_32798" serially
2025-04-19 07:36:31.415 UTC [728] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:36:31.416 UTC [728] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:36:31.416 UTC [728] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:36:31.417 UTC [728] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:36:31.417 UTC [728] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:36:31.418 UTC [728] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:36:31.418 UTC [728] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:36:31.419 UTC [728] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:36:31.419 UTC [728] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:36:31.420 UTC [728] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:36:31.421 UTC [728] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:36:31.422 UTC [728] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:36:31.422 UTC [728] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:36:31.423 UTC [728] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:36:31.423 UTC [728] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:36:31.423 UTC [728] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:36:31.424 UTC [728] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:36:31.426 UTC [728] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:36:31.426 UTC [728] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:36:31.426 UTC [728] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:36:31.427 UTC [728] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:36:31.427 UTC [728] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:36:31.427 UTC [728] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:36:31.430 UTC [728] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:36:31.431 UTC [728] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:36:31.432 UTC [728] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:36:31.432 UTC [728] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:36:31.433 UTC [728] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:36:31.435 UTC [728] DEBUG:  building index "pg_toast_32859_index" on table "pg_toast_32859" serially
2025-04-19 07:36:31.436 UTC [728] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:36:31.437 UTC [728] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:36:31.437 UTC [728] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:36:31.439 UTC [728] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:36:31.441 UTC [728] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:36:31.441 UTC [728] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:36:31.441 UTC [728] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:36:31.443 UTC [728] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:36:31.443 UTC [728] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:36:31.443 UTC [728] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:36:31.444 UTC [728] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:36:31.445 UTC [728] DEBUG:  building index "pg_toast_32892_index" on table "pg_toast_32892" serially
2025-04-19 07:36:31.447 UTC [728] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:36:31.448 UTC [728] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:36:31.448 UTC [728] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:36:31.449 UTC [728] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:36:31.450 UTC [728] DEBUG:  building index "pg_toast_32903_index" on table "pg_toast_32903" serially
2025-04-19 07:36:31.451 UTC [728] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:36:31.451 UTC [728] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:36:31.452 UTC [728] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:36:31.454 UTC [728] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:36:31.455 UTC [728] DEBUG:  building index "pg_toast_32926_index" on table "pg_toast_32926" serially
2025-04-19 07:36:31.456 UTC [728] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:36:31.456 UTC [728] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:36:31.456 UTC [728] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:36:31.457 UTC [728] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:36:31.457 UTC [728] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:36:31.459 UTC [728] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:36:31.459 UTC [728] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:36:31.460 UTC [728] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:36:31.460 UTC [728] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:36:31.461 UTC [728] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:36:31.461 UTC [728] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:36:31.462 UTC [728] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:36:31.462 UTC [728] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:36:31.464 UTC [728] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:36:31.464 UTC [728] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:36:31.466 UTC [728] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:36:31.466 UTC [728] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:36:31.467 UTC [728] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:36:31.468 UTC [728] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:36:31.469 UTC [728] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:36:31.469 UTC [728] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:36:31.471 UTC [728] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:36:31.471 UTC [728] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:36:31.471 UTC [728] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:36:31.471 UTC [728] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:36:31.489 UTC [728] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:36:31.812 UTC [728] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$zYAoj4y8vIl7ELNNio9EHuyTOQUjYEQQG4E6dXPyAZifdKnAWf1eu')
	                RETURNING id, username, email
	                
2025-04-19 07:36:31.813 UTC [728] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:36:31.814 UTC [728] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:36:31.815 UTC [728] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 07:36:31.826 UTC [728] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:36:31.828 UTC [728] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:36:31.831 UTC [728] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:36:31.838 UTC [728] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:36:31.838 UTC [728] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:36:31.842 UTC [728] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:36:31.846 UTC [728] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:36:31.848 UTC [728] DEBUG:  building index "pg_toast_32962_index" on table "pg_toast_32962" serially
2025-04-19 07:36:31.849 UTC [728] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:36:31.849 UTC [728] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:36:31.849 UTC [728] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:36:31.850 UTC [728] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:36:31.850 UTC [728] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:36:31.850 UTC [728] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:36:31.851 UTC [728] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:36:31.851 UTC [728] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:36:31.851 UTC [728] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:36:31.852 UTC [728] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:36:31.853 UTC [728] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:36:31.853 UTC [728] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:36:31.853 UTC [728] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:36:31.854 UTC [728] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:36:31.854 UTC [728] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:36:31.854 UTC [728] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:36:31.854 UTC [728] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:36:31.855 UTC [728] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:36:31.856 UTC [728] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:36:31.856 UTC [728] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:36:31.857 UTC [728] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:36:31.857 UTC [728] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:36:31.857 UTC [728] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:36:31.858 UTC [728] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:36:31.859 UTC [728] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:36:31.859 UTC [728] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:36:31.859 UTC [728] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:36:31.860 UTC [728] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:36:31.862 UTC [728] DEBUG:  building index "pg_toast_33023_index" on table "pg_toast_33023" serially
2025-04-19 07:36:31.863 UTC [728] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:36:31.863 UTC [728] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:36:31.863 UTC [728] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:36:31.864 UTC [728] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:36:31.865 UTC [728] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:36:31.865 UTC [728] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:36:31.865 UTC [728] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:36:31.866 UTC [728] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:36:31.866 UTC [728] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:36:31.866 UTC [728] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:36:31.868 UTC [728] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:36:31.869 UTC [728] DEBUG:  building index "pg_toast_33056_index" on table "pg_toast_33056" serially
2025-04-19 07:36:31.869 UTC [728] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:36:31.870 UTC [728] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:36:31.870 UTC [728] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:36:31.870 UTC [728] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:36:31.871 UTC [728] DEBUG:  building index "pg_toast_33067_index" on table "pg_toast_33067" serially
2025-04-19 07:36:31.872 UTC [728] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:36:31.873 UTC [728] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:36:31.873 UTC [728] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:36:31.874 UTC [728] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:36:31.875 UTC [728] DEBUG:  building index "pg_toast_33090_index" on table "pg_toast_33090" serially
2025-04-19 07:36:31.881 UTC [728] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:36:31.882 UTC [728] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:36:31.882 UTC [728] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:36:31.885 UTC [728] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:36:31.885 UTC [728] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:36:31.886 UTC [728] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:36:31.886 UTC [728] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:36:31.888 UTC [728] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:36:31.888 UTC [728] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:36:31.889 UTC [728] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:36:31.889 UTC [728] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:36:31.891 UTC [728] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:36:31.891 UTC [728] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:36:31.892 UTC [728] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:36:31.892 UTC [728] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:36:31.893 UTC [728] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:36:31.893 UTC [728] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:36:31.894 UTC [728] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:36:31.894 UTC [728] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:36:31.895 UTC [728] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:36:31.895 UTC [728] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:36:31.896 UTC [728] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:36:31.896 UTC [728] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:36:31.897 UTC [728] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:36:31.897 UTC [728] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:36:31.904 UTC [728] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:36:32.152 UTC [728] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$6t5S0YVld/B.HTxXkBJZ3ebGWxSJucfByd1NRxGpdLSzkQfq5p1OS')
	                RETURNING id, username, email
	                
2025-04-19 07:36:32.152 UTC [728] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:36:32.153 UTC [728] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:36:44.650 UTC [728] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 07:36:45.023 UTC [728] DEBUG:  unexpected EOF on client connection
2025-04-19 07:36:48.535 UTC [736] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:36:48.574 UTC [736] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:36:48.608 UTC [736] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:36:48.608 UTC [736] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:36:48.659 UTC [736] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:36:48.684 UTC [736] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:36:48.689 UTC [736] DEBUG:  building index "pg_toast_33126_index" on table "pg_toast_33126" serially
2025-04-19 07:36:48.691 UTC [736] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:36:48.692 UTC [736] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:36:48.692 UTC [736] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:36:48.694 UTC [736] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:36:48.694 UTC [736] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:36:48.694 UTC [736] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:36:48.695 UTC [736] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:36:48.696 UTC [736] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:36:48.696 UTC [736] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:36:48.697 UTC [736] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:36:48.698 UTC [736] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:36:48.699 UTC [736] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:36:48.699 UTC [736] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:36:48.700 UTC [736] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:36:48.700 UTC [736] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:36:48.700 UTC [736] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:36:48.701 UTC [736] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:36:48.702 UTC [736] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:36:48.703 UTC [736] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:36:48.703 UTC [736] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:36:48.704 UTC [736] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:36:48.704 UTC [736] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:36:48.704 UTC [736] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:36:48.706 UTC [736] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:36:48.707 UTC [736] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:36:48.707 UTC [736] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:36:48.707 UTC [736] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:36:48.709 UTC [736] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:36:48.711 UTC [736] DEBUG:  building index "pg_toast_33187_index" on table "pg_toast_33187" serially
2025-04-19 07:36:48.712 UTC [736] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:36:48.712 UTC [736] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:36:48.712 UTC [736] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:36:48.713 UTC [736] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:36:48.716 UTC [736] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:36:48.717 UTC [736] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:36:48.717 UTC [736] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:36:48.721 UTC [736] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:36:48.721 UTC [736] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:36:48.721 UTC [736] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:36:48.724 UTC [736] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:36:48.725 UTC [736] DEBUG:  building index "pg_toast_33220_index" on table "pg_toast_33220" serially
2025-04-19 07:36:48.727 UTC [736] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:36:48.727 UTC [736] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:36:48.727 UTC [736] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:36:48.728 UTC [736] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:36:48.730 UTC [736] DEBUG:  building index "pg_toast_33231_index" on table "pg_toast_33231" serially
2025-04-19 07:36:48.746 UTC [736] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:36:48.759 UTC [736] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:36:48.760 UTC [736] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:36:48.840 UTC [736] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:36:48.887 UTC [736] DEBUG:  building index "pg_toast_33254_index" on table "pg_toast_33254" serially
2025-04-19 07:36:48.916 UTC [736] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:36:48.924 UTC [736] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:36:48.924 UTC [736] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:36:48.947 UTC [736] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:36:48.947 UTC [736] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:36:48.962 UTC [736] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:36:48.962 UTC [736] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:36:48.988 UTC [736] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:36:48.988 UTC [736] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:36:49.000 UTC [736] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:36:49.000 UTC [736] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:36:49.016 UTC [736] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:36:49.016 UTC [736] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:36:49.027 UTC [736] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:36:49.027 UTC [736] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:36:49.040 UTC [736] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:36:49.040 UTC [736] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:36:49.045 UTC [736] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:36:49.045 UTC [736] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:36:49.058 UTC [736] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:36:49.058 UTC [736] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:36:49.063 UTC [736] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:36:49.063 UTC [736] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:36:49.066 UTC [736] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:36:49.066 UTC [736] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:36:49.098 UTC [736] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:36:49.571 UTC [736] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$yZds567XQBIRyUQagfv4puqePikGwHZNgYjs9WIlSklqzlRKLw6X6')
	                RETURNING id, username, email
	                
2025-04-19 07:36:49.578 UTC [736] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:36:49.580 UTC [736] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:36:49.584 UTC [736] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 07:36:49.626 UTC [736] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:36:49.631 UTC [736] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:36:49.645 UTC [736] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:36:49.657 UTC [736] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:36:49.657 UTC [736] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:36:49.668 UTC [736] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:36:49.677 UTC [736] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:36:49.681 UTC [736] DEBUG:  building index "pg_toast_33290_index" on table "pg_toast_33290" serially
2025-04-19 07:36:49.682 UTC [736] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:36:49.683 UTC [736] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:36:49.683 UTC [736] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:36:49.684 UTC [736] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:36:49.684 UTC [736] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:36:49.684 UTC [736] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:36:49.686 UTC [736] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:36:49.686 UTC [736] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:36:49.686 UTC [736] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:36:49.687 UTC [736] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:36:49.689 UTC [736] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:36:49.690 UTC [736] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:36:49.690 UTC [736] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:36:49.691 UTC [736] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:36:49.692 UTC [736] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:36:49.692 UTC [736] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:36:49.693 UTC [736] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:36:49.695 UTC [736] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:36:49.696 UTC [736] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:36:49.696 UTC [736] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:36:49.698 UTC [736] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:36:49.699 UTC [736] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:36:49.699 UTC [736] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:36:49.701 UTC [736] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:36:49.702 UTC [736] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:36:49.703 UTC [736] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:36:49.703 UTC [736] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:36:49.705 UTC [736] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:36:49.712 UTC [736] DEBUG:  building index "pg_toast_33351_index" on table "pg_toast_33351" serially
2025-04-19 07:36:49.726 UTC [736] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:36:49.728 UTC [736] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:36:49.728 UTC [736] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:36:49.733 UTC [736] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:36:49.737 UTC [736] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:36:49.738 UTC [736] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:36:49.738 UTC [736] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:36:49.741 UTC [736] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:36:49.743 UTC [736] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:36:49.743 UTC [736] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:36:49.748 UTC [736] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:36:49.750 UTC [736] DEBUG:  building index "pg_toast_33384_index" on table "pg_toast_33384" serially
2025-04-19 07:36:49.751 UTC [736] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:36:49.751 UTC [736] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:36:49.751 UTC [736] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:36:49.752 UTC [736] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:36:49.754 UTC [736] DEBUG:  building index "pg_toast_33395_index" on table "pg_toast_33395" serially
2025-04-19 07:36:49.755 UTC [736] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:36:49.755 UTC [736] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:36:49.755 UTC [736] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:36:49.757 UTC [736] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:36:49.758 UTC [736] DEBUG:  building index "pg_toast_33418_index" on table "pg_toast_33418" serially
2025-04-19 07:36:49.759 UTC [736] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:36:49.760 UTC [736] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:36:49.760 UTC [736] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:36:49.761 UTC [736] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:36:49.761 UTC [736] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:36:49.762 UTC [736] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:36:49.762 UTC [736] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:36:49.763 UTC [736] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:36:49.763 UTC [736] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:36:49.764 UTC [736] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:36:49.764 UTC [736] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:36:49.765 UTC [736] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:36:49.765 UTC [736] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:36:49.766 UTC [736] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:36:49.766 UTC [736] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:36:49.767 UTC [736] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:36:49.767 UTC [736] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:36:49.768 UTC [736] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:36:49.768 UTC [736] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:36:49.769 UTC [736] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:36:49.769 UTC [736] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:36:49.770 UTC [736] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:36:49.770 UTC [736] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:36:49.772 UTC [736] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:36:49.772 UTC [736] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:36:49.808 UTC [736] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:36:50.113 UTC [736] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$GSMQPiScoqTV7NELSnHkhepT9gn3/QBFmsM5yBCrhvJmIzf1Du2/C')
	                RETURNING id, username, email
	                
2025-04-19 07:36:50.114 UTC [736] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:36:50.115 UTC [736] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:36:50.383 UTC [744] DEBUG:  autovacuum: processing database "powerball"
2025-04-19 07:36:50.626 UTC [744] DEBUG:  rehashing catalog cache id 14 for pg_opclass; 17 tups, 8 buckets
2025-04-19 07:37:00.934 UTC [736] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 07:37:01.226 UTC [736] DEBUG:  unexpected EOF on client connection
2025-04-19 07:37:05.115 UTC [752] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:37:05.148 UTC [752] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:37:05.179 UTC [752] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:37:05.179 UTC [752] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:37:05.191 UTC [752] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:37:05.197 UTC [752] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:37:05.202 UTC [752] DEBUG:  building index "pg_toast_33455_index" on table "pg_toast_33455" serially
2025-04-19 07:37:05.204 UTC [752] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:37:05.205 UTC [752] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:37:05.205 UTC [752] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:37:05.206 UTC [752] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:37:05.207 UTC [752] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:37:05.207 UTC [752] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:37:05.208 UTC [752] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:37:05.208 UTC [752] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:37:05.208 UTC [752] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:37:05.209 UTC [752] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:37:05.210 UTC [752] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:37:05.210 UTC [752] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:37:05.210 UTC [752] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:37:05.211 UTC [752] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:37:05.211 UTC [752] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:37:05.211 UTC [752] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:37:05.212 UTC [752] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:37:05.213 UTC [752] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:37:05.214 UTC [752] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:37:05.214 UTC [752] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:37:05.215 UTC [752] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:37:05.215 UTC [752] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:37:05.215 UTC [752] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:37:05.217 UTC [752] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:37:05.217 UTC [752] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:37:05.218 UTC [752] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:37:05.218 UTC [752] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:37:05.219 UTC [752] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:37:05.221 UTC [752] DEBUG:  building index "pg_toast_33516_index" on table "pg_toast_33516" serially
2025-04-19 07:37:05.222 UTC [752] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:37:05.222 UTC [752] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:37:05.222 UTC [752] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:37:05.224 UTC [752] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:37:05.226 UTC [752] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:37:05.238 UTC [752] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:37:05.239 UTC [752] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:37:05.288 UTC [752] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:37:05.289 UTC [752] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:37:05.290 UTC [752] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:37:05.310 UTC [752] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:37:05.331 UTC [752] DEBUG:  building index "pg_toast_33549_index" on table "pg_toast_33549" serially
2025-04-19 07:37:05.334 UTC [752] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:37:05.336 UTC [752] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:37:05.336 UTC [752] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:37:05.338 UTC [752] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:37:05.340 UTC [752] DEBUG:  building index "pg_toast_33560_index" on table "pg_toast_33560" serially
2025-04-19 07:37:05.341 UTC [752] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:37:05.342 UTC [752] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:37:05.342 UTC [752] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:37:05.348 UTC [752] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:37:05.351 UTC [752] DEBUG:  building index "pg_toast_33583_index" on table "pg_toast_33583" serially
2025-04-19 07:37:05.354 UTC [752] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:37:05.356 UTC [752] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:37:05.356 UTC [752] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:37:05.360 UTC [752] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:37:05.360 UTC [752] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:37:05.365 UTC [752] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:37:05.365 UTC [752] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:37:05.373 UTC [752] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:37:05.373 UTC [752] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:37:05.379 UTC [752] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:37:05.379 UTC [752] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:37:05.387 UTC [752] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:37:05.387 UTC [752] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:37:05.392 UTC [752] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:37:05.392 UTC [752] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:37:05.403 UTC [752] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:37:05.403 UTC [752] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:37:05.415 UTC [752] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:37:05.415 UTC [752] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:37:05.427 UTC [752] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:37:05.428 UTC [752] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:37:05.431 UTC [752] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:37:05.431 UTC [752] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:37:05.436 UTC [752] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:37:05.436 UTC [752] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:37:05.465 UTC [752] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:37:05.823 UTC [752] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$ePUoFvyM1mYhCmTmXoJ10O71xcwWxwvcGgZrQQtCpGMCj/aGXsiN.')
	                RETURNING id, username, email
	                
2025-04-19 07:37:05.825 UTC [752] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:37:05.826 UTC [752] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:37:05.828 UTC [752] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 07:37:05.866 UTC [752] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:37:05.870 UTC [752] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:37:05.873 UTC [752] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:37:05.883 UTC [752] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:37:05.883 UTC [752] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:37:05.889 UTC [752] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:37:05.893 UTC [752] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:37:05.895 UTC [752] DEBUG:  building index "pg_toast_33619_index" on table "pg_toast_33619" serially
2025-04-19 07:37:05.897 UTC [752] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:37:05.898 UTC [752] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:37:05.898 UTC [752] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:37:05.899 UTC [752] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:37:05.899 UTC [752] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:37:05.899 UTC [752] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:37:05.900 UTC [752] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:37:05.900 UTC [752] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:37:05.900 UTC [752] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:37:05.901 UTC [752] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:37:05.902 UTC [752] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:37:05.903 UTC [752] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:37:05.903 UTC [752] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:37:05.903 UTC [752] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:37:05.903 UTC [752] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:37:05.903 UTC [752] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:37:05.904 UTC [752] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:37:05.905 UTC [752] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:37:05.905 UTC [752] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:37:05.905 UTC [752] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:37:05.906 UTC [752] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:37:05.906 UTC [752] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:37:05.906 UTC [752] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:37:05.908 UTC [752] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:37:05.909 UTC [752] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:37:05.909 UTC [752] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:37:05.909 UTC [752] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:37:05.911 UTC [752] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:37:05.912 UTC [752] DEBUG:  building index "pg_toast_33680_index" on table "pg_toast_33680" serially
2025-04-19 07:37:05.913 UTC [752] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:37:05.914 UTC [752] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:37:05.914 UTC [752] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:37:05.915 UTC [752] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:37:05.916 UTC [752] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:37:05.916 UTC [752] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:37:05.916 UTC [752] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:37:05.917 UTC [752] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:37:05.917 UTC [752] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:37:05.917 UTC [752] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:37:05.919 UTC [752] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:37:05.920 UTC [752] DEBUG:  building index "pg_toast_33713_index" on table "pg_toast_33713" serially
2025-04-19 07:37:05.921 UTC [752] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:37:05.921 UTC [752] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:37:05.921 UTC [752] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:37:05.922 UTC [752] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:37:05.923 UTC [752] DEBUG:  building index "pg_toast_33724_index" on table "pg_toast_33724" serially
2025-04-19 07:37:05.924 UTC [752] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:37:05.924 UTC [752] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:37:05.924 UTC [752] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:37:05.926 UTC [752] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:37:05.929 UTC [752] DEBUG:  building index "pg_toast_33747_index" on table "pg_toast_33747" serially
2025-04-19 07:37:05.932 UTC [752] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:37:05.933 UTC [752] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:37:05.933 UTC [752] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:37:05.936 UTC [752] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:37:05.936 UTC [752] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:37:05.937 UTC [752] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:37:05.937 UTC [752] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:37:05.938 UTC [752] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:37:05.938 UTC [752] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:37:05.940 UTC [752] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:37:05.940 UTC [752] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:37:05.941 UTC [752] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:37:05.941 UTC [752] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:37:05.942 UTC [752] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:37:05.942 UTC [752] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:37:05.943 UTC [752] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:37:05.943 UTC [752] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:37:05.944 UTC [752] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:37:05.944 UTC [752] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:37:05.945 UTC [752] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:37:05.945 UTC [752] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:37:05.946 UTC [752] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:37:05.946 UTC [752] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:37:05.947 UTC [752] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:37:05.947 UTC [752] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:37:05.958 UTC [752] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:37:06.221 UTC [752] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$NMg8DNexi6n79i2SKSZWbe/C1vK9P0t2q5bwJEwKbO3L1aOim74w2')
	                RETURNING id, username, email
	                
2025-04-19 07:37:06.222 UTC [752] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:37:06.222 UTC [752] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:37:16.978 UTC [752] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 07:37:17.312 UTC [752] DEBUG:  unexpected EOF on client connection
2025-04-19 07:37:20.403 UTC [767] DEBUG:  autovacuum: processing database "postgres"
2025-04-19 07:37:20.941 UTC [768] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:37:20.948 UTC [768] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:37:20.956 UTC [768] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:37:20.956 UTC [768] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:37:20.962 UTC [768] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:37:20.967 UTC [768] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:37:20.969 UTC [768] DEBUG:  building index "pg_toast_33783_index" on table "pg_toast_33783" serially
2025-04-19 07:37:20.971 UTC [768] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:37:20.972 UTC [768] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:37:20.972 UTC [768] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:37:20.973 UTC [768] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:37:20.973 UTC [768] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:37:20.973 UTC [768] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:37:20.974 UTC [768] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:37:20.974 UTC [768] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:37:20.974 UTC [768] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:37:20.975 UTC [768] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:37:20.976 UTC [768] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:37:20.976 UTC [768] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:37:20.976 UTC [768] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:37:20.977 UTC [768] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:37:20.977 UTC [768] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:37:20.977 UTC [768] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:37:20.977 UTC [768] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:37:20.979 UTC [768] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:37:20.979 UTC [768] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:37:20.979 UTC [768] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:37:20.980 UTC [768] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:37:20.980 UTC [768] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:37:20.980 UTC [768] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:37:20.982 UTC [768] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:37:20.984 UTC [768] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:37:20.984 UTC [768] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:37:20.984 UTC [768] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:37:20.985 UTC [768] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:37:20.987 UTC [768] DEBUG:  building index "pg_toast_33844_index" on table "pg_toast_33844" serially
2025-04-19 07:37:20.988 UTC [768] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:37:20.988 UTC [768] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:37:20.988 UTC [768] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:37:20.989 UTC [768] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:37:20.991 UTC [768] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:37:20.991 UTC [768] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:37:20.991 UTC [768] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:37:20.992 UTC [768] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:37:20.992 UTC [768] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:37:20.992 UTC [768] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:37:20.994 UTC [768] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:37:20.995 UTC [768] DEBUG:  building index "pg_toast_33877_index" on table "pg_toast_33877" serially
2025-04-19 07:37:20.996 UTC [768] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:37:20.996 UTC [768] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:37:20.996 UTC [768] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:37:20.997 UTC [768] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:37:20.998 UTC [768] DEBUG:  building index "pg_toast_33888_index" on table "pg_toast_33888" serially
2025-04-19 07:37:20.999 UTC [768] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:37:20.999 UTC [768] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:37:20.999 UTC [768] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:37:21.001 UTC [768] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:37:21.002 UTC [768] DEBUG:  building index "pg_toast_33911_index" on table "pg_toast_33911" serially
2025-04-19 07:37:21.003 UTC [768] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:37:21.003 UTC [768] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:37:21.003 UTC [768] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:37:21.004 UTC [768] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:37:21.004 UTC [768] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:37:21.005 UTC [768] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:37:21.005 UTC [768] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:37:21.005 UTC [768] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:37:21.005 UTC [768] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:37:21.006 UTC [768] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:37:21.006 UTC [768] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:37:21.007 UTC [768] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:37:21.007 UTC [768] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:37:21.008 UTC [768] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:37:21.008 UTC [768] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:37:21.009 UTC [768] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:37:21.009 UTC [768] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:37:21.010 UTC [768] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:37:21.010 UTC [768] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:37:21.011 UTC [768] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:37:21.011 UTC [768] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:37:21.012 UTC [768] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:37:21.012 UTC [768] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:37:21.013 UTC [768] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:37:21.013 UTC [768] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:37:21.030 UTC [768] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:37:21.333 UTC [768] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$.FinB1hBgwNsmCMoFGB7pOLMSgzD0dzFI1wrnoUUonQdMc1mS8a1q')
	                RETURNING id, username, email
	                
2025-04-19 07:37:21.335 UTC [768] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:37:21.335 UTC [768] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:37:21.336 UTC [768] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 07:37:21.354 UTC [768] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:37:21.356 UTC [768] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:37:21.360 UTC [768] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:37:21.368 UTC [768] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:37:21.368 UTC [768] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:37:21.374 UTC [768] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:37:21.393 UTC [768] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:37:21.396 UTC [768] DEBUG:  building index "pg_toast_33947_index" on table "pg_toast_33947" serially
2025-04-19 07:37:21.398 UTC [768] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:37:21.398 UTC [768] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:37:21.398 UTC [768] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:37:21.401 UTC [768] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:37:21.401 UTC [768] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:37:21.401 UTC [768] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:37:21.403 UTC [768] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:37:21.403 UTC [768] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:37:21.403 UTC [768] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:37:21.405 UTC [768] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:37:21.406 UTC [768] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:37:21.406 UTC [768] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:37:21.406 UTC [768] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:37:21.408 UTC [768] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:37:21.408 UTC [768] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:37:21.408 UTC [768] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:37:21.409 UTC [768] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:37:21.413 UTC [768] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:37:21.415 UTC [768] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:37:21.415 UTC [768] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:37:21.418 UTC [768] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:37:21.420 UTC [768] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:37:21.420 UTC [768] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:37:21.423 UTC [768] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:37:21.426 UTC [768] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:37:21.427 UTC [768] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:37:21.427 UTC [768] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:37:21.430 UTC [768] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:37:21.431 UTC [768] DEBUG:  building index "pg_toast_34008_index" on table "pg_toast_34008" serially
2025-04-19 07:37:21.432 UTC [768] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:37:21.433 UTC [768] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:37:21.433 UTC [768] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:37:21.434 UTC [768] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:37:21.436 UTC [768] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:37:21.437 UTC [768] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:37:21.437 UTC [768] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:37:21.439 UTC [768] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:37:21.441 UTC [768] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:37:21.441 UTC [768] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:37:21.453 UTC [768] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:37:21.458 UTC [768] DEBUG:  building index "pg_toast_34041_index" on table "pg_toast_34041" serially
2025-04-19 07:37:21.461 UTC [768] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:37:21.462 UTC [768] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:37:21.462 UTC [768] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:37:21.465 UTC [768] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:37:21.468 UTC [768] DEBUG:  building index "pg_toast_34052_index" on table "pg_toast_34052" serially
2025-04-19 07:37:21.471 UTC [768] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:37:21.471 UTC [768] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:37:21.471 UTC [768] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:37:21.475 UTC [768] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:37:21.477 UTC [768] DEBUG:  building index "pg_toast_34075_index" on table "pg_toast_34075" serially
2025-04-19 07:37:21.478 UTC [768] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:37:21.479 UTC [768] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:37:21.479 UTC [768] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:37:21.480 UTC [768] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:37:21.480 UTC [768] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:37:21.487 UTC [768] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:37:21.488 UTC [768] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:37:21.489 UTC [768] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:37:21.489 UTC [768] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:37:21.491 UTC [768] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:37:21.491 UTC [768] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:37:21.493 UTC [768] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:37:21.493 UTC [768] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:37:21.496 UTC [768] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:37:21.496 UTC [768] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:37:21.497 UTC [768] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:37:21.497 UTC [768] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:37:21.499 UTC [768] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:37:21.499 UTC [768] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:37:21.500 UTC [768] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:37:21.500 UTC [768] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:37:21.502 UTC [768] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:37:21.502 UTC [768] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:37:21.504 UTC [768] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:37:21.504 UTC [768] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:37:21.515 UTC [768] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:37:21.770 UTC [768] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$MIOuDxGdzrtca1lhjski3ulsFk4xVzFmFFzTEMWAG5Ek3yH72Fp7C')
	                RETURNING id, username, email
	                
2025-04-19 07:37:21.771 UTC [768] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:37:21.772 UTC [768] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:37:33.052 UTC [768] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 07:37:33.416 UTC [768] DEBUG:  unexpected EOF on client connection
2025-04-19 07:37:35.522 UTC [776] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:37:35.529 UTC [776] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:37:35.535 UTC [776] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:37:35.535 UTC [776] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:37:35.541 UTC [776] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:37:35.545 UTC [776] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:37:35.547 UTC [776] DEBUG:  building index "pg_toast_34111_index" on table "pg_toast_34111" serially
2025-04-19 07:37:35.549 UTC [776] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:37:35.550 UTC [776] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:37:35.550 UTC [776] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:37:35.551 UTC [776] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:37:35.551 UTC [776] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:37:35.551 UTC [776] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:37:35.552 UTC [776] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:37:35.552 UTC [776] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:37:35.552 UTC [776] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:37:35.553 UTC [776] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:37:35.554 UTC [776] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:37:35.554 UTC [776] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:37:35.554 UTC [776] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:37:35.555 UTC [776] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:37:35.555 UTC [776] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:37:35.555 UTC [776] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:37:35.556 UTC [776] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:37:35.557 UTC [776] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:37:35.557 UTC [776] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:37:35.557 UTC [776] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:37:35.558 UTC [776] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:37:35.558 UTC [776] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:37:35.558 UTC [776] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:37:35.560 UTC [776] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:37:35.561 UTC [776] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:37:35.561 UTC [776] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:37:35.561 UTC [776] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:37:35.562 UTC [776] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:37:35.564 UTC [776] DEBUG:  building index "pg_toast_34172_index" on table "pg_toast_34172" serially
2025-04-19 07:37:35.565 UTC [776] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:37:35.565 UTC [776] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:37:35.565 UTC [776] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:37:35.566 UTC [776] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:37:35.567 UTC [776] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:37:35.567 UTC [776] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:37:35.567 UTC [776] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:37:35.568 UTC [776] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:37:35.568 UTC [776] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:37:35.568 UTC [776] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:37:35.569 UTC [776] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:37:35.570 UTC [776] DEBUG:  building index "pg_toast_34205_index" on table "pg_toast_34205" serially
2025-04-19 07:37:35.571 UTC [776] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:37:35.571 UTC [776] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:37:35.571 UTC [776] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:37:35.572 UTC [776] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:37:35.573 UTC [776] DEBUG:  building index "pg_toast_34216_index" on table "pg_toast_34216" serially
2025-04-19 07:37:35.574 UTC [776] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:37:35.574 UTC [776] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:37:35.574 UTC [776] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:37:35.576 UTC [776] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:37:35.577 UTC [776] DEBUG:  building index "pg_toast_34239_index" on table "pg_toast_34239" serially
2025-04-19 07:37:35.578 UTC [776] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:37:35.578 UTC [776] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:37:35.578 UTC [776] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:37:35.579 UTC [776] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:37:35.579 UTC [776] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:37:35.580 UTC [776] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:37:35.580 UTC [776] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:37:35.581 UTC [776] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:37:35.581 UTC [776] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:37:35.582 UTC [776] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:37:35.582 UTC [776] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:37:35.583 UTC [776] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:37:35.583 UTC [776] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:37:35.584 UTC [776] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:37:35.584 UTC [776] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:37:35.585 UTC [776] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:37:35.585 UTC [776] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:37:35.586 UTC [776] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:37:35.586 UTC [776] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:37:35.587 UTC [776] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:37:35.587 UTC [776] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:37:35.588 UTC [776] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:37:35.588 UTC [776] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:37:35.589 UTC [776] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:37:35.589 UTC [776] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:37:35.601 UTC [776] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:37:35.887 UTC [776] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$.vv2NTeu5kZGGCwdLjEX..JSu7ku3lqr9LnLK5YaXbQHdR5d9igMm')
	                RETURNING id, username, email
	                
2025-04-19 07:37:35.889 UTC [776] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:37:35.889 UTC [776] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:37:35.890 UTC [776] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 07:37:35.900 UTC [776] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:37:35.901 UTC [776] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:37:35.908 UTC [776] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:37:35.914 UTC [776] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:37:35.914 UTC [776] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:37:35.917 UTC [776] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:37:35.922 UTC [776] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:37:35.924 UTC [776] DEBUG:  building index "pg_toast_34275_index" on table "pg_toast_34275" serially
2025-04-19 07:37:35.925 UTC [776] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:37:35.925 UTC [776] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:37:35.925 UTC [776] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:37:35.926 UTC [776] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:37:35.926 UTC [776] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:37:35.926 UTC [776] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:37:35.927 UTC [776] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:37:35.927 UTC [776] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:37:35.927 UTC [776] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:37:35.928 UTC [776] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:37:35.929 UTC [776] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:37:35.929 UTC [776] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:37:35.929 UTC [776] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:37:35.930 UTC [776] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:37:35.930 UTC [776] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:37:35.930 UTC [776] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:37:35.931 UTC [776] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:37:35.932 UTC [776] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:37:35.932 UTC [776] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:37:35.932 UTC [776] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:37:35.933 UTC [776] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:37:35.933 UTC [776] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:37:35.933 UTC [776] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:37:35.935 UTC [776] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:37:35.936 UTC [776] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:37:35.936 UTC [776] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:37:35.936 UTC [776] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:37:35.938 UTC [776] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:37:35.939 UTC [776] DEBUG:  building index "pg_toast_34336_index" on table "pg_toast_34336" serially
2025-04-19 07:37:35.939 UTC [776] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:37:35.939 UTC [776] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:37:35.939 UTC [776] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:37:35.941 UTC [776] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:37:35.942 UTC [776] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:37:35.943 UTC [776] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:37:35.943 UTC [776] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:37:35.943 UTC [776] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:37:35.944 UTC [776] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:37:35.944 UTC [776] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:37:35.945 UTC [776] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:37:35.946 UTC [776] DEBUG:  building index "pg_toast_34369_index" on table "pg_toast_34369" serially
2025-04-19 07:37:35.947 UTC [776] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:37:35.948 UTC [776] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:37:35.948 UTC [776] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:37:35.948 UTC [776] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:37:35.950 UTC [776] DEBUG:  building index "pg_toast_34380_index" on table "pg_toast_34380" serially
2025-04-19 07:37:35.950 UTC [776] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:37:35.951 UTC [776] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:37:35.951 UTC [776] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:37:35.952 UTC [776] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:37:35.953 UTC [776] DEBUG:  building index "pg_toast_34403_index" on table "pg_toast_34403" serially
2025-04-19 07:37:35.954 UTC [776] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:37:35.954 UTC [776] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:37:35.954 UTC [776] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:37:35.955 UTC [776] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:37:35.955 UTC [776] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:37:35.955 UTC [776] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:37:35.956 UTC [776] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:37:35.956 UTC [776] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:37:35.956 UTC [776] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:37:35.958 UTC [776] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:37:35.958 UTC [776] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:37:35.959 UTC [776] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:37:35.959 UTC [776] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:37:35.960 UTC [776] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:37:35.960 UTC [776] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:37:35.961 UTC [776] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:37:35.961 UTC [776] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:37:35.963 UTC [776] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:37:35.963 UTC [776] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:37:35.964 UTC [776] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:37:35.964 UTC [776] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:37:35.965 UTC [776] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:37:35.965 UTC [776] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:37:35.966 UTC [776] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:37:35.966 UTC [776] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:37:35.974 UTC [776] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:37:36.222 UTC [776] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$ukNmxIdnY1Q2usKQwrbv3OLivuCkkb.c.VeK0pT0U1JPwOkIGOI4O')
	                RETURNING id, username, email
	                
2025-04-19 07:37:36.222 UTC [776] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:37:36.223 UTC [776] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:37:49.163 UTC [776] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 07:37:49.547 UTC [776] DEBUG:  unexpected EOF on client connection
2025-04-19 07:37:50.394 UTC [784] DEBUG:  autovacuum: processing database "powerball"
2025-04-19 07:37:50.453 UTC [59] DEBUG:  performing replication slot checkpoint
2025-04-19 07:37:50.633 UTC [784] DEBUG:  rehashing catalog cache id 14 for pg_opclass; 17 tups, 8 buckets
2025-04-19 07:37:51.705 UTC [792] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:37:51.720 UTC [792] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:37:51.731 UTC [792] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:37:51.731 UTC [792] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:37:51.735 UTC [792] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:37:51.740 UTC [792] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:37:51.743 UTC [792] DEBUG:  building index "pg_toast_34440_index" on table "pg_toast_34440" serially
2025-04-19 07:37:51.746 UTC [792] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:37:51.748 UTC [792] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:37:51.748 UTC [792] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:37:51.749 UTC [792] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:37:51.750 UTC [792] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:37:51.750 UTC [792] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:37:51.751 UTC [792] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:37:51.751 UTC [792] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:37:51.751 UTC [792] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:37:51.752 UTC [792] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:37:51.753 UTC [792] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:37:51.753 UTC [792] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:37:51.753 UTC [792] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:37:51.754 UTC [792] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:37:51.754 UTC [792] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:37:51.755 UTC [792] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:37:51.755 UTC [792] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:37:51.756 UTC [792] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:37:51.756 UTC [792] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:37:51.756 UTC [792] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:37:51.757 UTC [792] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:37:51.758 UTC [792] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:37:51.758 UTC [792] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:37:51.759 UTC [792] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:37:51.760 UTC [792] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:37:51.761 UTC [792] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:37:51.761 UTC [792] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:37:51.762 UTC [792] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:37:51.764 UTC [792] DEBUG:  building index "pg_toast_34501_index" on table "pg_toast_34501" serially
2025-04-19 07:37:51.765 UTC [792] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:37:51.765 UTC [792] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:37:51.765 UTC [792] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:37:51.767 UTC [792] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:37:51.768 UTC [792] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:37:51.769 UTC [792] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:37:51.769 UTC [792] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:37:51.769 UTC [792] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:37:51.769 UTC [792] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:37:51.770 UTC [792] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:37:51.771 UTC [792] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:37:51.773 UTC [792] DEBUG:  building index "pg_toast_34534_index" on table "pg_toast_34534" serially
2025-04-19 07:37:51.774 UTC [792] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:37:51.775 UTC [792] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:37:51.775 UTC [792] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:37:51.776 UTC [792] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:37:51.777 UTC [792] DEBUG:  building index "pg_toast_34545_index" on table "pg_toast_34545" serially
2025-04-19 07:37:51.778 UTC [792] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:37:51.778 UTC [792] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:37:51.778 UTC [792] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:37:51.780 UTC [792] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:37:51.780 UTC [792] DEBUG:  building index "pg_toast_34568_index" on table "pg_toast_34568" serially
2025-04-19 07:37:51.781 UTC [792] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:37:51.782 UTC [792] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:37:51.782 UTC [792] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:37:51.783 UTC [792] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:37:51.783 UTC [792] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:37:51.783 UTC [792] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:37:51.783 UTC [792] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:37:51.784 UTC [792] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:37:51.784 UTC [792] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:37:51.785 UTC [792] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:37:51.785 UTC [792] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:37:51.786 UTC [792] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:37:51.786 UTC [792] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:37:51.787 UTC [792] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:37:51.787 UTC [792] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:37:51.788 UTC [792] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:37:51.788 UTC [792] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:37:51.789 UTC [792] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:37:51.789 UTC [792] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:37:51.790 UTC [792] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:37:51.790 UTC [792] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:37:51.791 UTC [792] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:37:51.791 UTC [792] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:37:51.792 UTC [792] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:37:51.792 UTC [792] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:37:51.806 UTC [792] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:37:52.077 UTC [792] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$ey8/3uKSKAPJF1KZuPyWBu/Eer5rKPqlQv94L3NOZ65FsOey4na0G')
	                RETURNING id, username, email
	                
2025-04-19 07:37:52.078 UTC [792] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:37:52.079 UTC [792] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:37:52.080 UTC [792] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 07:37:52.091 UTC [792] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:37:52.093 UTC [792] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:37:52.096 UTC [792] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:37:52.100 UTC [792] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:37:52.100 UTC [792] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:37:52.106 UTC [792] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:37:52.111 UTC [792] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:37:52.112 UTC [792] DEBUG:  building index "pg_toast_34604_index" on table "pg_toast_34604" serially
2025-04-19 07:37:52.113 UTC [792] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:37:52.113 UTC [792] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:37:52.114 UTC [792] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:37:52.114 UTC [792] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:37:52.114 UTC [792] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:37:52.114 UTC [792] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:37:52.115 UTC [792] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:37:52.115 UTC [792] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:37:52.115 UTC [792] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:37:52.116 UTC [792] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:37:52.117 UTC [792] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:37:52.117 UTC [792] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:37:52.117 UTC [792] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:37:52.118 UTC [792] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:37:52.118 UTC [792] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:37:52.118 UTC [792] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:37:52.119 UTC [792] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:37:52.120 UTC [792] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:37:52.120 UTC [792] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:37:52.120 UTC [792] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:37:52.121 UTC [792] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:37:52.121 UTC [792] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:37:52.121 UTC [792] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:37:52.122 UTC [792] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:37:52.122 UTC [792] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:37:52.123 UTC [792] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:37:52.123 UTC [792] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:37:52.124 UTC [792] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:37:52.125 UTC [792] DEBUG:  building index "pg_toast_34665_index" on table "pg_toast_34665" serially
2025-04-19 07:37:52.125 UTC [792] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:37:52.125 UTC [792] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:37:52.125 UTC [792] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:37:52.127 UTC [792] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:37:52.127 UTC [792] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:37:52.128 UTC [792] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:37:52.128 UTC [792] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:37:52.128 UTC [792] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:37:52.128 UTC [792] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:37:52.128 UTC [792] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:37:52.129 UTC [792] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:37:52.130 UTC [792] DEBUG:  building index "pg_toast_34698_index" on table "pg_toast_34698" serially
2025-04-19 07:37:52.131 UTC [792] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:37:52.131 UTC [792] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:37:52.131 UTC [792] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:37:52.132 UTC [792] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:37:52.133 UTC [792] DEBUG:  building index "pg_toast_34709_index" on table "pg_toast_34709" serially
2025-04-19 07:37:52.134 UTC [792] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:37:52.135 UTC [792] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:37:52.135 UTC [792] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:37:52.137 UTC [792] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:37:52.140 UTC [792] DEBUG:  building index "pg_toast_34732_index" on table "pg_toast_34732" serially
2025-04-19 07:37:52.141 UTC [792] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:37:52.141 UTC [792] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:37:52.141 UTC [792] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:37:52.142 UTC [792] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:37:52.142 UTC [792] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:37:52.143 UTC [792] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:37:52.143 UTC [792] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:37:52.145 UTC [792] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:37:52.145 UTC [792] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:37:52.146 UTC [792] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:37:52.146 UTC [792] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:37:52.147 UTC [792] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:37:52.147 UTC [792] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:37:52.148 UTC [792] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:37:52.148 UTC [792] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:37:52.149 UTC [792] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:37:52.149 UTC [792] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:37:52.149 UTC [792] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:37:52.149 UTC [792] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:37:52.150 UTC [792] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:37:52.150 UTC [792] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:37:52.151 UTC [792] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:37:52.151 UTC [792] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:37:52.152 UTC [792] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:37:52.152 UTC [792] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:37:52.161 UTC [792] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:37:52.407 UTC [792] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$Lskj5oKMA1He9TGgqniD8uFjKOTU7TDaWViFEd7cTDYppeLW8U3PK')
	                RETURNING id, username, email
	                
2025-04-19 07:37:52.408 UTC [792] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:37:52.408 UTC [792] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:38:05.199 UTC [792] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 07:38:05.478 UTC [792] DEBUG:  unexpected EOF on client connection
2025-04-19 07:38:07.374 UTC [800] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:38:07.384 UTC [800] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:38:07.391 UTC [800] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:38:07.391 UTC [800] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:38:07.397 UTC [800] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:38:07.405 UTC [800] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:38:07.408 UTC [800] DEBUG:  building index "pg_toast_34768_index" on table "pg_toast_34768" serially
2025-04-19 07:38:07.411 UTC [800] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:38:07.412 UTC [800] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:38:07.412 UTC [800] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:38:07.413 UTC [800] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:38:07.413 UTC [800] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:38:07.413 UTC [800] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:38:07.414 UTC [800] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:38:07.414 UTC [800] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:38:07.414 UTC [800] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:38:07.415 UTC [800] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:38:07.416 UTC [800] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:38:07.416 UTC [800] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:38:07.416 UTC [800] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:38:07.417 UTC [800] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:38:07.417 UTC [800] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:38:07.417 UTC [800] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:38:07.418 UTC [800] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:38:07.419 UTC [800] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:38:07.419 UTC [800] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:38:07.419 UTC [800] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:38:07.420 UTC [800] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:38:07.420 UTC [800] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:38:07.420 UTC [800] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:38:07.422 UTC [800] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:38:07.423 UTC [800] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:38:07.423 UTC [800] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:38:07.424 UTC [800] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:38:07.425 UTC [800] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:38:07.427 UTC [800] DEBUG:  building index "pg_toast_34829_index" on table "pg_toast_34829" serially
2025-04-19 07:38:07.428 UTC [800] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:38:07.428 UTC [800] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:38:07.428 UTC [800] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:38:07.430 UTC [800] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:38:07.432 UTC [800] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:38:07.432 UTC [800] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:38:07.432 UTC [800] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:38:07.433 UTC [800] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:38:07.433 UTC [800] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:38:07.433 UTC [800] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:38:07.436 UTC [800] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:38:07.438 UTC [800] DEBUG:  building index "pg_toast_34862_index" on table "pg_toast_34862" serially
2025-04-19 07:38:07.439 UTC [800] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:38:07.439 UTC [800] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:38:07.440 UTC [800] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:38:07.441 UTC [800] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:38:07.443 UTC [800] DEBUG:  building index "pg_toast_34873_index" on table "pg_toast_34873" serially
2025-04-19 07:38:07.444 UTC [800] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:38:07.445 UTC [800] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:38:07.445 UTC [800] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:38:07.447 UTC [800] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:38:07.449 UTC [800] DEBUG:  building index "pg_toast_34896_index" on table "pg_toast_34896" serially
2025-04-19 07:38:07.450 UTC [800] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:38:07.451 UTC [800] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:38:07.451 UTC [800] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:38:07.451 UTC [800] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:38:07.451 UTC [800] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:38:07.452 UTC [800] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:38:07.452 UTC [800] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:38:07.453 UTC [800] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:38:07.453 UTC [800] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:38:07.454 UTC [800] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:38:07.454 UTC [800] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:38:07.455 UTC [800] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:38:07.455 UTC [800] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:38:07.457 UTC [800] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:38:07.457 UTC [800] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:38:07.458 UTC [800] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:38:07.458 UTC [800] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:38:07.459 UTC [800] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:38:07.459 UTC [800] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:38:07.461 UTC [800] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:38:07.461 UTC [800] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:38:07.462 UTC [800] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:38:07.462 UTC [800] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:38:07.463 UTC [800] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:38:07.463 UTC [800] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:38:07.476 UTC [800] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:38:07.750 UTC [800] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$.VKQscJYw1b2D9C7ODw44u/b9moBdkWu.3CGYxWsgpiFCqFOKGmJK')
	                RETURNING id, username, email
	                
2025-04-19 07:38:07.753 UTC [800] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:38:07.754 UTC [800] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:38:07.755 UTC [800] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 07:38:07.777 UTC [800] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:38:07.779 UTC [800] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:38:07.781 UTC [800] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:38:07.786 UTC [800] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:38:07.786 UTC [800] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:38:07.790 UTC [800] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:38:07.793 UTC [800] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:38:07.794 UTC [800] DEBUG:  building index "pg_toast_34932_index" on table "pg_toast_34932" serially
2025-04-19 07:38:07.795 UTC [800] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:38:07.795 UTC [800] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:38:07.795 UTC [800] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:38:07.796 UTC [800] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:38:07.796 UTC [800] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:38:07.796 UTC [800] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:38:07.797 UTC [800] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:38:07.797 UTC [800] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:38:07.797 UTC [800] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:38:07.798 UTC [800] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:38:07.798 UTC [800] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:38:07.798 UTC [800] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:38:07.798 UTC [800] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:38:07.799 UTC [800] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:38:07.799 UTC [800] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:38:07.799 UTC [800] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:38:07.800 UTC [800] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:38:07.801 UTC [800] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:38:07.801 UTC [800] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:38:07.801 UTC [800] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:38:07.802 UTC [800] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:38:07.802 UTC [800] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:38:07.802 UTC [800] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:38:07.803 UTC [800] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:38:07.804 UTC [800] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:38:07.804 UTC [800] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:38:07.804 UTC [800] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:38:07.805 UTC [800] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:38:07.806 UTC [800] DEBUG:  building index "pg_toast_34993_index" on table "pg_toast_34993" serially
2025-04-19 07:38:07.807 UTC [800] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:38:07.807 UTC [800] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:38:07.807 UTC [800] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:38:07.808 UTC [800] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:38:07.809 UTC [800] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:38:07.809 UTC [800] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:38:07.809 UTC [800] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:38:07.810 UTC [800] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:38:07.810 UTC [800] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:38:07.810 UTC [800] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:38:07.811 UTC [800] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:38:07.813 UTC [800] DEBUG:  building index "pg_toast_35026_index" on table "pg_toast_35026" serially
2025-04-19 07:38:07.814 UTC [800] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:38:07.814 UTC [800] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:38:07.814 UTC [800] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:38:07.814 UTC [800] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:38:07.816 UTC [800] DEBUG:  building index "pg_toast_35037_index" on table "pg_toast_35037" serially
2025-04-19 07:38:07.816 UTC [800] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:38:07.817 UTC [800] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:38:07.817 UTC [800] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:38:07.818 UTC [800] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:38:07.819 UTC [800] DEBUG:  building index "pg_toast_35060_index" on table "pg_toast_35060" serially
2025-04-19 07:38:07.820 UTC [800] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:38:07.821 UTC [800] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:38:07.821 UTC [800] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:38:07.822 UTC [800] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:38:07.822 UTC [800] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:38:07.822 UTC [800] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:38:07.823 UTC [800] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:38:07.823 UTC [800] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:38:07.823 UTC [800] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:38:07.824 UTC [800] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:38:07.824 UTC [800] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:38:07.825 UTC [800] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:38:07.825 UTC [800] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:38:07.826 UTC [800] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:38:07.826 UTC [800] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:38:07.827 UTC [800] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:38:07.827 UTC [800] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:38:07.828 UTC [800] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:38:07.828 UTC [800] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:38:07.828 UTC [800] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:38:07.828 UTC [800] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:38:07.829 UTC [800] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:38:07.829 UTC [800] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:38:07.830 UTC [800] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:38:07.830 UTC [800] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:38:07.837 UTC [800] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:38:08.083 UTC [800] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$g5l4mO5GqEEkM6KA8N1KLe6JB8NnPxgT14QdZywc8xr875rTQwi.S')
	                RETURNING id, username, email
	                
2025-04-19 07:38:08.084 UTC [800] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:38:08.085 UTC [800] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:38:17.882 UTC [808] LOG:  statement: SHOW server_version;
2025-04-19 07:38:17.899 UTC [809] LOG:  statement: SELECT datname FROM pg_database WHERE datistemplate = false order by datname ASC;
2025-04-19 07:38:20.411 UTC [810] DEBUG:  autovacuum: processing database "postgres"
2025-04-19 07:38:21.143 UTC [800] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 07:38:21.460 UTC [800] DEBUG:  unexpected EOF on client connection
2025-04-19 07:38:23.376 UTC [817] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:38:23.390 UTC [817] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:38:23.401 UTC [817] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:38:23.401 UTC [817] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:38:23.405 UTC [817] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:38:23.408 UTC [817] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:38:23.411 UTC [817] DEBUG:  building index "pg_toast_35096_index" on table "pg_toast_35096" serially
2025-04-19 07:38:23.413 UTC [817] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:38:23.413 UTC [817] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:38:23.413 UTC [817] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:38:23.414 UTC [817] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:38:23.414 UTC [817] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:38:23.414 UTC [817] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:38:23.415 UTC [817] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:38:23.415 UTC [817] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:38:23.415 UTC [817] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:38:23.416 UTC [817] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:38:23.417 UTC [817] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:38:23.417 UTC [817] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:38:23.417 UTC [817] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:38:23.418 UTC [817] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:38:23.418 UTC [817] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:38:23.418 UTC [817] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:38:23.419 UTC [817] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:38:23.420 UTC [817] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:38:23.420 UTC [817] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:38:23.420 UTC [817] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:38:23.421 UTC [817] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:38:23.422 UTC [817] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:38:23.422 UTC [817] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:38:23.424 UTC [817] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:38:23.426 UTC [817] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:38:23.426 UTC [817] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:38:23.426 UTC [817] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:38:23.427 UTC [817] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:38:23.429 UTC [817] DEBUG:  building index "pg_toast_35157_index" on table "pg_toast_35157" serially
2025-04-19 07:38:23.430 UTC [817] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:38:23.430 UTC [817] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:38:23.430 UTC [817] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:38:23.432 UTC [817] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:38:23.433 UTC [817] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:38:23.433 UTC [817] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:38:23.433 UTC [817] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:38:23.434 UTC [817] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:38:23.435 UTC [817] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:38:23.435 UTC [817] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:38:23.436 UTC [817] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:38:23.437 UTC [817] DEBUG:  building index "pg_toast_35190_index" on table "pg_toast_35190" serially
2025-04-19 07:38:23.438 UTC [817] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:38:23.438 UTC [817] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:38:23.438 UTC [817] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:38:23.439 UTC [817] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:38:23.440 UTC [817] DEBUG:  building index "pg_toast_35201_index" on table "pg_toast_35201" serially
2025-04-19 07:38:23.441 UTC [817] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:38:23.441 UTC [817] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:38:23.441 UTC [817] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:38:23.443 UTC [817] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:38:23.444 UTC [817] DEBUG:  building index "pg_toast_35224_index" on table "pg_toast_35224" serially
2025-04-19 07:38:23.446 UTC [817] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:38:23.446 UTC [817] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:38:23.446 UTC [817] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:38:23.447 UTC [817] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:38:23.447 UTC [817] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:38:23.447 UTC [817] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:38:23.447 UTC [817] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:38:23.448 UTC [817] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:38:23.448 UTC [817] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:38:23.449 UTC [817] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:38:23.449 UTC [817] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:38:23.450 UTC [817] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:38:23.450 UTC [817] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:38:23.451 UTC [817] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:38:23.451 UTC [817] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:38:23.452 UTC [817] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:38:23.452 UTC [817] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:38:23.452 UTC [817] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:38:23.452 UTC [817] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:38:23.453 UTC [817] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:38:23.453 UTC [817] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:38:23.454 UTC [817] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:38:23.454 UTC [817] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:38:23.455 UTC [817] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:38:23.455 UTC [817] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:38:23.467 UTC [817] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:38:23.736 UTC [817] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$wXhwPQbpAY7P14umhcew6ec4xmGfmzrogIyaLK1hzRDyVec5XiZ4y')
	                RETURNING id, username, email
	                
2025-04-19 07:38:23.736 UTC [817] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:38:23.737 UTC [817] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:38:23.737 UTC [817] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 07:38:23.746 UTC [817] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:38:23.748 UTC [817] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:38:23.750 UTC [817] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:38:23.755 UTC [817] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:38:23.755 UTC [817] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:38:23.759 UTC [817] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:38:23.763 UTC [817] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:38:23.764 UTC [817] DEBUG:  building index "pg_toast_35260_index" on table "pg_toast_35260" serially
2025-04-19 07:38:23.765 UTC [817] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:38:23.766 UTC [817] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:38:23.766 UTC [817] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:38:23.766 UTC [817] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:38:23.767 UTC [817] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:38:23.767 UTC [817] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:38:23.767 UTC [817] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:38:23.767 UTC [817] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:38:23.767 UTC [817] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:38:23.768 UTC [817] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:38:23.769 UTC [817] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:38:23.769 UTC [817] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:38:23.769 UTC [817] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:38:23.770 UTC [817] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:38:23.770 UTC [817] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:38:23.770 UTC [817] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:38:23.771 UTC [817] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:38:23.772 UTC [817] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:38:23.772 UTC [817] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:38:23.772 UTC [817] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:38:23.773 UTC [817] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:38:23.773 UTC [817] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:38:23.773 UTC [817] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:38:23.774 UTC [817] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:38:23.775 UTC [817] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:38:23.775 UTC [817] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:38:23.775 UTC [817] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:38:23.776 UTC [817] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:38:23.778 UTC [817] DEBUG:  building index "pg_toast_35321_index" on table "pg_toast_35321" serially
2025-04-19 07:38:23.779 UTC [817] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:38:23.779 UTC [817] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:38:23.779 UTC [817] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:38:23.780 UTC [817] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:38:23.781 UTC [817] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:38:23.781 UTC [817] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:38:23.781 UTC [817] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:38:23.782 UTC [817] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:38:23.782 UTC [817] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:38:23.782 UTC [817] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:38:23.783 UTC [817] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:38:23.784 UTC [817] DEBUG:  building index "pg_toast_35354_index" on table "pg_toast_35354" serially
2025-04-19 07:38:23.785 UTC [817] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:38:23.785 UTC [817] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:38:23.785 UTC [817] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:38:23.786 UTC [817] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:38:23.788 UTC [817] DEBUG:  building index "pg_toast_35365_index" on table "pg_toast_35365" serially
2025-04-19 07:38:23.792 UTC [817] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:38:23.792 UTC [817] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:38:23.792 UTC [817] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:38:23.795 UTC [817] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:38:23.796 UTC [817] DEBUG:  building index "pg_toast_35388_index" on table "pg_toast_35388" serially
2025-04-19 07:38:23.797 UTC [817] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:38:23.798 UTC [817] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:38:23.798 UTC [817] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:38:23.799 UTC [817] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:38:23.799 UTC [817] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:38:23.802 UTC [817] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:38:23.802 UTC [817] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:38:23.803 UTC [817] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:38:23.803 UTC [817] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:38:23.806 UTC [817] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:38:23.806 UTC [817] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:38:23.807 UTC [817] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:38:23.807 UTC [817] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:38:23.809 UTC [817] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:38:23.809 UTC [817] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:38:23.811 UTC [817] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:38:23.811 UTC [817] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:38:23.812 UTC [817] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:38:23.812 UTC [817] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:38:23.814 UTC [817] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:38:23.814 UTC [817] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:38:23.817 UTC [817] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:38:23.817 UTC [817] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:38:23.822 UTC [817] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:38:23.822 UTC [817] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:38:23.845 UTC [817] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:38:23.848 UTC [818] LOG:  statement: SELECT
	    c.conname AS constraint_name,
	    sch.nspname AS table_schema,
	    tbl.relname AS table_name,
	    (col.attname) as column_name,
	    f_tbl.relname AS referenced_table,
	    (f_col.attname) as referenced_column,
	    c.confupdtype AS "updateRule",
	    c.confdeltype AS "deleteRule"
	FROM pg_constraint c
	LEFT JOIN LATERAL UNNEST(c.conkey)
	    WITH ORDINALITY AS u(attnum, attposition)
	    ON TRUE
	LEFT JOIN LATERAL UNNEST(c.confkey)
	    WITH ORDINALITY AS f_u(attnum, attposition)
	    ON f_u.attposition = u.attposition
	JOIN pg_class tbl ON tbl.oid = c.conrelid
	JOIN pg_namespace sch ON sch.oid = tbl.relnamespace
	LEFT JOIN pg_attribute col
	    ON (col.attrelid = tbl.oid AND col.attnum = u.attnum)
	LEFT JOIN pg_class f_tbl ON f_tbl.oid = c.confrelid
	LEFT JOIN pg_namespace f_sch ON f_sch.oid = f_tbl.relnamespace
	LEFT JOIN pg_attribute f_col
	    ON (f_col.attrelid = f_tbl.oid AND f_col.attnum = f_u.attnum)
	WHERE c.contype = 'f'
2025-04-19 07:38:23.896 UTC [819] LOG:  statement: SELECT nspname "schema" from pg_catalog.pg_namespace order by nspname ASC;
2025-04-19 07:38:24.123 UTC [817] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$gYv3MaouI12Q23HlA05rUeejHjIs/6N0K7EW8nThxg0r5tfHYcHcq')
	                RETURNING id, username, email
	                
2025-04-19 07:38:24.124 UTC [817] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:38:24.125 UTC [817] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:38:25.623 UTC [820] LOG:  statement: SELECT
	    c.conname AS constraint_name,
	    sch.nspname AS table_schema,
	    tbl.relname AS table_name,
	    (col.attname) as column_name,
	    f_tbl.relname AS referenced_table,
	    (f_col.attname) as referenced_column,
	    c.confupdtype AS "updateRule",
	    c.confdeltype AS "deleteRule"
	FROM pg_constraint c
	LEFT JOIN LATERAL UNNEST(c.conkey)
	    WITH ORDINALITY AS u(attnum, attposition)
	    ON TRUE
	LEFT JOIN LATERAL UNNEST(c.confkey)
	    WITH ORDINALITY AS f_u(attnum, attposition)
	    ON f_u.attposition = u.attposition
	JOIN pg_class tbl ON tbl.oid = c.conrelid
	JOIN pg_namespace sch ON sch.oid = tbl.relnamespace
	LEFT JOIN pg_attribute col
	    ON (col.attrelid = tbl.oid AND col.attnum = u.attnum)
	LEFT JOIN pg_class f_tbl ON f_tbl.oid = c.confrelid
	LEFT JOIN pg_namespace f_sch ON f_sch.oid = f_tbl.relnamespace
	LEFT JOIN pg_attribute f_col
	    ON (f_col.attrelid = f_tbl.oid AND f_col.attnum = f_u.attnum)
	WHERE c.contype = 'f'
2025-04-19 07:38:25.657 UTC [809] LOG:  statement: SELECT nspname "schema" from pg_catalog.pg_namespace order by nspname ASC;
2025-04-19 07:38:32.755 UTC [809] LOG:  statement: set search_path to 'public';
2025-04-19 07:38:32.758 UTC [809] LOG:  statement: SELECT t.table_name "name", 
	    pg_catalog.obj_description(pgc.oid, 'pg_class') "comment",
	    pgc.reltuples "table_rows",
	    pg_total_relation_size(quote_ident(table_name)) AS "data_length"
	FROM information_schema.tables t
	JOIN pg_catalog.pg_class pgc ON t.table_name = pgc.relname 
	JOIN pg_catalog.pg_namespace pgn ON pgn.oid=pgc.relnamespace and pgn.nspname=t.table_schema
	WHERE t.table_type='BASE TABLE'
	AND t.table_schema='public' order by t.table_name;
2025-04-19 07:38:35.992 UTC [808] LOG:  statement: set search_path to 'public';
2025-04-19 07:38:35.996 UTC [808] LOG:  statement: SELECT * FROM draws LIMIT 100
2025-04-19 07:38:36.073 UTC [809] LOG:  statement: SELECT 
	          
	          c.COLUMN_NAME "name", 
	          atttypid::regtype AS pg_reg_type,
	          DATA_TYPE "type",
	          IS_NULLABLE nullable, 
	          numeric_precision "precision",
	          numeric_scale "scale",
	          CHARACTER_MAXIMUM_LENGTH "maximum_length", 
	          COLUMN_DEFAULT "defaultValue", 
	          pg_catalog.col_description(pgc.oid, c.ordinal_position::int) AS "comment",
	          tc.constraint_type "key",
	          tc.constraint_name "constraint_name",
	          cc.table_name "referenced_table",
	          cc.column_name "referenced_column",
	          pa.*
	        FROM information_schema.columns c
	        JOIN pg_catalog.pg_class pgc ON c.table_name = pgc.relname 
	        JOIN pg_catalog.pg_namespace pgn ON pgn.oid=pgc.relnamespace and pgn.nspname=c.table_schema
	        JOIN pg_attribute pa on pa.attname =c.column_name and pa.attrelid =pgc.oid 
	        LEFT JOIN information_schema.key_column_usage ccu on ccu.table_schema=c.table_schema
	          and ccu.table_name=c.table_name and ccu.column_name=c.COLUMN_NAME
	        LEFT JOIN information_schema.table_constraints tc on tc.table_schema=c.table_schema 
	          and tc.table_name=c.table_name and tc.constraint_name=ccu.constraint_name
	        LEFT JOIN information_schema.constraint_column_usage cc on cc.table_schema=c.table_schema 
	          and cc.constraint_name=tc.constraint_name and  tc.constraint_type='FOREIGN KEY'
	        WHERE c.TABLE_SCHEMA = 'public' AND c.table_name = 'draws' 
	        ORDER BY c.ORDINAL_POSITION;
2025-04-19 07:38:37.184 UTC [817] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 07:38:37.485 UTC [817] DEBUG:  unexpected EOF on client connection
2025-04-19 07:38:39.712 UTC [828] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:38:39.718 UTC [828] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:38:39.727 UTC [828] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:38:39.727 UTC [828] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:38:39.736 UTC [828] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:38:39.743 UTC [828] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:38:39.746 UTC [828] DEBUG:  building index "pg_toast_35424_index" on table "pg_toast_35424" serially
2025-04-19 07:38:39.748 UTC [828] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:38:39.748 UTC [828] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:38:39.748 UTC [828] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:38:39.749 UTC [828] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:38:39.750 UTC [828] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:38:39.750 UTC [828] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:38:39.750 UTC [828] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:38:39.751 UTC [828] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:38:39.751 UTC [828] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:38:39.751 UTC [828] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:38:39.752 UTC [828] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:38:39.753 UTC [828] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:38:39.753 UTC [828] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:38:39.753 UTC [828] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:38:39.754 UTC [828] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:38:39.754 UTC [828] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:38:39.755 UTC [828] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:38:39.756 UTC [828] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:38:39.757 UTC [828] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:38:39.757 UTC [828] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:38:39.759 UTC [828] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:38:39.759 UTC [828] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:38:39.759 UTC [828] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:38:39.762 UTC [828] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:38:39.766 UTC [828] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:38:39.767 UTC [828] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:38:39.768 UTC [828] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:38:39.772 UTC [828] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:38:39.777 UTC [828] DEBUG:  building index "pg_toast_35485_index" on table "pg_toast_35485" serially
2025-04-19 07:38:39.778 UTC [828] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:38:39.778 UTC [828] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:38:39.778 UTC [828] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:38:39.780 UTC [828] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:38:39.782 UTC [828] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:38:39.782 UTC [828] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:38:39.782 UTC [828] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:38:39.783 UTC [828] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:38:39.783 UTC [828] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:38:39.783 UTC [828] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:38:39.785 UTC [828] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:38:39.786 UTC [828] DEBUG:  building index "pg_toast_35518_index" on table "pg_toast_35518" serially
2025-04-19 07:38:39.787 UTC [828] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:38:39.787 UTC [828] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:38:39.787 UTC [828] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:38:39.788 UTC [828] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:38:39.789 UTC [828] DEBUG:  building index "pg_toast_35529_index" on table "pg_toast_35529" serially
2025-04-19 07:38:39.790 UTC [828] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:38:39.790 UTC [828] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:38:39.790 UTC [828] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:38:39.792 UTC [828] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:38:39.793 UTC [828] DEBUG:  building index "pg_toast_35552_index" on table "pg_toast_35552" serially
2025-04-19 07:38:39.794 UTC [828] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:38:39.794 UTC [828] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:38:39.794 UTC [828] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:38:39.795 UTC [828] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:38:39.795 UTC [828] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:38:39.796 UTC [828] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:38:39.796 UTC [828] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:38:39.797 UTC [828] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:38:39.797 UTC [828] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:38:39.798 UTC [828] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:38:39.798 UTC [828] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:38:39.800 UTC [828] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:38:39.800 UTC [828] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:38:39.801 UTC [828] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:38:39.801 UTC [828] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:38:39.801 UTC [828] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:38:39.801 UTC [828] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:38:39.802 UTC [828] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:38:39.802 UTC [828] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:38:39.803 UTC [828] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:38:39.803 UTC [828] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:38:39.804 UTC [828] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:38:39.804 UTC [828] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:38:39.805 UTC [828] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:38:39.805 UTC [828] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:38:39.815 UTC [828] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:38:40.092 UTC [828] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$QiheAs.7i6qwWM51O2SZMOl9tLa9iyz9sahxLf.duKnv7mI4RAAzK')
	                RETURNING id, username, email
	                
2025-04-19 07:38:40.095 UTC [828] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:38:40.096 UTC [828] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:38:40.098 UTC [828] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 07:38:40.116 UTC [828] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:38:40.119 UTC [828] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:38:40.125 UTC [828] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:38:40.135 UTC [828] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:38:40.135 UTC [828] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:38:40.140 UTC [828] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:38:40.143 UTC [828] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:38:40.145 UTC [828] DEBUG:  building index "pg_toast_35588_index" on table "pg_toast_35588" serially
2025-04-19 07:38:40.146 UTC [828] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:38:40.146 UTC [828] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:38:40.146 UTC [828] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:38:40.147 UTC [828] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:38:40.147 UTC [828] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:38:40.147 UTC [828] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:38:40.148 UTC [828] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:38:40.148 UTC [828] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:38:40.148 UTC [828] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:38:40.149 UTC [828] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:38:40.149 UTC [828] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:38:40.150 UTC [828] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:38:40.150 UTC [828] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:38:40.150 UTC [828] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:38:40.151 UTC [828] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:38:40.151 UTC [828] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:38:40.152 UTC [828] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:38:40.154 UTC [828] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:38:40.155 UTC [828] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:38:40.155 UTC [828] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:38:40.155 UTC [828] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:38:40.156 UTC [828] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:38:40.156 UTC [828] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:38:40.157 UTC [828] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:38:40.158 UTC [828] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:38:40.158 UTC [828] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:38:40.158 UTC [828] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:38:40.159 UTC [828] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:38:40.160 UTC [828] DEBUG:  building index "pg_toast_35649_index" on table "pg_toast_35649" serially
2025-04-19 07:38:40.161 UTC [828] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:38:40.162 UTC [828] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:38:40.162 UTC [828] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:38:40.163 UTC [828] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:38:40.164 UTC [828] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:38:40.164 UTC [828] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:38:40.164 UTC [828] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:38:40.165 UTC [828] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:38:40.165 UTC [828] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:38:40.165 UTC [828] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:38:40.166 UTC [828] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:38:40.167 UTC [828] DEBUG:  building index "pg_toast_35682_index" on table "pg_toast_35682" serially
2025-04-19 07:38:40.167 UTC [828] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:38:40.168 UTC [828] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:38:40.168 UTC [828] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:38:40.169 UTC [828] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:38:40.172 UTC [828] DEBUG:  building index "pg_toast_35693_index" on table "pg_toast_35693" serially
2025-04-19 07:38:40.174 UTC [828] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:38:40.174 UTC [828] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:38:40.174 UTC [828] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:38:40.175 UTC [828] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:38:40.176 UTC [828] DEBUG:  building index "pg_toast_35716_index" on table "pg_toast_35716" serially
2025-04-19 07:38:40.177 UTC [828] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:38:40.177 UTC [828] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:38:40.177 UTC [828] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:38:40.178 UTC [828] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:38:40.178 UTC [828] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:38:40.179 UTC [828] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:38:40.179 UTC [828] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:38:40.180 UTC [828] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:38:40.180 UTC [828] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:38:40.181 UTC [828] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:38:40.181 UTC [828] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:38:40.181 UTC [828] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:38:40.181 UTC [828] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:38:40.182 UTC [828] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:38:40.183 UTC [828] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:38:40.184 UTC [828] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:38:40.184 UTC [828] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:38:40.185 UTC [828] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:38:40.185 UTC [828] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:38:40.185 UTC [828] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:38:40.185 UTC [828] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:38:40.186 UTC [828] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:38:40.186 UTC [828] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:38:40.187 UTC [828] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:38:40.187 UTC [828] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:38:40.196 UTC [828] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:38:40.274 UTC [808] LOG:  statement: SELECT * FROM numbers LIMIT 100
2025-04-19 07:38:40.286 UTC [809] LOG:  statement: SELECT 
	          
	          c.COLUMN_NAME "name", 
	          atttypid::regtype AS pg_reg_type,
	          DATA_TYPE "type",
	          IS_NULLABLE nullable, 
	          numeric_precision "precision",
	          numeric_scale "scale",
	          CHARACTER_MAXIMUM_LENGTH "maximum_length", 
	          COLUMN_DEFAULT "defaultValue", 
	          pg_catalog.col_description(pgc.oid, c.ordinal_position::int) AS "comment",
	          tc.constraint_type "key",
	          tc.constraint_name "constraint_name",
	          cc.table_name "referenced_table",
	          cc.column_name "referenced_column",
	          pa.*
	        FROM information_schema.columns c
	        JOIN pg_catalog.pg_class pgc ON c.table_name = pgc.relname 
	        JOIN pg_catalog.pg_namespace pgn ON pgn.oid=pgc.relnamespace and pgn.nspname=c.table_schema
	        JOIN pg_attribute pa on pa.attname =c.column_name and pa.attrelid =pgc.oid 
	        LEFT JOIN information_schema.key_column_usage ccu on ccu.table_schema=c.table_schema
	          and ccu.table_name=c.table_name and ccu.column_name=c.COLUMN_NAME
	        LEFT JOIN information_schema.table_constraints tc on tc.table_schema=c.table_schema 
	          and tc.table_name=c.table_name and tc.constraint_name=ccu.constraint_name
	        LEFT JOIN information_schema.constraint_column_usage cc on cc.table_schema=c.table_schema 
	          and cc.constraint_name=tc.constraint_name and  tc.constraint_type='FOREIGN KEY'
	        WHERE c.TABLE_SCHEMA = 'public' AND c.table_name = 'numbers' 
	        ORDER BY c.ORDINAL_POSITION;
2025-04-19 07:38:40.466 UTC [828] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$b62KNR29RjLnHQ2NfGALQO8CDdozuhulu27JRw9Vf5xqYXLTJOAuO')
	                RETURNING id, username, email
	                
2025-04-19 07:38:40.467 UTC [828] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:38:40.467 UTC [828] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:38:44.655 UTC [819] LOG:  statement: set search_path to 'public';
2025-04-19 07:38:44.659 UTC [819] LOG:  statement: SELECT t.table_name "name", 
	    pg_catalog.obj_description(pgc.oid, 'pg_class') "comment",
	    pgc.reltuples "table_rows",
	    pg_total_relation_size(quote_ident(table_name)) AS "data_length"
	FROM information_schema.tables t
	JOIN pg_catalog.pg_class pgc ON t.table_name = pgc.relname 
	JOIN pg_catalog.pg_namespace pgn ON pgn.oid=pgc.relnamespace and pgn.nspname=t.table_schema
	WHERE t.table_type='BASE TABLE'
	AND t.table_schema='public' order by t.table_name;
2025-04-19 07:38:50.415 UTC [836] DEBUG:  autovacuum: processing database "powerball"
2025-04-19 07:38:50.665 UTC [836] DEBUG:  rehashing catalog cache id 14 for pg_opclass; 17 tups, 8 buckets
2025-04-19 07:38:53.141 UTC [808] LOG:  statement: SELECT * FROM predictions LIMIT 100
2025-04-19 07:38:53.158 UTC [809] LOG:  statement: SELECT 
	          
	          c.COLUMN_NAME "name", 
	          atttypid::regtype AS pg_reg_type,
	          DATA_TYPE "type",
	          IS_NULLABLE nullable, 
	          numeric_precision "precision",
	          numeric_scale "scale",
	          CHARACTER_MAXIMUM_LENGTH "maximum_length", 
	          COLUMN_DEFAULT "defaultValue", 
	          pg_catalog.col_description(pgc.oid, c.ordinal_position::int) AS "comment",
	          tc.constraint_type "key",
	          tc.constraint_name "constraint_name",
	          cc.table_name "referenced_table",
	          cc.column_name "referenced_column",
	          pa.*
	        FROM information_schema.columns c
	        JOIN pg_catalog.pg_class pgc ON c.table_name = pgc.relname 
	        JOIN pg_catalog.pg_namespace pgn ON pgn.oid=pgc.relnamespace and pgn.nspname=c.table_schema
	        JOIN pg_attribute pa on pa.attname =c.column_name and pa.attrelid =pgc.oid 
	        LEFT JOIN information_schema.key_column_usage ccu on ccu.table_schema=c.table_schema
	          and ccu.table_name=c.table_name and ccu.column_name=c.COLUMN_NAME
	        LEFT JOIN information_schema.table_constraints tc on tc.table_schema=c.table_schema 
	          and tc.table_name=c.table_name and tc.constraint_name=ccu.constraint_name
	        LEFT JOIN information_schema.constraint_column_usage cc on cc.table_schema=c.table_schema 
	          and cc.constraint_name=tc.constraint_name and  tc.constraint_type='FOREIGN KEY'
	        WHERE c.TABLE_SCHEMA = 'public' AND c.table_name = 'predictions' 
	        ORDER BY c.ORDINAL_POSITION;
2025-04-19 07:38:53.182 UTC [828] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 07:38:53.487 UTC [828] DEBUG:  unexpected EOF on client connection
2025-04-19 07:38:55.614 UTC [844] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:38:55.622 UTC [844] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:38:55.628 UTC [844] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:38:55.628 UTC [844] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:38:55.632 UTC [844] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:38:55.635 UTC [844] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:38:55.638 UTC [844] DEBUG:  building index "pg_toast_35753_index" on table "pg_toast_35753" serially
2025-04-19 07:38:55.640 UTC [844] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:38:55.640 UTC [844] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:38:55.640 UTC [844] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:38:55.641 UTC [844] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:38:55.641 UTC [844] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:38:55.641 UTC [844] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:38:55.642 UTC [844] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:38:55.642 UTC [844] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:38:55.642 UTC [844] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:38:55.643 UTC [844] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:38:55.644 UTC [844] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:38:55.645 UTC [844] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:38:55.645 UTC [844] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:38:55.645 UTC [844] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:38:55.646 UTC [844] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:38:55.646 UTC [844] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:38:55.646 UTC [844] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:38:55.648 UTC [844] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:38:55.648 UTC [844] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:38:55.648 UTC [844] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:38:55.649 UTC [844] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:38:55.649 UTC [844] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:38:55.649 UTC [844] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:38:55.650 UTC [844] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:38:55.652 UTC [844] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:38:55.652 UTC [844] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:38:55.652 UTC [844] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:38:55.653 UTC [844] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:38:55.655 UTC [844] DEBUG:  building index "pg_toast_35814_index" on table "pg_toast_35814" serially
2025-04-19 07:38:55.656 UTC [844] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:38:55.656 UTC [844] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:38:55.656 UTC [844] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:38:55.657 UTC [844] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:38:55.658 UTC [844] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:38:55.658 UTC [844] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:38:55.658 UTC [844] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:38:55.659 UTC [844] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:38:55.659 UTC [844] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:38:55.659 UTC [844] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:38:55.661 UTC [844] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:38:55.662 UTC [844] DEBUG:  building index "pg_toast_35847_index" on table "pg_toast_35847" serially
2025-04-19 07:38:55.662 UTC [844] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:38:55.663 UTC [844] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:38:55.663 UTC [844] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:38:55.663 UTC [844] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:38:55.665 UTC [844] DEBUG:  building index "pg_toast_35858_index" on table "pg_toast_35858" serially
2025-04-19 07:38:55.665 UTC [844] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:38:55.666 UTC [844] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:38:55.666 UTC [844] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:38:55.667 UTC [844] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:38:55.668 UTC [844] DEBUG:  building index "pg_toast_35881_index" on table "pg_toast_35881" serially
2025-04-19 07:38:55.669 UTC [844] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:38:55.669 UTC [844] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:38:55.669 UTC [844] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:38:55.670 UTC [844] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:38:55.670 UTC [844] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:38:55.671 UTC [844] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:38:55.671 UTC [844] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:38:55.672 UTC [844] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:38:55.672 UTC [844] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:38:55.673 UTC [844] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:38:55.673 UTC [844] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:38:55.673 UTC [844] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:38:55.673 UTC [844] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:38:55.674 UTC [844] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:38:55.674 UTC [844] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:38:55.675 UTC [844] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:38:55.675 UTC [844] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:38:55.676 UTC [844] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:38:55.676 UTC [844] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:38:55.677 UTC [844] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:38:55.677 UTC [844] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:38:55.679 UTC [844] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:38:55.679 UTC [844] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:38:55.680 UTC [844] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:38:55.680 UTC [844] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:38:55.691 UTC [844] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:38:55.956 UTC [844] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$8iQtXGXOesb9FLKfkWFOg.fwknSz0.ubcnQngkSk.bDqsn/1XDofG')
	                RETURNING id, username, email
	                
2025-04-19 07:38:55.957 UTC [844] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:38:55.957 UTC [844] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:38:55.958 UTC [844] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 07:38:55.967 UTC [844] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:38:55.968 UTC [844] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:38:55.970 UTC [844] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:38:55.974 UTC [844] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:38:55.974 UTC [844] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:38:55.977 UTC [844] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:38:55.980 UTC [844] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:38:55.981 UTC [844] DEBUG:  building index "pg_toast_35917_index" on table "pg_toast_35917" serially
2025-04-19 07:38:55.983 UTC [844] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:38:55.983 UTC [844] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:38:55.983 UTC [844] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:38:55.984 UTC [844] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:38:55.984 UTC [844] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:38:55.984 UTC [844] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:38:55.985 UTC [844] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:38:55.985 UTC [844] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:38:55.985 UTC [844] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:38:55.986 UTC [844] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:38:55.987 UTC [844] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:38:55.987 UTC [844] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:38:55.987 UTC [844] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:38:55.988 UTC [844] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:38:55.988 UTC [844] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:38:55.988 UTC [844] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:38:55.988 UTC [844] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:38:55.989 UTC [844] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:38:55.989 UTC [844] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:38:55.989 UTC [844] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:38:55.990 UTC [844] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:38:55.991 UTC [844] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:38:55.991 UTC [844] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:38:55.992 UTC [844] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:38:55.992 UTC [844] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:38:55.993 UTC [844] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:38:55.993 UTC [844] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:38:55.994 UTC [844] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:38:55.995 UTC [844] DEBUG:  building index "pg_toast_35978_index" on table "pg_toast_35978" serially
2025-04-19 07:38:55.995 UTC [844] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:38:55.996 UTC [844] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:38:55.996 UTC [844] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:38:55.997 UTC [844] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:38:55.997 UTC [844] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:38:55.998 UTC [844] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:38:55.998 UTC [844] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:38:55.998 UTC [844] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:38:55.999 UTC [844] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:38:55.999 UTC [844] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:38:56.000 UTC [844] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:38:56.001 UTC [844] DEBUG:  building index "pg_toast_36011_index" on table "pg_toast_36011" serially
2025-04-19 07:38:56.001 UTC [844] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:38:56.001 UTC [844] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:38:56.001 UTC [844] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:38:56.002 UTC [844] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:38:56.006 UTC [844] DEBUG:  building index "pg_toast_36022_index" on table "pg_toast_36022" serially
2025-04-19 07:38:56.007 UTC [844] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:38:56.007 UTC [844] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:38:56.007 UTC [844] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:38:56.010 UTC [844] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:38:56.012 UTC [844] DEBUG:  building index "pg_toast_36045_index" on table "pg_toast_36045" serially
2025-04-19 07:38:56.012 UTC [844] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:38:56.013 UTC [844] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:38:56.013 UTC [844] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:38:56.014 UTC [844] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:38:56.014 UTC [844] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:38:56.014 UTC [844] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:38:56.014 UTC [844] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:38:56.015 UTC [844] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:38:56.015 UTC [844] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:38:56.016 UTC [844] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:38:56.016 UTC [844] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:38:56.017 UTC [844] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:38:56.017 UTC [844] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:38:56.018 UTC [844] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:38:56.018 UTC [844] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:38:56.019 UTC [844] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:38:56.019 UTC [844] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:38:56.019 UTC [844] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:38:56.019 UTC [844] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:38:56.020 UTC [844] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:38:56.020 UTC [844] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:38:56.021 UTC [844] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:38:56.021 UTC [844] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:38:56.022 UTC [844] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:38:56.022 UTC [844] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:38:56.030 UTC [844] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:38:56.286 UTC [844] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$X745tDRlLkkD6wP5waMSZuPO0OEhb8ZueCuWFKsDSqsTMmnPk4CuK')
	                RETURNING id, username, email
	                
2025-04-19 07:38:56.287 UTC [844] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:38:56.288 UTC [844] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:38:57.296 UTC [808] LOG:  statement: SELECT * FROM user_stats LIMIT 100
2025-04-19 07:38:57.309 UTC [809] LOG:  statement: SELECT 
	          
	          c.COLUMN_NAME "name", 
	          atttypid::regtype AS pg_reg_type,
	          DATA_TYPE "type",
	          IS_NULLABLE nullable, 
	          numeric_precision "precision",
	          numeric_scale "scale",
	          CHARACTER_MAXIMUM_LENGTH "maximum_length", 
	          COLUMN_DEFAULT "defaultValue", 
	          pg_catalog.col_description(pgc.oid, c.ordinal_position::int) AS "comment",
	          tc.constraint_type "key",
	          tc.constraint_name "constraint_name",
	          cc.table_name "referenced_table",
	          cc.column_name "referenced_column",
	          pa.*
	        FROM information_schema.columns c
	        JOIN pg_catalog.pg_class pgc ON c.table_name = pgc.relname 
	        JOIN pg_catalog.pg_namespace pgn ON pgn.oid=pgc.relnamespace and pgn.nspname=c.table_schema
	        JOIN pg_attribute pa on pa.attname =c.column_name and pa.attrelid =pgc.oid 
	        LEFT JOIN information_schema.key_column_usage ccu on ccu.table_schema=c.table_schema
	          and ccu.table_name=c.table_name and ccu.column_name=c.COLUMN_NAME
	        LEFT JOIN information_schema.table_constraints tc on tc.table_schema=c.table_schema 
	          and tc.table_name=c.table_name and tc.constraint_name=ccu.constraint_name
	        LEFT JOIN information_schema.constraint_column_usage cc on cc.table_schema=c.table_schema 
	          and cc.constraint_name=tc.constraint_name and  tc.constraint_type='FOREIGN KEY'
	        WHERE c.TABLE_SCHEMA = 'public' AND c.table_name = 'user_stats' 
	        ORDER BY c.ORDINAL_POSITION;
2025-04-19 07:39:00.854 UTC [808] LOG:  statement: SELECT * FROM user_checks LIMIT 100
2025-04-19 07:39:00.866 UTC [809] LOG:  statement: SELECT 
	          
	          c.COLUMN_NAME "name", 
	          atttypid::regtype AS pg_reg_type,
	          DATA_TYPE "type",
	          IS_NULLABLE nullable, 
	          numeric_precision "precision",
	          numeric_scale "scale",
	          CHARACTER_MAXIMUM_LENGTH "maximum_length", 
	          COLUMN_DEFAULT "defaultValue", 
	          pg_catalog.col_description(pgc.oid, c.ordinal_position::int) AS "comment",
	          tc.constraint_type "key",
	          tc.constraint_name "constraint_name",
	          cc.table_name "referenced_table",
	          cc.column_name "referenced_column",
	          pa.*
	        FROM information_schema.columns c
	        JOIN pg_catalog.pg_class pgc ON c.table_name = pgc.relname 
	        JOIN pg_catalog.pg_namespace pgn ON pgn.oid=pgc.relnamespace and pgn.nspname=c.table_schema
	        JOIN pg_attribute pa on pa.attname =c.column_name and pa.attrelid =pgc.oid 
	        LEFT JOIN information_schema.key_column_usage ccu on ccu.table_schema=c.table_schema
	          and ccu.table_name=c.table_name and ccu.column_name=c.COLUMN_NAME
	        LEFT JOIN information_schema.table_constraints tc on tc.table_schema=c.table_schema 
	          and tc.table_name=c.table_name and tc.constraint_name=ccu.constraint_name
	        LEFT JOIN information_schema.constraint_column_usage cc on cc.table_schema=c.table_schema 
	          and cc.constraint_name=tc.constraint_name and  tc.constraint_type='FOREIGN KEY'
	        WHERE c.TABLE_SCHEMA = 'public' AND c.table_name = 'user_checks' 
	        ORDER BY c.ORDINAL_POSITION;
2025-04-19 07:39:03.455 UTC [808] LOG:  statement: SELECT * FROM users LIMIT 100
2025-04-19 07:39:03.472 UTC [809] LOG:  statement: SELECT 
	          
	          c.COLUMN_NAME "name", 
	          atttypid::regtype AS pg_reg_type,
	          DATA_TYPE "type",
	          IS_NULLABLE nullable, 
	          numeric_precision "precision",
	          numeric_scale "scale",
	          CHARACTER_MAXIMUM_LENGTH "maximum_length", 
	          COLUMN_DEFAULT "defaultValue", 
	          pg_catalog.col_description(pgc.oid, c.ordinal_position::int) AS "comment",
	          tc.constraint_type "key",
	          tc.constraint_name "constraint_name",
	          cc.table_name "referenced_table",
	          cc.column_name "referenced_column",
	          pa.*
	        FROM information_schema.columns c
	        JOIN pg_catalog.pg_class pgc ON c.table_name = pgc.relname 
	        JOIN pg_catalog.pg_namespace pgn ON pgn.oid=pgc.relnamespace and pgn.nspname=c.table_schema
	        JOIN pg_attribute pa on pa.attname =c.column_name and pa.attrelid =pgc.oid 
	        LEFT JOIN information_schema.key_column_usage ccu on ccu.table_schema=c.table_schema
	          and ccu.table_name=c.table_name and ccu.column_name=c.COLUMN_NAME
	        LEFT JOIN information_schema.table_constraints tc on tc.table_schema=c.table_schema 
	          and tc.table_name=c.table_name and tc.constraint_name=ccu.constraint_name
	        LEFT JOIN information_schema.constraint_column_usage cc on cc.table_schema=c.table_schema 
	          and cc.constraint_name=tc.constraint_name and  tc.constraint_type='FOREIGN KEY'
	        WHERE c.TABLE_SCHEMA = 'public' AND c.table_name = 'users' 
	        ORDER BY c.ORDINAL_POSITION;
2025-04-19 07:39:09.237 UTC [844] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 07:39:09.571 UTC [844] DEBUG:  unexpected EOF on client connection
2025-04-19 07:39:11.471 UTC [852] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:39:11.478 UTC [852] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:39:11.484 UTC [852] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:39:11.484 UTC [852] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:39:11.488 UTC [852] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:39:11.493 UTC [852] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:39:11.496 UTC [852] DEBUG:  building index "pg_toast_36081_index" on table "pg_toast_36081" serially
2025-04-19 07:39:11.497 UTC [852] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:39:11.498 UTC [852] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:39:11.498 UTC [852] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:39:11.499 UTC [852] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:39:11.499 UTC [852] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:39:11.499 UTC [852] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:39:11.499 UTC [852] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:39:11.500 UTC [852] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:39:11.500 UTC [852] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:39:11.500 UTC [852] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:39:11.501 UTC [852] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:39:11.501 UTC [852] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:39:11.501 UTC [852] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:39:11.502 UTC [852] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:39:11.502 UTC [852] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:39:11.502 UTC [852] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:39:11.503 UTC [852] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:39:11.504 UTC [852] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:39:11.504 UTC [852] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:39:11.504 UTC [852] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:39:11.505 UTC [852] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:39:11.505 UTC [852] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:39:11.505 UTC [852] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:39:11.507 UTC [852] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:39:11.508 UTC [852] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:39:11.508 UTC [852] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:39:11.508 UTC [852] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:39:11.509 UTC [852] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:39:11.510 UTC [852] DEBUG:  building index "pg_toast_36142_index" on table "pg_toast_36142" serially
2025-04-19 07:39:11.511 UTC [852] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:39:11.511 UTC [852] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:39:11.511 UTC [852] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:39:11.513 UTC [852] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:39:11.514 UTC [852] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:39:11.515 UTC [852] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:39:11.515 UTC [852] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:39:11.516 UTC [852] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:39:11.516 UTC [852] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:39:11.516 UTC [852] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:39:11.520 UTC [852] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:39:11.525 UTC [852] DEBUG:  building index "pg_toast_36175_index" on table "pg_toast_36175" serially
2025-04-19 07:39:11.527 UTC [852] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:39:11.527 UTC [852] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:39:11.527 UTC [852] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:39:11.531 UTC [852] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:39:11.533 UTC [852] DEBUG:  building index "pg_toast_36186_index" on table "pg_toast_36186" serially
2025-04-19 07:39:11.535 UTC [852] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:39:11.537 UTC [852] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:39:11.537 UTC [852] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:39:11.543 UTC [852] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:39:11.545 UTC [852] DEBUG:  building index "pg_toast_36209_index" on table "pg_toast_36209" serially
2025-04-19 07:39:11.546 UTC [852] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:39:11.546 UTC [852] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:39:11.546 UTC [852] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:39:11.548 UTC [852] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:39:11.548 UTC [852] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:39:11.549 UTC [852] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:39:11.549 UTC [852] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:39:11.550 UTC [852] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:39:11.550 UTC [852] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:39:11.551 UTC [852] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:39:11.551 UTC [852] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:39:11.552 UTC [852] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:39:11.552 UTC [852] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:39:11.554 UTC [852] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:39:11.554 UTC [852] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:39:11.555 UTC [852] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:39:11.555 UTC [852] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:39:11.556 UTC [852] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:39:11.556 UTC [852] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:39:11.557 UTC [852] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:39:11.557 UTC [852] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:39:11.558 UTC [852] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:39:11.558 UTC [852] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:39:11.559 UTC [852] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:39:11.559 UTC [852] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:39:11.575 UTC [852] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:39:11.855 UTC [852] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$VVe8hEuBkNryaDnkaYK5..9QgagfYdoczX414ICkEHtDvZLA77zi.')
	                RETURNING id, username, email
	                
2025-04-19 07:39:11.856 UTC [852] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:39:11.856 UTC [852] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:39:11.857 UTC [852] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 07:39:11.867 UTC [852] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:39:11.869 UTC [852] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:39:11.872 UTC [852] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:39:11.879 UTC [852] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:39:11.879 UTC [852] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:39:11.882 UTC [852] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:39:11.885 UTC [852] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:39:11.886 UTC [852] DEBUG:  building index "pg_toast_36245_index" on table "pg_toast_36245" serially
2025-04-19 07:39:11.888 UTC [852] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:39:11.888 UTC [852] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:39:11.888 UTC [852] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:39:11.889 UTC [852] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:39:11.889 UTC [852] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:39:11.889 UTC [852] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:39:11.890 UTC [852] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:39:11.890 UTC [852] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:39:11.890 UTC [852] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:39:11.891 UTC [852] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:39:11.892 UTC [852] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:39:11.892 UTC [852] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:39:11.892 UTC [852] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:39:11.893 UTC [852] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:39:11.893 UTC [852] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:39:11.893 UTC [852] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:39:11.894 UTC [852] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:39:11.895 UTC [852] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:39:11.895 UTC [852] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:39:11.895 UTC [852] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:39:11.896 UTC [852] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:39:11.896 UTC [852] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:39:11.896 UTC [852] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:39:11.897 UTC [852] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:39:11.898 UTC [852] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:39:11.898 UTC [852] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:39:11.898 UTC [852] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:39:11.899 UTC [852] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:39:11.900 UTC [852] DEBUG:  building index "pg_toast_36306_index" on table "pg_toast_36306" serially
2025-04-19 07:39:11.901 UTC [852] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:39:11.901 UTC [852] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:39:11.901 UTC [852] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:39:11.902 UTC [852] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:39:11.903 UTC [852] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:39:11.903 UTC [852] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:39:11.903 UTC [852] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:39:11.904 UTC [852] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:39:11.904 UTC [852] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:39:11.904 UTC [852] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:39:11.905 UTC [852] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:39:11.906 UTC [852] DEBUG:  building index "pg_toast_36339_index" on table "pg_toast_36339" serially
2025-04-19 07:39:11.907 UTC [852] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:39:11.908 UTC [852] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:39:11.908 UTC [852] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:39:11.908 UTC [852] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:39:11.911 UTC [852] DEBUG:  building index "pg_toast_36350_index" on table "pg_toast_36350" serially
2025-04-19 07:39:11.912 UTC [852] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:39:11.913 UTC [852] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:39:11.913 UTC [852] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:39:11.914 UTC [852] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:39:11.915 UTC [852] DEBUG:  building index "pg_toast_36373_index" on table "pg_toast_36373" serially
2025-04-19 07:39:11.916 UTC [852] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:39:11.916 UTC [852] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:39:11.916 UTC [852] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:39:11.917 UTC [852] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:39:11.917 UTC [852] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:39:11.918 UTC [852] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:39:11.918 UTC [852] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:39:11.919 UTC [852] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:39:11.919 UTC [852] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:39:11.920 UTC [852] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:39:11.920 UTC [852] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:39:11.920 UTC [852] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:39:11.920 UTC [852] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:39:11.922 UTC [852] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:39:11.922 UTC [852] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:39:11.922 UTC [852] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:39:11.922 UTC [852] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:39:11.923 UTC [852] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:39:11.923 UTC [852] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:39:11.924 UTC [852] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:39:11.924 UTC [852] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:39:11.925 UTC [852] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:39:11.925 UTC [852] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:39:11.926 UTC [852] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:39:11.926 UTC [852] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:39:11.932 UTC [852] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:39:12.179 UTC [852] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$FvfirJ2rfNqBmMLbnQ/MneBgZZ69sDhAwgtj9neUJvlQejWrkR.rC')
	                RETURNING id, username, email
	                
2025-04-19 07:39:12.180 UTC [852] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:39:12.180 UTC [852] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:39:12.447 UTC [809] LOG:  statement: SELECT
	        a.pid AS "ID",
	        query_start AS "Time",
	        datname AS "db",
	        CASE
	        WHEN c.relname IS NOT NULL THEN c.relname
	        ELSE l.virtualtransaction
	        END AS "Target",
	        l.mode AS "State",
	        query AS "SQL"
	      FROM
	        pg_stat_activity a
	        LEFT JOIN pg_locks l ON a.pid = l.pid
	        LEFT JOIN pg_class c ON l.relation = c.oid
	      ORDER BY
	        a.pid ASC,
	        c.relname ASC
2025-04-19 07:39:12.491 UTC [809] LOG:  statement: SELECT
	        a.pid AS "ID",
	        query_start AS "Time",
	        datname AS "db",
	        CASE
	        WHEN c.relname IS NOT NULL THEN c.relname
	        ELSE l.virtualtransaction
	        END AS "Target",
	        l.mode AS "State",
	        query AS "SQL"
	      FROM
	        pg_stat_activity a
	        LEFT JOIN pg_locks l ON a.pid = l.pid
	        LEFT JOIN pg_class c ON l.relation = c.oid
	      ORDER BY
	        a.pid ASC,
	        c.relname ASC
2025-04-19 07:39:12.519 UTC [809] LOG:  statement: SELECT
	        a.pid AS "ID",
	        query_start AS "Time",
	        datname AS "db",
	        CASE
	        WHEN c.relname IS NOT NULL THEN c.relname
	        ELSE l.virtualtransaction
	        END AS "Target",
	        l.mode AS "State",
	        query AS "SQL"
	      FROM
	        pg_stat_activity a
	        LEFT JOIN pg_locks l ON a.pid = l.pid
	        LEFT JOIN pg_class c ON l.relation = c.oid
	      ORDER BY
	        a.pid ASC,
	        c.relname ASC
2025-04-19 07:39:12.525 UTC [809] LOG:  statement: SHOW ALL
2025-04-19 07:39:12.530 UTC [809] LOG:  statement: SELECT
	        'db_numbackends' AS db,
	        pg_stat_get_db_numbackends(datid) AS status
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_xact_commit',
	        pg_stat_get_db_xact_commit(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_xact_rollback',
	        pg_stat_get_db_xact_rollback(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_blocks_fetched',
	        pg_stat_get_db_blocks_fetched(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_blocks_hit',
	        pg_stat_get_db_blocks_hit(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
2025-04-19 07:39:20.427 UTC [860] DEBUG:  autovacuum: processing database "postgres"
2025-04-19 07:39:25.208 UTC [852] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 07:39:25.487 UTC [852] DEBUG:  unexpected EOF on client connection
2025-04-19 07:39:27.155 UTC [868] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:39:27.161 UTC [868] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:39:27.167 UTC [868] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:39:27.167 UTC [868] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:39:27.173 UTC [868] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:39:27.178 UTC [868] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:39:27.180 UTC [868] DEBUG:  building index "pg_toast_36409_index" on table "pg_toast_36409" serially
2025-04-19 07:39:27.183 UTC [868] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:39:27.184 UTC [868] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:39:27.184 UTC [868] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:39:27.185 UTC [868] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:39:27.186 UTC [868] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:39:27.186 UTC [868] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:39:27.188 UTC [868] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:39:27.188 UTC [868] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:39:27.188 UTC [868] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:39:27.189 UTC [868] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:39:27.190 UTC [868] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:39:27.190 UTC [868] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:39:27.190 UTC [868] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:39:27.191 UTC [868] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:39:27.191 UTC [868] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:39:27.191 UTC [868] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:39:27.192 UTC [868] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:39:27.194 UTC [868] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:39:27.194 UTC [868] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:39:27.194 UTC [868] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:39:27.195 UTC [868] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:39:27.195 UTC [868] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:39:27.195 UTC [868] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:39:27.197 UTC [868] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:39:27.199 UTC [868] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:39:27.199 UTC [868] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:39:27.199 UTC [868] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:39:27.202 UTC [868] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:39:27.204 UTC [868] DEBUG:  building index "pg_toast_36470_index" on table "pg_toast_36470" serially
2025-04-19 07:39:27.204 UTC [868] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:39:27.205 UTC [868] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:39:27.205 UTC [868] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:39:27.206 UTC [868] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:39:27.207 UTC [868] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:39:27.207 UTC [868] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:39:27.207 UTC [868] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:39:27.208 UTC [868] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:39:27.208 UTC [868] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:39:27.208 UTC [868] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:39:27.209 UTC [868] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:39:27.210 UTC [868] DEBUG:  building index "pg_toast_36503_index" on table "pg_toast_36503" serially
2025-04-19 07:39:27.211 UTC [868] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:39:27.211 UTC [868] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:39:27.211 UTC [868] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:39:27.212 UTC [868] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:39:27.213 UTC [868] DEBUG:  building index "pg_toast_36514_index" on table "pg_toast_36514" serially
2025-04-19 07:39:27.214 UTC [868] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:39:27.214 UTC [868] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:39:27.214 UTC [868] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:39:27.216 UTC [868] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:39:27.216 UTC [868] DEBUG:  building index "pg_toast_36537_index" on table "pg_toast_36537" serially
2025-04-19 07:39:27.217 UTC [868] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:39:27.217 UTC [868] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:39:27.217 UTC [868] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:39:27.218 UTC [868] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:39:27.218 UTC [868] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:39:27.219 UTC [868] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:39:27.219 UTC [868] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:39:27.220 UTC [868] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:39:27.220 UTC [868] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:39:27.221 UTC [868] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:39:27.221 UTC [868] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:39:27.222 UTC [868] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:39:27.222 UTC [868] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:39:27.223 UTC [868] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:39:27.223 UTC [868] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:39:27.224 UTC [868] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:39:27.224 UTC [868] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:39:27.224 UTC [868] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:39:27.224 UTC [868] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:39:27.225 UTC [868] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:39:27.225 UTC [868] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:39:27.226 UTC [868] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:39:27.226 UTC [868] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:39:27.227 UTC [868] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:39:27.227 UTC [868] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:39:27.239 UTC [868] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:39:27.504 UTC [868] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$T4Wn/jzawQ5XqXwjG1GbLO5LWcBDhw6y55.RFWUWbEM0mBGocd.S6')
	                RETURNING id, username, email
	                
2025-04-19 07:39:27.505 UTC [868] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:39:27.505 UTC [868] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:39:27.506 UTC [868] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 07:39:27.517 UTC [868] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:39:27.518 UTC [868] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:39:27.521 UTC [868] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:39:27.525 UTC [868] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:39:27.525 UTC [868] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:39:27.531 UTC [868] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:39:27.534 UTC [868] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:39:27.535 UTC [868] DEBUG:  building index "pg_toast_36573_index" on table "pg_toast_36573" serially
2025-04-19 07:39:27.536 UTC [868] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:39:27.537 UTC [868] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:39:27.537 UTC [868] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:39:27.537 UTC [868] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:39:27.537 UTC [868] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:39:27.537 UTC [868] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:39:27.538 UTC [868] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:39:27.538 UTC [868] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:39:27.538 UTC [868] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:39:27.539 UTC [868] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:39:27.540 UTC [868] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:39:27.540 UTC [868] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:39:27.540 UTC [868] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:39:27.541 UTC [868] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:39:27.541 UTC [868] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:39:27.541 UTC [868] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:39:27.541 UTC [868] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:39:27.542 UTC [868] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:39:27.543 UTC [868] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:39:27.543 UTC [868] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:39:27.544 UTC [868] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:39:27.544 UTC [868] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:39:27.544 UTC [868] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:39:27.545 UTC [868] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:39:27.547 UTC [868] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:39:27.547 UTC [868] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:39:27.547 UTC [868] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:39:27.548 UTC [868] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:39:27.549 UTC [868] DEBUG:  building index "pg_toast_36634_index" on table "pg_toast_36634" serially
2025-04-19 07:39:27.550 UTC [868] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:39:27.550 UTC [868] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:39:27.550 UTC [868] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:39:27.551 UTC [868] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:39:27.552 UTC [868] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:39:27.553 UTC [868] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:39:27.553 UTC [868] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:39:27.554 UTC [868] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:39:27.554 UTC [868] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:39:27.554 UTC [868] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:39:27.556 UTC [868] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:39:27.557 UTC [868] DEBUG:  building index "pg_toast_36667_index" on table "pg_toast_36667" serially
2025-04-19 07:39:27.558 UTC [868] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:39:27.558 UTC [868] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:39:27.558 UTC [868] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:39:27.559 UTC [868] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:39:27.559 UTC [868] DEBUG:  building index "pg_toast_36678_index" on table "pg_toast_36678" serially
2025-04-19 07:39:27.560 UTC [868] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:39:27.560 UTC [868] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:39:27.560 UTC [868] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:39:27.562 UTC [868] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:39:27.564 UTC [868] DEBUG:  building index "pg_toast_36701_index" on table "pg_toast_36701" serially
2025-04-19 07:39:27.565 UTC [868] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:39:27.565 UTC [868] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:39:27.565 UTC [868] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:39:27.566 UTC [868] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:39:27.566 UTC [868] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:39:27.567 UTC [868] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:39:27.567 UTC [868] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:39:27.568 UTC [868] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:39:27.568 UTC [868] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:39:27.568 UTC [868] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:39:27.568 UTC [868] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:39:27.569 UTC [868] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:39:27.569 UTC [868] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:39:27.570 UTC [868] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:39:27.570 UTC [868] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:39:27.571 UTC [868] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:39:27.571 UTC [868] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:39:27.572 UTC [868] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:39:27.572 UTC [868] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:39:27.573 UTC [868] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:39:27.573 UTC [868] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:39:27.574 UTC [868] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:39:27.574 UTC [868] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:39:27.575 UTC [868] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:39:27.575 UTC [868] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:39:27.582 UTC [868] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:39:27.825 UTC [868] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$8GH6zT82hHy5tcPJ3I4bruFV2comRKk714eU2Otnxm30bZZiqM7ZW')
	                RETURNING id, username, email
	                
2025-04-19 07:39:27.826 UTC [868] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:39:27.827 UTC [868] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:39:41.298 UTC [868] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 07:39:41.605 UTC [868] DEBUG:  unexpected EOF on client connection
2025-04-19 07:39:43.559 UTC [883] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:39:43.566 UTC [883] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:39:43.574 UTC [883] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:39:43.574 UTC [883] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:39:43.578 UTC [883] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:39:43.582 UTC [883] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:39:43.585 UTC [883] DEBUG:  building index "pg_toast_36737_index" on table "pg_toast_36737" serially
2025-04-19 07:39:43.586 UTC [883] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:39:43.587 UTC [883] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:39:43.587 UTC [883] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:39:43.588 UTC [883] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:39:43.588 UTC [883] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:39:43.588 UTC [883] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:39:43.589 UTC [883] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:39:43.589 UTC [883] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:39:43.589 UTC [883] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:39:43.590 UTC [883] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:39:43.590 UTC [883] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:39:43.591 UTC [883] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:39:43.591 UTC [883] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:39:43.592 UTC [883] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:39:43.592 UTC [883] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:39:43.592 UTC [883] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:39:43.592 UTC [883] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:39:43.593 UTC [883] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:39:43.594 UTC [883] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:39:43.594 UTC [883] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:39:43.594 UTC [883] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:39:43.594 UTC [883] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:39:43.594 UTC [883] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:39:43.596 UTC [883] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:39:43.597 UTC [883] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:39:43.597 UTC [883] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:39:43.597 UTC [883] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:39:43.598 UTC [883] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:39:43.599 UTC [883] DEBUG:  building index "pg_toast_36798_index" on table "pg_toast_36798" serially
2025-04-19 07:39:43.600 UTC [883] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:39:43.600 UTC [883] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:39:43.600 UTC [883] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:39:43.601 UTC [883] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:39:43.602 UTC [883] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:39:43.603 UTC [883] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:39:43.603 UTC [883] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:39:43.604 UTC [883] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:39:43.604 UTC [883] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:39:43.604 UTC [883] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:39:43.605 UTC [883] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:39:43.606 UTC [883] DEBUG:  building index "pg_toast_36831_index" on table "pg_toast_36831" serially
2025-04-19 07:39:43.607 UTC [883] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:39:43.607 UTC [883] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:39:43.607 UTC [883] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:39:43.608 UTC [883] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:39:43.609 UTC [883] DEBUG:  building index "pg_toast_36842_index" on table "pg_toast_36842" serially
2025-04-19 07:39:43.609 UTC [883] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:39:43.610 UTC [883] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:39:43.610 UTC [883] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:39:43.611 UTC [883] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:39:43.612 UTC [883] DEBUG:  building index "pg_toast_36865_index" on table "pg_toast_36865" serially
2025-04-19 07:39:43.613 UTC [883] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:39:43.613 UTC [883] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:39:43.613 UTC [883] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:39:43.614 UTC [883] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:39:43.614 UTC [883] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:39:43.615 UTC [883] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:39:43.615 UTC [883] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:39:43.616 UTC [883] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:39:43.616 UTC [883] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:39:43.617 UTC [883] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:39:43.617 UTC [883] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:39:43.617 UTC [883] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:39:43.617 UTC [883] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:39:43.619 UTC [883] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:39:43.619 UTC [883] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:39:43.619 UTC [883] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:39:43.620 UTC [883] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:39:43.620 UTC [883] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:39:43.620 UTC [883] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:39:43.621 UTC [883] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:39:43.621 UTC [883] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:39:43.622 UTC [883] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:39:43.622 UTC [883] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:39:43.623 UTC [883] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:39:43.623 UTC [883] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:39:43.635 UTC [883] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:39:43.899 UTC [883] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$.FPbOAMokm7g0IaOF/eX..Hu5GeGl6Xnw6ZTHWnjMGvxIfxG9fPUG')
	                RETURNING id, username, email
	                
2025-04-19 07:39:43.900 UTC [883] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:39:43.900 UTC [883] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:39:43.901 UTC [883] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 07:39:43.919 UTC [883] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:39:43.920 UTC [883] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:39:43.923 UTC [883] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:39:43.927 UTC [883] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:39:43.927 UTC [883] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:39:43.930 UTC [883] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:39:43.933 UTC [883] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:39:43.934 UTC [883] DEBUG:  building index "pg_toast_36901_index" on table "pg_toast_36901" serially
2025-04-19 07:39:43.935 UTC [883] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:39:43.935 UTC [883] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:39:43.935 UTC [883] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:39:43.937 UTC [883] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:39:43.937 UTC [883] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:39:43.937 UTC [883] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:39:43.938 UTC [883] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:39:43.939 UTC [883] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:39:43.939 UTC [883] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:39:43.940 UTC [883] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:39:43.941 UTC [883] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:39:43.941 UTC [883] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:39:43.941 UTC [883] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:39:43.943 UTC [883] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:39:43.943 UTC [883] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:39:43.943 UTC [883] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:39:43.944 UTC [883] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:39:43.945 UTC [883] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:39:43.945 UTC [883] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:39:43.945 UTC [883] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:39:43.946 UTC [883] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:39:43.946 UTC [883] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:39:43.946 UTC [883] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:39:43.947 UTC [883] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:39:43.948 UTC [883] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:39:43.948 UTC [883] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:39:43.948 UTC [883] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:39:43.949 UTC [883] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:39:43.950 UTC [883] DEBUG:  building index "pg_toast_36962_index" on table "pg_toast_36962" serially
2025-04-19 07:39:43.951 UTC [883] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:39:43.951 UTC [883] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:39:43.951 UTC [883] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:39:43.952 UTC [883] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:39:43.953 UTC [883] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:39:43.953 UTC [883] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:39:43.953 UTC [883] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:39:43.954 UTC [883] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:39:43.954 UTC [883] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:39:43.954 UTC [883] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:39:43.955 UTC [883] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:39:43.956 UTC [883] DEBUG:  building index "pg_toast_36995_index" on table "pg_toast_36995" serially
2025-04-19 07:39:43.957 UTC [883] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:39:43.957 UTC [883] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:39:43.957 UTC [883] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:39:43.958 UTC [883] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:39:43.959 UTC [883] DEBUG:  building index "pg_toast_37006_index" on table "pg_toast_37006" serially
2025-04-19 07:39:43.960 UTC [883] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:39:43.960 UTC [883] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:39:43.960 UTC [883] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:39:43.961 UTC [883] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:39:43.962 UTC [883] DEBUG:  building index "pg_toast_37029_index" on table "pg_toast_37029" serially
2025-04-19 07:39:43.963 UTC [883] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:39:43.963 UTC [883] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:39:43.963 UTC [883] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:39:43.964 UTC [883] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:39:43.964 UTC [883] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:39:43.965 UTC [883] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:39:43.965 UTC [883] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:39:43.965 UTC [883] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:39:43.965 UTC [883] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:39:43.966 UTC [883] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:39:43.966 UTC [883] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:39:43.967 UTC [883] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:39:43.967 UTC [883] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:39:43.968 UTC [883] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:39:43.968 UTC [883] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:39:43.969 UTC [883] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:39:43.969 UTC [883] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:39:43.970 UTC [883] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:39:43.970 UTC [883] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:39:43.971 UTC [883] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:39:43.971 UTC [883] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:39:43.971 UTC [883] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:39:43.971 UTC [883] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:39:43.972 UTC [883] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:39:43.972 UTC [883] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:39:43.981 UTC [883] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:39:44.227 UTC [883] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$97RVozhPVGh.a70zdu80ZeveE9sUibKc0Xb1stoaf8dkRbok3kYsy')
	                RETURNING id, username, email
	                
2025-04-19 07:39:44.228 UTC [883] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:39:44.229 UTC [883] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:39:50.435 UTC [884] DEBUG:  autovacuum: processing database "powerball"
2025-04-19 07:39:50.657 UTC [884] DEBUG:  rehashing catalog cache id 14 for pg_opclass; 17 tups, 8 buckets
2025-04-19 07:39:57.314 UTC [883] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 07:39:57.627 UTC [883] DEBUG:  unexpected EOF on client connection
2025-04-19 07:39:59.858 UTC [892] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:39:59.865 UTC [892] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:39:59.872 UTC [892] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:39:59.872 UTC [892] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:39:59.875 UTC [892] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:39:59.879 UTC [892] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:39:59.882 UTC [892] DEBUG:  building index "pg_toast_37066_index" on table "pg_toast_37066" serially
2025-04-19 07:39:59.883 UTC [892] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:39:59.884 UTC [892] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:39:59.884 UTC [892] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:39:59.885 UTC [892] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:39:59.885 UTC [892] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:39:59.885 UTC [892] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:39:59.886 UTC [892] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:39:59.886 UTC [892] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:39:59.886 UTC [892] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:39:59.887 UTC [892] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:39:59.888 UTC [892] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:39:59.888 UTC [892] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:39:59.888 UTC [892] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:39:59.888 UTC [892] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:39:59.889 UTC [892] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:39:59.889 UTC [892] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:39:59.889 UTC [892] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:39:59.890 UTC [892] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:39:59.890 UTC [892] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:39:59.890 UTC [892] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:39:59.891 UTC [892] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:39:59.891 UTC [892] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:39:59.891 UTC [892] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:39:59.893 UTC [892] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:39:59.893 UTC [892] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:39:59.894 UTC [892] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:39:59.894 UTC [892] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:39:59.895 UTC [892] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:39:59.897 UTC [892] DEBUG:  building index "pg_toast_37127_index" on table "pg_toast_37127" serially
2025-04-19 07:39:59.898 UTC [892] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:39:59.899 UTC [892] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:39:59.899 UTC [892] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:39:59.900 UTC [892] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:39:59.902 UTC [892] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:39:59.902 UTC [892] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:39:59.902 UTC [892] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:39:59.903 UTC [892] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:39:59.903 UTC [892] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:39:59.903 UTC [892] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:39:59.904 UTC [892] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:39:59.906 UTC [892] DEBUG:  building index "pg_toast_37160_index" on table "pg_toast_37160" serially
2025-04-19 07:39:59.906 UTC [892] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:39:59.907 UTC [892] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:39:59.907 UTC [892] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:39:59.908 UTC [892] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:39:59.909 UTC [892] DEBUG:  building index "pg_toast_37171_index" on table "pg_toast_37171" serially
2025-04-19 07:39:59.910 UTC [892] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:39:59.910 UTC [892] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:39:59.910 UTC [892] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:39:59.911 UTC [892] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:39:59.912 UTC [892] DEBUG:  building index "pg_toast_37194_index" on table "pg_toast_37194" serially
2025-04-19 07:39:59.913 UTC [892] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:39:59.913 UTC [892] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:39:59.913 UTC [892] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:39:59.915 UTC [892] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:39:59.915 UTC [892] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:39:59.917 UTC [892] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:39:59.917 UTC [892] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:39:59.919 UTC [892] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:39:59.919 UTC [892] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:39:59.920 UTC [892] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:39:59.920 UTC [892] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:39:59.921 UTC [892] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:39:59.921 UTC [892] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:39:59.922 UTC [892] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:39:59.922 UTC [892] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:39:59.923 UTC [892] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:39:59.923 UTC [892] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:39:59.924 UTC [892] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:39:59.924 UTC [892] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:39:59.925 UTC [892] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:39:59.925 UTC [892] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:39:59.926 UTC [892] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:39:59.926 UTC [892] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:39:59.926 UTC [892] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:39:59.926 UTC [892] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:39:59.941 UTC [892] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:40:00.208 UTC [892] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$28H9xd1VqSFFeM2vxydqyuZVPFJQPpqVgoujOhfPIvmJkjWHQMCjy')
	                RETURNING id, username, email
	                
2025-04-19 07:40:00.209 UTC [892] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:40:00.209 UTC [892] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:40:00.210 UTC [892] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 07:40:00.219 UTC [892] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:40:00.220 UTC [892] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:40:00.222 UTC [892] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:40:00.225 UTC [892] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:40:00.225 UTC [892] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:40:00.228 UTC [892] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:40:00.231 UTC [892] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:40:00.232 UTC [892] DEBUG:  building index "pg_toast_37230_index" on table "pg_toast_37230" serially
2025-04-19 07:40:00.233 UTC [892] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:40:00.234 UTC [892] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:40:00.234 UTC [892] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:40:00.234 UTC [892] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:40:00.235 UTC [892] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:40:00.235 UTC [892] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:40:00.235 UTC [892] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:40:00.235 UTC [892] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:40:00.235 UTC [892] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:40:00.236 UTC [892] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:40:00.238 UTC [892] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:40:00.238 UTC [892] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:40:00.238 UTC [892] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:40:00.238 UTC [892] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:40:00.239 UTC [892] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:40:00.239 UTC [892] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:40:00.239 UTC [892] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:40:00.240 UTC [892] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:40:00.240 UTC [892] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:40:00.240 UTC [892] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:40:00.241 UTC [892] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:40:00.241 UTC [892] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:40:00.241 UTC [892] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:40:00.242 UTC [892] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:40:00.243 UTC [892] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:40:00.243 UTC [892] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:40:00.243 UTC [892] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:40:00.244 UTC [892] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:40:00.245 UTC [892] DEBUG:  building index "pg_toast_37291_index" on table "pg_toast_37291" serially
2025-04-19 07:40:00.246 UTC [892] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:40:00.246 UTC [892] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:40:00.246 UTC [892] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:40:00.247 UTC [892] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:40:00.248 UTC [892] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:40:00.248 UTC [892] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:40:00.248 UTC [892] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:40:00.249 UTC [892] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:40:00.249 UTC [892] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:40:00.249 UTC [892] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:40:00.251 UTC [892] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:40:00.253 UTC [892] DEBUG:  building index "pg_toast_37324_index" on table "pg_toast_37324" serially
2025-04-19 07:40:00.254 UTC [892] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:40:00.255 UTC [892] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:40:00.255 UTC [892] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:40:00.255 UTC [892] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:40:00.257 UTC [892] DEBUG:  building index "pg_toast_37335_index" on table "pg_toast_37335" serially
2025-04-19 07:40:00.258 UTC [892] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:40:00.259 UTC [892] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:40:00.259 UTC [892] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:40:00.262 UTC [892] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:40:00.264 UTC [892] DEBUG:  building index "pg_toast_37358_index" on table "pg_toast_37358" serially
2025-04-19 07:40:00.266 UTC [892] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:40:00.266 UTC [892] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:40:00.266 UTC [892] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:40:00.267 UTC [892] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:40:00.267 UTC [892] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:40:00.268 UTC [892] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:40:00.268 UTC [892] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:40:00.269 UTC [892] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:40:00.269 UTC [892] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:40:00.270 UTC [892] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:40:00.270 UTC [892] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:40:00.271 UTC [892] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:40:00.271 UTC [892] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:40:00.272 UTC [892] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:40:00.272 UTC [892] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:40:00.273 UTC [892] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:40:00.273 UTC [892] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:40:00.274 UTC [892] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:40:00.274 UTC [892] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:40:00.275 UTC [892] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:40:00.275 UTC [892] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:40:00.277 UTC [892] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:40:00.277 UTC [892] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:40:00.279 UTC [892] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:40:00.279 UTC [892] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:40:00.289 UTC [892] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:40:00.648 UTC [892] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$b.ZUDVTPdoE5c7/QpsbrJurZGCLjJq7mb6plvgAPQEQPe9LlPYzfa')
	                RETURNING id, username, email
	                
2025-04-19 07:40:00.650 UTC [892] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:40:00.651 UTC [892] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:40:04.790 UTC [809] LOG:  statement: SELECT
	        a.pid AS "ID",
	        query_start AS "Time",
	        datname AS "db",
	        CASE
	        WHEN c.relname IS NOT NULL THEN c.relname
	        ELSE l.virtualtransaction
	        END AS "Target",
	        l.mode AS "State",
	        query AS "SQL"
	      FROM
	        pg_stat_activity a
	        LEFT JOIN pg_locks l ON a.pid = l.pid
	        LEFT JOIN pg_class c ON l.relation = c.oid
	      ORDER BY
	        a.pid ASC,
	        c.relname ASC
2025-04-19 07:40:04.821 UTC [809] LOG:  statement: SHOW ALL
2025-04-19 07:40:04.834 UTC [809] LOG:  statement: SELECT
	        'db_numbackends' AS db,
	        pg_stat_get_db_numbackends(datid) AS status
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_xact_commit',
	        pg_stat_get_db_xact_commit(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_xact_rollback',
	        pg_stat_get_db_xact_rollback(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_blocks_fetched',
	        pg_stat_get_db_blocks_fetched(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_blocks_hit',
	        pg_stat_get_db_blocks_hit(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
2025-04-19 07:40:04.857 UTC [809] LOG:  statement: SELECT
	        a.pid AS "ID",
	        query_start AS "Time",
	        datname AS "db",
	        CASE
	        WHEN c.relname IS NOT NULL THEN c.relname
	        ELSE l.virtualtransaction
	        END AS "Target",
	        l.mode AS "State",
	        query AS "SQL"
	      FROM
	        pg_stat_activity a
	        LEFT JOIN pg_locks l ON a.pid = l.pid
	        LEFT JOIN pg_class c ON l.relation = c.oid
	      ORDER BY
	        a.pid ASC,
	        c.relname ASC
2025-04-19 07:40:04.894 UTC [809] LOG:  statement: SHOW ALL
2025-04-19 07:40:04.910 UTC [809] LOG:  statement: SELECT
	        'db_numbackends' AS db,
	        pg_stat_get_db_numbackends(datid) AS status
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_xact_commit',
	        pg_stat_get_db_xact_commit(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_xact_rollback',
	        pg_stat_get_db_xact_rollback(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_blocks_fetched',
	        pg_stat_get_db_blocks_fetched(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_blocks_hit',
	        pg_stat_get_db_blocks_hit(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
2025-04-19 07:40:13.260 UTC [892] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 07:40:13.540 UTC [892] DEBUG:  unexpected EOF on client connection
2025-04-19 07:40:16.464 UTC [907] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:40:16.502 UTC [907] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:40:16.521 UTC [907] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:40:16.521 UTC [907] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:40:16.527 UTC [907] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:40:16.535 UTC [907] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:40:16.541 UTC [907] DEBUG:  building index "pg_toast_37394_index" on table "pg_toast_37394" serially
2025-04-19 07:40:16.545 UTC [907] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:40:16.548 UTC [907] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:40:16.548 UTC [907] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:40:16.552 UTC [907] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:40:16.553 UTC [907] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:40:16.553 UTC [907] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:40:16.554 UTC [907] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:40:16.555 UTC [907] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:40:16.555 UTC [907] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:40:16.556 UTC [907] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:40:16.557 UTC [907] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:40:16.558 UTC [907] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:40:16.558 UTC [907] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:40:16.559 UTC [907] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:40:16.559 UTC [907] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:40:16.559 UTC [907] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:40:16.560 UTC [907] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:40:16.562 UTC [907] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:40:16.563 UTC [907] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:40:16.563 UTC [907] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:40:16.564 UTC [907] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:40:16.565 UTC [907] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:40:16.565 UTC [907] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:40:16.569 UTC [907] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:40:16.570 UTC [907] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:40:16.571 UTC [907] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:40:16.571 UTC [907] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:40:16.574 UTC [907] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:40:16.577 UTC [907] DEBUG:  building index "pg_toast_37455_index" on table "pg_toast_37455" serially
2025-04-19 07:40:16.578 UTC [907] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:40:16.578 UTC [907] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:40:16.578 UTC [907] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:40:16.580 UTC [907] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:40:16.582 UTC [907] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:40:16.582 UTC [907] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:40:16.582 UTC [907] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:40:16.583 UTC [907] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:40:16.584 UTC [907] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:40:16.584 UTC [907] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:40:16.586 UTC [907] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:40:16.587 UTC [907] DEBUG:  building index "pg_toast_37488_index" on table "pg_toast_37488" serially
2025-04-19 07:40:16.588 UTC [907] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:40:16.588 UTC [907] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:40:16.588 UTC [907] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:40:16.589 UTC [907] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:40:16.591 UTC [907] DEBUG:  building index "pg_toast_37499_index" on table "pg_toast_37499" serially
2025-04-19 07:40:16.592 UTC [907] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:40:16.593 UTC [907] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:40:16.593 UTC [907] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:40:16.595 UTC [907] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:40:16.600 UTC [907] DEBUG:  building index "pg_toast_37522_index" on table "pg_toast_37522" serially
2025-04-19 07:40:16.605 UTC [907] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:40:16.605 UTC [907] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:40:16.605 UTC [907] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:40:16.608 UTC [907] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:40:16.608 UTC [907] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:40:16.610 UTC [907] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:40:16.611 UTC [907] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:40:16.613 UTC [907] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:40:16.613 UTC [907] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:40:16.616 UTC [907] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:40:16.616 UTC [907] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:40:16.619 UTC [907] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:40:16.619 UTC [907] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:40:16.622 UTC [907] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:40:16.622 UTC [907] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:40:16.624 UTC [907] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:40:16.624 UTC [907] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:40:16.628 UTC [907] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:40:16.628 UTC [907] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:40:16.633 UTC [907] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:40:16.633 UTC [907] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:40:16.636 UTC [907] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:40:16.636 UTC [907] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:40:16.639 UTC [907] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:40:16.639 UTC [907] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:40:16.672 UTC [907] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:40:17.025 UTC [907] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$1kLduohljBFMi0GLFE9AteC4Z1pE8e2bIBDJNwfbwqGHm0hHRDERO')
	                RETURNING id, username, email
	                
2025-04-19 07:40:17.026 UTC [907] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:40:17.027 UTC [907] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:40:17.028 UTC [907] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 07:40:17.049 UTC [907] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:40:17.052 UTC [907] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:40:17.055 UTC [907] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:40:17.059 UTC [907] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:40:17.059 UTC [907] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:40:17.063 UTC [907] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:40:17.067 UTC [907] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:40:17.069 UTC [907] DEBUG:  building index "pg_toast_37558_index" on table "pg_toast_37558" serially
2025-04-19 07:40:17.070 UTC [907] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:40:17.070 UTC [907] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:40:17.070 UTC [907] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:40:17.071 UTC [907] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:40:17.071 UTC [907] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:40:17.071 UTC [907] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:40:17.072 UTC [907] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:40:17.072 UTC [907] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:40:17.072 UTC [907] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:40:17.073 UTC [907] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:40:17.074 UTC [907] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:40:17.074 UTC [907] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:40:17.074 UTC [907] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:40:17.075 UTC [907] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:40:17.075 UTC [907] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:40:17.075 UTC [907] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:40:17.076 UTC [907] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:40:17.077 UTC [907] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:40:17.077 UTC [907] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:40:17.077 UTC [907] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:40:17.079 UTC [907] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:40:17.080 UTC [907] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:40:17.080 UTC [907] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:40:17.085 UTC [907] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:40:17.086 UTC [907] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:40:17.087 UTC [907] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:40:17.087 UTC [907] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:40:17.090 UTC [907] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:40:17.092 UTC [907] DEBUG:  building index "pg_toast_37619_index" on table "pg_toast_37619" serially
2025-04-19 07:40:17.095 UTC [907] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:40:17.096 UTC [907] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:40:17.096 UTC [907] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:40:17.104 UTC [907] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:40:17.105 UTC [907] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:40:17.106 UTC [907] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:40:17.106 UTC [907] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:40:17.107 UTC [907] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:40:17.107 UTC [907] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:40:17.107 UTC [907] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:40:17.110 UTC [907] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:40:17.119 UTC [907] DEBUG:  building index "pg_toast_37652_index" on table "pg_toast_37652" serially
2025-04-19 07:40:17.145 UTC [907] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:40:17.157 UTC [907] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:40:17.157 UTC [907] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:40:17.158 UTC [907] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:40:17.160 UTC [907] DEBUG:  building index "pg_toast_37663_index" on table "pg_toast_37663" serially
2025-04-19 07:40:17.162 UTC [907] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:40:17.162 UTC [907] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:40:17.162 UTC [907] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:40:17.164 UTC [907] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:40:17.166 UTC [907] DEBUG:  building index "pg_toast_37686_index" on table "pg_toast_37686" serially
2025-04-19 07:40:17.171 UTC [907] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:40:17.172 UTC [907] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:40:17.172 UTC [907] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:40:17.179 UTC [907] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:40:17.180 UTC [907] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:40:17.189 UTC [907] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:40:17.189 UTC [907] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:40:17.195 UTC [907] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:40:17.195 UTC [907] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:40:17.204 UTC [907] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:40:17.204 UTC [907] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:40:17.210 UTC [907] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:40:17.210 UTC [907] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:40:17.218 UTC [907] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:40:17.218 UTC [907] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:40:17.244 UTC [907] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:40:17.244 UTC [907] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:40:17.267 UTC [907] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:40:17.267 UTC [907] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:40:17.279 UTC [907] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:40:17.279 UTC [907] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:40:17.293 UTC [907] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:40:17.294 UTC [907] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:40:17.310 UTC [907] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:40:17.310 UTC [907] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:40:17.344 UTC [907] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:40:17.704 UTC [907] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$B6LM2nTm9tIBQ69T9Sy0.e.N3KrPjDw03bJnqtqaYJP0u5f.N7nM6')
	                RETURNING id, username, email
	                
2025-04-19 07:40:17.706 UTC [907] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:40:17.707 UTC [907] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:40:20.420 UTC [908] DEBUG:  autovacuum: processing database "postgres"
2025-04-19 07:40:29.283 UTC [907] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 07:40:29.591 UTC [907] DEBUG:  unexpected EOF on client connection
2025-04-19 07:40:32.209 UTC [916] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:40:32.637 UTC [916] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:40:32.712 UTC [916] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:40:32.712 UTC [916] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:40:32.735 UTC [916] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:40:32.756 UTC [916] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:40:32.766 UTC [916] DEBUG:  building index "pg_toast_37722_index" on table "pg_toast_37722" serially
2025-04-19 07:40:32.769 UTC [916] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:40:32.771 UTC [916] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:40:32.771 UTC [916] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:40:32.772 UTC [916] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:40:32.772 UTC [916] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:40:32.773 UTC [916] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:40:32.774 UTC [916] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:40:32.774 UTC [916] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:40:32.774 UTC [916] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:40:32.775 UTC [916] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:40:32.778 UTC [916] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:40:32.779 UTC [916] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:40:32.779 UTC [916] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:40:32.782 UTC [916] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:40:32.783 UTC [916] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:40:32.783 UTC [916] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:40:32.784 UTC [916] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:40:32.786 UTC [916] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:40:32.786 UTC [916] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:40:32.786 UTC [916] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:40:32.788 UTC [916] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:40:32.789 UTC [916] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:40:32.789 UTC [916] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:40:32.793 UTC [916] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:40:32.795 UTC [916] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:40:32.795 UTC [916] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:40:32.795 UTC [916] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:40:32.797 UTC [916] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:40:32.800 UTC [916] DEBUG:  building index "pg_toast_37783_index" on table "pg_toast_37783" serially
2025-04-19 07:40:32.803 UTC [916] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:40:32.803 UTC [916] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:40:32.803 UTC [916] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:40:32.807 UTC [916] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:40:32.811 UTC [916] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:40:32.811 UTC [916] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:40:32.811 UTC [916] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:40:32.813 UTC [916] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:40:32.813 UTC [916] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:40:32.813 UTC [916] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:40:32.816 UTC [916] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:40:32.818 UTC [916] DEBUG:  building index "pg_toast_37816_index" on table "pg_toast_37816" serially
2025-04-19 07:40:32.821 UTC [916] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:40:32.821 UTC [916] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:40:32.821 UTC [916] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:40:32.829 UTC [916] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:40:32.830 UTC [916] DEBUG:  building index "pg_toast_37827_index" on table "pg_toast_37827" serially
2025-04-19 07:40:32.832 UTC [916] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:40:32.832 UTC [916] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:40:32.832 UTC [916] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:40:32.834 UTC [916] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:40:32.835 UTC [916] DEBUG:  building index "pg_toast_37850_index" on table "pg_toast_37850" serially
2025-04-19 07:40:32.836 UTC [916] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:40:32.837 UTC [916] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:40:32.837 UTC [916] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:40:32.837 UTC [916] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:40:32.837 UTC [916] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:40:32.838 UTC [916] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:40:32.838 UTC [916] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:40:32.841 UTC [916] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:40:32.841 UTC [916] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:40:32.842 UTC [916] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:40:32.842 UTC [916] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:40:32.843 UTC [916] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:40:32.844 UTC [916] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:40:32.845 UTC [916] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:40:32.845 UTC [916] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:40:32.846 UTC [916] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:40:32.846 UTC [916] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:40:32.848 UTC [916] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:40:32.848 UTC [916] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:40:32.849 UTC [916] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:40:32.849 UTC [916] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:40:32.851 UTC [916] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:40:32.851 UTC [916] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:40:32.852 UTC [916] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:40:32.852 UTC [916] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:40:32.882 UTC [916] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:40:33.344 UTC [916] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$aq7J/ZdLbWtmzVS0QElNo.4A7KCBKQADP9AzNl.cooRdVStq8R4ku')
	                RETURNING id, username, email
	                
2025-04-19 07:40:33.348 UTC [916] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:40:33.349 UTC [916] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:40:33.352 UTC [916] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 07:40:33.382 UTC [916] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:40:33.390 UTC [916] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:40:33.394 UTC [916] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:40:33.403 UTC [916] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:40:33.403 UTC [916] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:40:33.414 UTC [916] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:40:33.421 UTC [916] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:40:33.425 UTC [916] DEBUG:  building index "pg_toast_37886_index" on table "pg_toast_37886" serially
2025-04-19 07:40:33.426 UTC [916] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:40:33.427 UTC [916] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:40:33.427 UTC [916] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:40:33.428 UTC [916] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:40:33.428 UTC [916] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:40:33.428 UTC [916] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:40:33.429 UTC [916] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:40:33.429 UTC [916] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:40:33.429 UTC [916] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:40:33.430 UTC [916] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:40:33.431 UTC [916] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:40:33.432 UTC [916] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:40:33.432 UTC [916] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:40:33.432 UTC [916] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:40:33.433 UTC [916] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:40:33.433 UTC [916] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:40:33.434 UTC [916] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:40:33.435 UTC [916] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:40:33.435 UTC [916] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:40:33.435 UTC [916] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:40:33.436 UTC [916] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:40:33.437 UTC [916] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:40:33.437 UTC [916] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:40:33.438 UTC [916] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:40:33.439 UTC [916] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:40:33.440 UTC [916] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:40:33.440 UTC [916] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:40:33.441 UTC [916] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:40:33.442 UTC [916] DEBUG:  building index "pg_toast_37947_index" on table "pg_toast_37947" serially
2025-04-19 07:40:33.443 UTC [916] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:40:33.443 UTC [916] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:40:33.443 UTC [916] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:40:33.444 UTC [916] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:40:33.447 UTC [916] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:40:33.449 UTC [916] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:40:33.450 UTC [916] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:40:33.454 UTC [916] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:40:33.455 UTC [916] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:40:33.455 UTC [916] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:40:33.458 UTC [916] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:40:33.461 UTC [916] DEBUG:  building index "pg_toast_37980_index" on table "pg_toast_37980" serially
2025-04-19 07:40:33.462 UTC [916] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:40:33.462 UTC [916] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:40:33.463 UTC [916] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:40:33.463 UTC [916] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:40:33.465 UTC [916] DEBUG:  building index "pg_toast_37991_index" on table "pg_toast_37991" serially
2025-04-19 07:40:33.466 UTC [916] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:40:33.466 UTC [916] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:40:33.466 UTC [916] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:40:33.468 UTC [916] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:40:33.470 UTC [916] DEBUG:  building index "pg_toast_38014_index" on table "pg_toast_38014" serially
2025-04-19 07:40:33.471 UTC [916] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:40:33.471 UTC [916] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:40:33.471 UTC [916] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:40:33.472 UTC [916] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:40:33.472 UTC [916] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:40:33.473 UTC [916] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:40:33.473 UTC [916] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:40:33.474 UTC [916] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:40:33.474 UTC [916] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:40:33.475 UTC [916] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:40:33.475 UTC [916] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:40:33.476 UTC [916] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:40:33.476 UTC [916] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:40:33.477 UTC [916] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:40:33.477 UTC [916] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:40:33.478 UTC [916] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:40:33.478 UTC [916] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:40:33.478 UTC [916] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:40:33.478 UTC [916] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:40:33.480 UTC [916] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:40:33.480 UTC [916] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:40:33.481 UTC [916] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:40:33.481 UTC [916] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:40:33.482 UTC [916] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:40:33.482 UTC [916] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:40:33.492 UTC [916] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:40:33.751 UTC [916] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$/JfNiNg403hwcT/2bwkFnepuNjSVjj/W0AgFbEk5S7.Eay0KaqWbS')
	                RETURNING id, username, email
	                
2025-04-19 07:40:33.752 UTC [916] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:40:33.752 UTC [916] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:40:45.606 UTC [916] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 07:40:45.927 UTC [916] DEBUG:  unexpected EOF on client connection
2025-04-19 07:40:48.260 UTC [931] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:40:48.267 UTC [931] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:40:48.277 UTC [931] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:40:48.277 UTC [931] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:40:48.282 UTC [931] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:40:48.285 UTC [931] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:40:48.288 UTC [931] DEBUG:  building index "pg_toast_38050_index" on table "pg_toast_38050" serially
2025-04-19 07:40:48.289 UTC [931] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:40:48.290 UTC [931] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:40:48.290 UTC [931] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:40:48.291 UTC [931] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:40:48.291 UTC [931] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:40:48.291 UTC [931] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:40:48.292 UTC [931] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:40:48.293 UTC [931] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:40:48.293 UTC [931] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:40:48.294 UTC [931] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:40:48.296 UTC [931] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:40:48.297 UTC [931] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:40:48.297 UTC [931] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:40:48.299 UTC [931] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:40:48.299 UTC [931] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:40:48.299 UTC [931] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:40:48.301 UTC [931] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:40:48.304 UTC [931] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:40:48.305 UTC [931] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:40:48.305 UTC [931] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:40:48.311 UTC [931] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:40:48.312 UTC [931] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:40:48.312 UTC [931] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:40:48.316 UTC [931] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:40:48.318 UTC [931] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:40:48.318 UTC [931] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:40:48.318 UTC [931] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:40:48.321 UTC [931] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:40:48.325 UTC [931] DEBUG:  building index "pg_toast_38111_index" on table "pg_toast_38111" serially
2025-04-19 07:40:48.326 UTC [931] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:40:48.326 UTC [931] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:40:48.326 UTC [931] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:40:48.327 UTC [931] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:40:48.329 UTC [931] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:40:48.329 UTC [931] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:40:48.329 UTC [931] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:40:48.329 UTC [931] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:40:48.330 UTC [931] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:40:48.330 UTC [931] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:40:48.331 UTC [931] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:40:48.332 UTC [931] DEBUG:  building index "pg_toast_38144_index" on table "pg_toast_38144" serially
2025-04-19 07:40:48.333 UTC [931] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:40:48.333 UTC [931] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:40:48.333 UTC [931] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:40:48.334 UTC [931] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:40:48.335 UTC [931] DEBUG:  building index "pg_toast_38155_index" on table "pg_toast_38155" serially
2025-04-19 07:40:48.336 UTC [931] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:40:48.336 UTC [931] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:40:48.336 UTC [931] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:40:48.337 UTC [931] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:40:48.338 UTC [931] DEBUG:  building index "pg_toast_38178_index" on table "pg_toast_38178" serially
2025-04-19 07:40:48.339 UTC [931] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:40:48.339 UTC [931] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:40:48.339 UTC [931] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:40:48.340 UTC [931] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:40:48.340 UTC [931] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:40:48.341 UTC [931] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:40:48.341 UTC [931] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:40:48.342 UTC [931] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:40:48.342 UTC [931] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:40:48.343 UTC [931] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:40:48.343 UTC [931] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:40:48.344 UTC [931] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:40:48.344 UTC [931] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:40:48.344 UTC [931] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:40:48.344 UTC [931] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:40:48.345 UTC [931] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:40:48.345 UTC [931] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:40:48.346 UTC [931] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:40:48.346 UTC [931] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:40:48.347 UTC [931] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:40:48.347 UTC [931] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:40:48.348 UTC [931] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:40:48.348 UTC [931] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:40:48.349 UTC [931] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:40:48.349 UTC [931] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:40:48.365 UTC [931] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:40:48.638 UTC [931] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$.LF3sWmvOgZIy5rZoz6GF.RI5sAg6UG3kqx7RmNvTGF5qBRtl/p2S')
	                RETURNING id, username, email
	                
2025-04-19 07:40:48.638 UTC [931] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:40:48.639 UTC [931] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:40:48.639 UTC [931] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 07:40:48.650 UTC [931] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:40:48.651 UTC [931] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:40:48.654 UTC [931] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:40:48.669 UTC [931] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:40:48.669 UTC [931] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:40:48.681 UTC [931] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:40:48.688 UTC [931] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:40:48.690 UTC [931] DEBUG:  building index "pg_toast_38214_index" on table "pg_toast_38214" serially
2025-04-19 07:40:48.714 UTC [931] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:40:48.716 UTC [931] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:40:48.716 UTC [931] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:40:48.734 UTC [931] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:40:48.735 UTC [931] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:40:48.735 UTC [931] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:40:48.737 UTC [931] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:40:48.738 UTC [931] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:40:48.738 UTC [931] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:40:48.742 UTC [931] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:40:48.744 UTC [931] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:40:48.745 UTC [931] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:40:48.745 UTC [931] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:40:48.746 UTC [931] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:40:48.747 UTC [931] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:40:48.747 UTC [931] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:40:48.750 UTC [931] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:40:48.753 UTC [931] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:40:48.754 UTC [931] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:40:48.754 UTC [931] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:40:48.755 UTC [931] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:40:48.756 UTC [931] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:40:48.756 UTC [931] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:40:48.757 UTC [931] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:40:48.758 UTC [931] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:40:48.758 UTC [931] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:40:48.758 UTC [931] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:40:48.759 UTC [931] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:40:48.761 UTC [931] DEBUG:  building index "pg_toast_38275_index" on table "pg_toast_38275" serially
2025-04-19 07:40:48.761 UTC [931] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:40:48.762 UTC [931] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:40:48.762 UTC [931] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:40:48.763 UTC [931] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:40:48.764 UTC [931] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:40:48.764 UTC [931] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:40:48.764 UTC [931] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:40:48.765 UTC [931] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:40:48.765 UTC [931] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:40:48.765 UTC [931] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:40:48.767 UTC [931] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:40:48.768 UTC [931] DEBUG:  building index "pg_toast_38308_index" on table "pg_toast_38308" serially
2025-04-19 07:40:48.769 UTC [931] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:40:48.769 UTC [931] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:40:48.769 UTC [931] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:40:48.770 UTC [931] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:40:48.771 UTC [931] DEBUG:  building index "pg_toast_38319_index" on table "pg_toast_38319" serially
2025-04-19 07:40:48.772 UTC [931] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:40:48.772 UTC [931] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:40:48.772 UTC [931] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:40:48.774 UTC [931] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:40:48.776 UTC [931] DEBUG:  building index "pg_toast_38342_index" on table "pg_toast_38342" serially
2025-04-19 07:40:48.776 UTC [931] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:40:48.777 UTC [931] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:40:48.777 UTC [931] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:40:48.778 UTC [931] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:40:48.778 UTC [931] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:40:48.778 UTC [931] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:40:48.778 UTC [931] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:40:48.779 UTC [931] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:40:48.779 UTC [931] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:40:48.780 UTC [931] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:40:48.780 UTC [931] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:40:48.781 UTC [931] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:40:48.781 UTC [931] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:40:48.782 UTC [931] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:40:48.782 UTC [931] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:40:48.783 UTC [931] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:40:48.783 UTC [931] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:40:48.784 UTC [931] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:40:48.784 UTC [931] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:40:48.785 UTC [931] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:40:48.785 UTC [931] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:40:48.785 UTC [931] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:40:48.785 UTC [931] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:40:48.787 UTC [931] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:40:48.787 UTC [931] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:40:48.798 UTC [931] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:40:49.042 UTC [931] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$c7H68qw5ptWGgXd1XK9V4OOQmIKjwfXM.EXMy69AvWkRVN0gVRUee')
	                RETURNING id, username, email
	                
2025-04-19 07:40:49.042 UTC [931] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:40:49.043 UTC [931] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:40:50.425 UTC [932] DEBUG:  autovacuum: processing database "powerball"
2025-04-19 07:40:50.680 UTC [932] DEBUG:  rehashing catalog cache id 14 for pg_opclass; 17 tups, 8 buckets
2025-04-19 07:41:01.826 UTC [931] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 07:41:02.159 UTC [931] DEBUG:  unexpected EOF on client connection
2025-04-19 07:41:04.774 UTC [947] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:41:04.796 UTC [947] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:41:04.825 UTC [947] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:41:04.825 UTC [947] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:41:04.845 UTC [947] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:41:04.854 UTC [947] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:41:04.865 UTC [947] DEBUG:  building index "pg_toast_38379_index" on table "pg_toast_38379" serially
2025-04-19 07:41:04.869 UTC [947] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:41:04.873 UTC [947] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:41:04.873 UTC [947] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:41:04.876 UTC [947] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:41:04.876 UTC [947] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:41:04.877 UTC [947] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:41:04.880 UTC [947] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:41:04.881 UTC [947] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:41:04.881 UTC [947] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:41:04.885 UTC [947] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:41:04.889 UTC [947] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:41:04.889 UTC [947] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:41:04.889 UTC [947] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:41:04.891 UTC [947] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:41:04.891 UTC [947] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:41:04.891 UTC [947] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:41:04.894 UTC [947] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:41:04.898 UTC [947] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:41:04.898 UTC [947] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:41:04.898 UTC [947] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:41:04.902 UTC [947] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:41:04.903 UTC [947] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:41:04.903 UTC [947] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:41:04.909 UTC [947] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:41:04.911 UTC [947] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:41:04.911 UTC [947] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:41:04.911 UTC [947] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:41:04.914 UTC [947] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:41:04.917 UTC [947] DEBUG:  building index "pg_toast_38440_index" on table "pg_toast_38440" serially
2025-04-19 07:41:04.919 UTC [947] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:41:04.919 UTC [947] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:41:04.920 UTC [947] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:41:04.924 UTC [947] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:41:04.926 UTC [947] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:41:04.927 UTC [947] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:41:04.927 UTC [947] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:41:04.928 UTC [947] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:41:04.928 UTC [947] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:41:04.928 UTC [947] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:41:04.930 UTC [947] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:41:04.933 UTC [947] DEBUG:  building index "pg_toast_38473_index" on table "pg_toast_38473" serially
2025-04-19 07:41:04.936 UTC [947] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:41:04.936 UTC [947] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:41:04.936 UTC [947] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:41:04.937 UTC [947] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:41:04.939 UTC [947] DEBUG:  building index "pg_toast_38484_index" on table "pg_toast_38484" serially
2025-04-19 07:41:04.940 UTC [947] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:41:04.940 UTC [947] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:41:04.940 UTC [947] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:41:04.943 UTC [947] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:41:04.944 UTC [947] DEBUG:  building index "pg_toast_38507_index" on table "pg_toast_38507" serially
2025-04-19 07:41:04.945 UTC [947] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:41:04.946 UTC [947] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:41:04.946 UTC [947] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:41:04.949 UTC [947] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:41:04.949 UTC [947] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:41:04.951 UTC [947] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:41:04.951 UTC [947] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:41:04.954 UTC [947] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:41:04.954 UTC [947] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:41:04.956 UTC [947] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:41:04.956 UTC [947] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:41:04.958 UTC [947] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:41:04.958 UTC [947] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:41:04.959 UTC [947] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:41:04.959 UTC [947] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:41:04.961 UTC [947] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:41:04.961 UTC [947] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:41:04.962 UTC [947] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:41:04.962 UTC [947] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:41:04.964 UTC [947] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:41:04.964 UTC [947] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:41:04.965 UTC [947] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:41:04.965 UTC [947] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:41:04.967 UTC [947] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:41:04.967 UTC [947] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:41:05.002 UTC [947] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:41:05.597 UTC [947] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$qvzOvj8xP2g6PYwPjY81BOGbhzOlVaAQtE16cw8FW3QY3fbVVGlsS')
	                RETURNING id, username, email
	                
2025-04-19 07:41:05.881 UTC [947] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:41:05.887 UTC [947] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:41:05.906 UTC [947] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 07:41:06.002 UTC [947] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:41:06.021 UTC [947] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:41:06.042 UTC [947] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:41:06.057 UTC [947] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:41:06.057 UTC [947] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:41:06.070 UTC [947] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:41:06.082 UTC [947] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:41:06.088 UTC [947] DEBUG:  building index "pg_toast_38543_index" on table "pg_toast_38543" serially
2025-04-19 07:41:06.091 UTC [947] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:41:06.092 UTC [947] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:41:06.092 UTC [947] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:41:06.097 UTC [947] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:41:06.097 UTC [947] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:41:06.097 UTC [947] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:41:06.098 UTC [947] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:41:06.099 UTC [947] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:41:06.099 UTC [947] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:41:06.100 UTC [947] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:41:06.103 UTC [947] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:41:06.103 UTC [947] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:41:06.103 UTC [947] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:41:06.105 UTC [947] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:41:06.105 UTC [947] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:41:06.105 UTC [947] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:41:06.107 UTC [947] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:41:06.109 UTC [947] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:41:06.109 UTC [947] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:41:06.109 UTC [947] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:41:06.112 UTC [947] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:41:06.112 UTC [947] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:41:06.112 UTC [947] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:41:06.114 UTC [947] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:41:06.116 UTC [947] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:41:06.116 UTC [947] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:41:06.116 UTC [947] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:41:06.119 UTC [947] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:41:06.121 UTC [947] DEBUG:  building index "pg_toast_38604_index" on table "pg_toast_38604" serially
2025-04-19 07:41:06.122 UTC [947] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:41:06.122 UTC [947] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:41:06.122 UTC [947] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:41:06.124 UTC [947] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:41:06.125 UTC [947] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:41:06.126 UTC [947] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:41:06.126 UTC [947] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:41:06.127 UTC [947] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:41:06.127 UTC [947] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:41:06.127 UTC [947] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:41:06.132 UTC [947] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:41:06.135 UTC [947] DEBUG:  building index "pg_toast_38637_index" on table "pg_toast_38637" serially
2025-04-19 07:41:06.136 UTC [947] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:41:06.137 UTC [947] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:41:06.137 UTC [947] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:41:06.138 UTC [947] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:41:06.139 UTC [947] DEBUG:  building index "pg_toast_38648_index" on table "pg_toast_38648" serially
2025-04-19 07:41:06.140 UTC [947] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:41:06.141 UTC [947] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:41:06.141 UTC [947] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:41:06.145 UTC [947] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:41:06.147 UTC [947] DEBUG:  building index "pg_toast_38671_index" on table "pg_toast_38671" serially
2025-04-19 07:41:06.148 UTC [947] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:41:06.149 UTC [947] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:41:06.149 UTC [947] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:41:06.151 UTC [947] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:41:06.151 UTC [947] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:41:06.152 UTC [947] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:41:06.152 UTC [947] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:41:06.153 UTC [947] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:41:06.153 UTC [947] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:41:06.154 UTC [947] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:41:06.154 UTC [947] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:41:06.156 UTC [947] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:41:06.156 UTC [947] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:41:06.159 UTC [947] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:41:06.159 UTC [947] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:41:06.160 UTC [947] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:41:06.160 UTC [947] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:41:06.162 UTC [947] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:41:06.162 UTC [947] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:41:06.164 UTC [947] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:41:06.164 UTC [947] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:41:06.165 UTC [947] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:41:06.166 UTC [947] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:41:06.168 UTC [947] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:41:06.168 UTC [947] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:41:06.220 UTC [947] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:41:06.843 UTC [947] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$NsTFZZDrdlbOQun/3AG02uJ4ocnpP89RJU6Lpb8thxc3U2zaGdtvW')
	                RETURNING id, username, email
	                
2025-04-19 07:41:06.848 UTC [947] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:41:06.850 UTC [947] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:41:18.206 UTC [947] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 07:41:18.564 UTC [947] DEBUG:  unexpected EOF on client connection
2025-04-19 07:41:20.416 UTC [955] DEBUG:  autovacuum: processing database "postgres"
2025-04-19 07:41:21.047 UTC [956] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:41:21.053 UTC [956] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:41:21.062 UTC [956] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:41:21.062 UTC [956] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:41:21.066 UTC [956] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:41:21.070 UTC [956] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:41:21.076 UTC [956] DEBUG:  building index "pg_toast_38707_index" on table "pg_toast_38707" serially
2025-04-19 07:41:21.078 UTC [956] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:41:21.079 UTC [956] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:41:21.079 UTC [956] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:41:21.080 UTC [956] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:41:21.080 UTC [956] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:41:21.080 UTC [956] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:41:21.081 UTC [956] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:41:21.081 UTC [956] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:41:21.081 UTC [956] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:41:21.082 UTC [956] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:41:21.083 UTC [956] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:41:21.083 UTC [956] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:41:21.083 UTC [956] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:41:21.084 UTC [956] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:41:21.084 UTC [956] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:41:21.084 UTC [956] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:41:21.085 UTC [956] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:41:21.086 UTC [956] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:41:21.087 UTC [956] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:41:21.087 UTC [956] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:41:21.087 UTC [956] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:41:21.088 UTC [956] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:41:21.088 UTC [956] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:41:21.089 UTC [956] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:41:21.090 UTC [956] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:41:21.090 UTC [956] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:41:21.090 UTC [956] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:41:21.091 UTC [956] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:41:21.093 UTC [956] DEBUG:  building index "pg_toast_38768_index" on table "pg_toast_38768" serially
2025-04-19 07:41:21.094 UTC [956] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:41:21.094 UTC [956] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:41:21.094 UTC [956] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:41:21.095 UTC [956] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:41:21.096 UTC [956] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:41:21.096 UTC [956] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:41:21.096 UTC [956] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:41:21.097 UTC [956] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:41:21.097 UTC [956] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:41:21.097 UTC [956] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:41:21.099 UTC [956] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:41:21.100 UTC [956] DEBUG:  building index "pg_toast_38801_index" on table "pg_toast_38801" serially
2025-04-19 07:41:21.100 UTC [956] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:41:21.101 UTC [956] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:41:21.101 UTC [956] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:41:21.101 UTC [956] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:41:21.102 UTC [956] DEBUG:  building index "pg_toast_38812_index" on table "pg_toast_38812" serially
2025-04-19 07:41:21.103 UTC [956] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:41:21.103 UTC [956] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:41:21.103 UTC [956] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:41:21.105 UTC [956] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:41:21.109 UTC [956] DEBUG:  building index "pg_toast_38835_index" on table "pg_toast_38835" serially
2025-04-19 07:41:21.111 UTC [956] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:41:21.111 UTC [956] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:41:21.111 UTC [956] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:41:21.112 UTC [956] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:41:21.112 UTC [956] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:41:21.113 UTC [956] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:41:21.113 UTC [956] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:41:21.114 UTC [956] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:41:21.114 UTC [956] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:41:21.115 UTC [956] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:41:21.115 UTC [956] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:41:21.116 UTC [956] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:41:21.116 UTC [956] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:41:21.117 UTC [956] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:41:21.117 UTC [956] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:41:21.120 UTC [956] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:41:21.120 UTC [956] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:41:21.122 UTC [956] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:41:21.122 UTC [956] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:41:21.123 UTC [956] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:41:21.123 UTC [956] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:41:21.124 UTC [956] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:41:21.124 UTC [956] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:41:21.125 UTC [956] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:41:21.125 UTC [956] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:41:21.142 UTC [956] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:41:21.424 UTC [956] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$JFRAu9VQFXfzRYrdxcgJK.95FnbPPsMTPZv4T5yJWhI8tq99rdVTq')
	                RETURNING id, username, email
	                
2025-04-19 07:41:21.426 UTC [956] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:41:21.426 UTC [956] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:41:21.427 UTC [956] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 07:41:21.445 UTC [956] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:41:21.449 UTC [956] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 07:41:21.453 UTC [956] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 07:41:21.459 UTC [956] NOTICE:  drop cascades to 2 other objects
2025-04-19 07:41:21.459 UTC [956] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 07:41:21.465 UTC [956] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 07:41:21.469 UTC [956] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 07:41:21.471 UTC [956] DEBUG:  building index "pg_toast_38871_index" on table "pg_toast_38871" serially
2025-04-19 07:41:21.472 UTC [956] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 07:41:21.472 UTC [956] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 07:41:21.472 UTC [956] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 07:41:21.473 UTC [956] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 07:41:21.473 UTC [956] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 07:41:21.473 UTC [956] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 07:41:21.474 UTC [956] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 07:41:21.475 UTC [956] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 07:41:21.475 UTC [956] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 07:41:21.475 UTC [956] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 07:41:21.477 UTC [956] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 07:41:21.477 UTC [956] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 07:41:21.477 UTC [956] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 07:41:21.479 UTC [956] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 07:41:21.479 UTC [956] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 07:41:21.479 UTC [956] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 07:41:21.480 UTC [956] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 07:41:21.481 UTC [956] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 07:41:21.481 UTC [956] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 07:41:21.481 UTC [956] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 07:41:21.483 UTC [956] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 07:41:21.483 UTC [956] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 07:41:21.483 UTC [956] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 07:41:21.484 UTC [956] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 07:41:21.486 UTC [956] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 07:41:21.486 UTC [956] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 07:41:21.486 UTC [956] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 07:41:21.487 UTC [956] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 07:41:21.489 UTC [956] DEBUG:  building index "pg_toast_38932_index" on table "pg_toast_38932" serially
2025-04-19 07:41:21.489 UTC [956] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 07:41:21.490 UTC [956] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 07:41:21.490 UTC [956] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 07:41:21.491 UTC [956] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 07:41:21.492 UTC [956] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 07:41:21.493 UTC [956] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 07:41:21.493 UTC [956] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 07:41:21.493 UTC [956] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 07:41:21.494 UTC [956] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 07:41:21.494 UTC [956] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 07:41:21.495 UTC [956] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 07:41:21.496 UTC [956] DEBUG:  building index "pg_toast_38965_index" on table "pg_toast_38965" serially
2025-04-19 07:41:21.497 UTC [956] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 07:41:21.497 UTC [956] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 07:41:21.497 UTC [956] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 07:41:21.498 UTC [956] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 07:41:21.499 UTC [956] DEBUG:  building index "pg_toast_38976_index" on table "pg_toast_38976" serially
2025-04-19 07:41:21.499 UTC [956] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 07:41:21.500 UTC [956] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 07:41:21.500 UTC [956] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 07:41:21.501 UTC [956] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 07:41:21.502 UTC [956] DEBUG:  building index "pg_toast_38999_index" on table "pg_toast_38999" serially
2025-04-19 07:41:21.503 UTC [956] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 07:41:21.503 UTC [956] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 07:41:21.503 UTC [956] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 07:41:21.504 UTC [956] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 07:41:21.504 UTC [956] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 07:41:21.505 UTC [956] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 07:41:21.505 UTC [956] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 07:41:21.506 UTC [956] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 07:41:21.506 UTC [956] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 07:41:21.507 UTC [956] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 07:41:21.507 UTC [956] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 07:41:21.508 UTC [956] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 07:41:21.508 UTC [956] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 07:41:21.508 UTC [956] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 07:41:21.508 UTC [956] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 07:41:21.509 UTC [956] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 07:41:21.509 UTC [956] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 07:41:21.510 UTC [956] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 07:41:21.510 UTC [956] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 07:41:21.511 UTC [956] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 07:41:21.511 UTC [956] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 07:41:21.512 UTC [956] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 07:41:21.512 UTC [956] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 07:41:21.516 UTC [956] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 07:41:21.516 UTC [956] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 07:41:21.529 UTC [956] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 07:41:21.776 UTC [956] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$U/JP88prMz.kTM0yIXKIZ.HV4A5UiYD2hF4IEaq7t/rqU2zQzKdI2')
	                RETURNING id, username, email
	                
2025-04-19 07:41:21.777 UTC [956] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 07:41:21.778 UTC [956] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 07:41:33.420 UTC [956] DEBUG:  unexpected EOF on client connection
2025-04-19 07:41:33.663 UTC [1] LOG:  received fast shutdown request
2025-04-19 07:41:33.666 UTC [1] LOG:  aborting any active transactions
2025-04-19 07:41:33.666 UTC [809] FATAL:  terminating connection due to administrator command
2025-04-19 07:41:33.666 UTC [64] DEBUG:  logical replication launcher shutting down
2025-04-19 07:41:33.666 UTC [808] FATAL:  terminating connection due to administrator command
2025-04-19 07:41:33.667 UTC [819] FATAL:  terminating connection due to administrator command
2025-04-19 07:41:33.667 UTC [62] DEBUG:  autovacuum launcher shutting down
2025-04-19 07:41:33.667 UTC [354] FATAL:  terminating connection due to administrator command
2025-04-19 07:41:33.677 UTC [1] LOG:  background worker "logical replication launcher" (PID 64) exited with exit code 1
2025-04-19 07:41:33.703 UTC [59] LOG:  shutting down
2025-04-19 07:41:33.704 UTC [59] DEBUG:  performing replication slot checkpoint
2025-04-19 07:41:33.844 UTC [1] LOG:  database system is shut down
